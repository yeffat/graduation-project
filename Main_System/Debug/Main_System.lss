
Main_System.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002dca  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000010e  00800060  00002dca  00002e5e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000024  0080016e  0080016e  00002f6c  2**0
                  ALLOC
  3 .stab         000047dc  00000000  00000000  00002f6c  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00001c32  00000000  00000000  00007748  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 48 07 	jmp	0xe90	; 0xe90 <__vector_1>
       8:	0c 94 75 07 	jmp	0xeea	; 0xeea <__vector_2>
       c:	0c 94 a2 07 	jmp	0xf44	; 0xf44 <__vector_3>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 97 03 	jmp	0x72e	; 0x72e <__vector_12>
      34:	0c 94 f9 01 	jmp	0x3f2	; 0x3f2 <__vector_13>
      38:	0c 94 49 02 	jmp	0x492	; 0x492 <__vector_14>
      3c:	0c 94 a2 02 	jmp	0x544	; 0x544 <__vector_15>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ea ec       	ldi	r30, 0xCA	; 202
      68:	fd e2       	ldi	r31, 0x2D	; 45
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	ae 36       	cpi	r26, 0x6E	; 110
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	11 e0       	ldi	r17, 0x01	; 1
      78:	ae e6       	ldi	r26, 0x6E	; 110
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a2 39       	cpi	r26, 0x92	; 146
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 4a 11 	call	0x2294	; 0x2294 <main>
      8a:	0c 94 e3 16 	jmp	0x2dc6	; 0x2dc6 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <UART_vInit>:
 * Description: Function to initialize the UART peripheral
 * Inputs: none
 * Output: void
 */
void UART_vInit(void)
{
      92:	df 93       	push	r29
      94:	cf 93       	push	r28
      96:	00 d0       	rcall	.+0      	; 0x98 <UART_vInit+0x6>
      98:	cd b7       	in	r28, 0x3d	; 61
      9a:	de b7       	in	r29, 0x3e	; 62
	uint16_t Local_u16BaudRateCalc;

	#if (UART_u8_MODE == UART_u8_NORMAL_MODE)
		Local_u16BaudRateCalc = ((FCPU/(UART_u32_BAUDRATE*16))-1);
      9c:	83 e3       	ldi	r24, 0x33	; 51
      9e:	90 e0       	ldi	r25, 0x00	; 0
      a0:	9a 83       	std	Y+2, r25	; 0x02
      a2:	89 83       	std	Y+1, r24	; 0x01
		UART_UBRRL = (Local_u16BaudRateCalc);
      a4:	e9 e2       	ldi	r30, 0x29	; 41
      a6:	f0 e0       	ldi	r31, 0x00	; 0
      a8:	89 81       	ldd	r24, Y+1	; 0x01
      aa:	80 83       	st	Z, r24
		UART_UBRRH = ((Local_u16BaudRateCalc) >> 8);
      ac:	e0 e4       	ldi	r30, 0x40	; 64
      ae:	f0 e0       	ldi	r31, 0x00	; 0
      b0:	89 81       	ldd	r24, Y+1	; 0x01
      b2:	9a 81       	ldd	r25, Y+2	; 0x02
      b4:	89 2f       	mov	r24, r25
      b6:	99 27       	eor	r25, r25
      b8:	80 83       	st	Z, r24

		/* Checking the transmitter state */
		if (UART_u8_TX_STATE == UART_u8_ENABLE)
			 SET_BIT(UART_UCSRB,TXEN);
      ba:	aa e2       	ldi	r26, 0x2A	; 42
      bc:	b0 e0       	ldi	r27, 0x00	; 0
      be:	ea e2       	ldi	r30, 0x2A	; 42
      c0:	f0 e0       	ldi	r31, 0x00	; 0
      c2:	80 81       	ld	r24, Z
      c4:	88 60       	ori	r24, 0x08	; 8
      c6:	8c 93       	st	X, r24

		/* Checking the receiver state */
		if (UART_u8_RX_STATE == UART_u8_ENABLE)
			 SET_BIT(UART_UCSRB,RXEN);
      c8:	aa e2       	ldi	r26, 0x2A	; 42
      ca:	b0 e0       	ldi	r27, 0x00	; 0
      cc:	ea e2       	ldi	r30, 0x2A	; 42
      ce:	f0 e0       	ldi	r31, 0x00	; 0
      d0:	80 81       	ld	r24, Z
      d2:	80 61       	ori	r24, 0x10	; 16
      d4:	8c 93       	st	X, r24
		    	UART_UCSRC |= (1 << URSEL) | (1 << UCSZ1);
		    	break;
		    }
		    case UART_u8_EIGHT_BITS:
		    {
		    	UART_UCSRC |= (1 << URSEL) | (1 << UCSZ1) | (1 << UCSZ0);
      d6:	a0 e4       	ldi	r26, 0x40	; 64
      d8:	b0 e0       	ldi	r27, 0x00	; 0
      da:	e0 e4       	ldi	r30, 0x40	; 64
      dc:	f0 e0       	ldi	r31, 0x00	; 0
      de:	80 81       	ld	r24, Z
      e0:	86 68       	ori	r24, 0x86	; 134
      e2:	8c 93       	st	X, r24
		UART_UBRRL = Local_u16BaudRateCalc;
		UART_UBRRH = ((Local_u16BaudRateCalc) >> 8);
	#endif

	return;
}
      e4:	0f 90       	pop	r0
      e6:	0f 90       	pop	r0
      e8:	cf 91       	pop	r28
      ea:	df 91       	pop	r29
      ec:	08 95       	ret

000000ee <UART_u8SendChar>:
 * Description: Function to send a single character by UART through TXD pin (PD0)
 * Inputs: the character needed to be sent
 * Output: the Error state of the function
 */
uint8_t UART_u8SendChar (uint8_t Copy_u8Char)
{
      ee:	df 93       	push	r29
      f0:	cf 93       	push	r28
      f2:	00 d0       	rcall	.+0      	; 0xf4 <UART_u8SendChar+0x6>
      f4:	00 d0       	rcall	.+0      	; 0xf6 <UART_u8SendChar+0x8>
      f6:	cd b7       	in	r28, 0x3d	; 61
      f8:	de b7       	in	r29, 0x3e	; 62
      fa:	8c 83       	std	Y+4, r24	; 0x04
	/*Local Variable holding the error state*/
	uint8_t Local_u8Error = ERROR_OK;
      fc:	1b 82       	std	Y+3, r1	; 0x03
	uint16_t Local_u16Timeout = 0;
      fe:	1a 82       	std	Y+2, r1	; 0x02
     100:	19 82       	std	Y+1, r1	; 0x01

	/* Put data into buffer, sends the data */
	UART_UDR = Copy_u8Char;
     102:	ec e2       	ldi	r30, 0x2C	; 44
     104:	f0 e0       	ldi	r31, 0x00	; 0
     106:	8c 81       	ldd	r24, Y+4	; 0x04
     108:	80 83       	st	Z, r24
     10a:	05 c0       	rjmp	.+10     	; 0x116 <UART_u8SendChar+0x28>

	/* Wait for empty transmit buffer and checking that the timeout var doesn't exceed
	 * the fault timeout */
	while (GET_BIT(UART_UCSRA,UDRE) == 0 && Local_u16Timeout < UART_u16_FAULT_TIMEOUT)
	{
		Local_u16Timeout++;
     10c:	89 81       	ldd	r24, Y+1	; 0x01
     10e:	9a 81       	ldd	r25, Y+2	; 0x02
     110:	01 96       	adiw	r24, 0x01	; 1
     112:	9a 83       	std	Y+2, r25	; 0x02
     114:	89 83       	std	Y+1, r24	; 0x01
	/* Put data into buffer, sends the data */
	UART_UDR = Copy_u8Char;

	/* Wait for empty transmit buffer and checking that the timeout var doesn't exceed
	 * the fault timeout */
	while (GET_BIT(UART_UCSRA,UDRE) == 0 && Local_u16Timeout < UART_u16_FAULT_TIMEOUT)
     116:	eb e2       	ldi	r30, 0x2B	; 43
     118:	f0 e0       	ldi	r31, 0x00	; 0
     11a:	80 81       	ld	r24, Z
     11c:	82 95       	swap	r24
     11e:	86 95       	lsr	r24
     120:	87 70       	andi	r24, 0x07	; 7
     122:	88 2f       	mov	r24, r24
     124:	90 e0       	ldi	r25, 0x00	; 0
     126:	81 70       	andi	r24, 0x01	; 1
     128:	90 70       	andi	r25, 0x00	; 0
     12a:	00 97       	sbiw	r24, 0x00	; 0
     12c:	31 f4       	brne	.+12     	; 0x13a <UART_u8SendChar+0x4c>
     12e:	89 81       	ldd	r24, Y+1	; 0x01
     130:	9a 81       	ldd	r25, Y+2	; 0x02
     132:	2c e9       	ldi	r18, 0x9C	; 156
     134:	80 34       	cpi	r24, 0x40	; 64
     136:	92 07       	cpc	r25, r18
     138:	48 f3       	brcs	.-46     	; 0x10c <UART_u8SendChar+0x1e>
	{
		Local_u16Timeout++;
	}

	if (Local_u16Timeout == UART_u16_FAULT_TIMEOUT)
     13a:	89 81       	ldd	r24, Y+1	; 0x01
     13c:	9a 81       	ldd	r25, Y+2	; 0x02
     13e:	2c e9       	ldi	r18, 0x9C	; 156
     140:	80 34       	cpi	r24, 0x40	; 64
     142:	92 07       	cpc	r25, r18
     144:	11 f4       	brne	.+4      	; 0x14a <UART_u8SendChar+0x5c>
		Local_u8Error = ERROR_NOK;
     146:	81 e0       	ldi	r24, 0x01	; 1
     148:	8b 83       	std	Y+3, r24	; 0x03

	/*Function return*/
	return Local_u8Error;
     14a:	8b 81       	ldd	r24, Y+3	; 0x03
}
     14c:	0f 90       	pop	r0
     14e:	0f 90       	pop	r0
     150:	0f 90       	pop	r0
     152:	0f 90       	pop	r0
     154:	cf 91       	pop	r28
     156:	df 91       	pop	r29
     158:	08 95       	ret

0000015a <UART_u8SendStringSynch>:
 * Description: Synchronous Function to send string by UART through TXD pin (PD0)
 * Inputs: pointer to array of characters
 * Output: the Error state of the function
 */
uint8_t UART_u8SendStringSynch (const uint8_t* Copy_u8Data)
{
     15a:	df 93       	push	r29
     15c:	cf 93       	push	r28
     15e:	00 d0       	rcall	.+0      	; 0x160 <UART_u8SendStringSynch+0x6>
     160:	00 d0       	rcall	.+0      	; 0x162 <UART_u8SendStringSynch+0x8>
     162:	0f 92       	push	r0
     164:	cd b7       	in	r28, 0x3d	; 61
     166:	de b7       	in	r29, 0x3e	; 62
     168:	9d 83       	std	Y+5, r25	; 0x05
     16a:	8c 83       	std	Y+4, r24	; 0x04
	/*Local Variable holding the error state*/
	uint8_t Local_u8Error = ERROR_OK;
     16c:	1b 82       	std	Y+3, r1	; 0x03
	uint16_t Local_u16Timeout = 0;
     16e:	1a 82       	std	Y+2, r1	; 0x02
     170:	19 82       	std	Y+1, r1	; 0x01

	if (Copy_u8Data != NULL)
     172:	8c 81       	ldd	r24, Y+4	; 0x04
     174:	9d 81       	ldd	r25, Y+5	; 0x05
     176:	00 97       	sbiw	r24, 0x00	; 0
     178:	b1 f1       	breq	.+108    	; 0x1e6 <UART_u8SendStringSynch+0x8c>
     17a:	2f c0       	rjmp	.+94     	; 0x1da <UART_u8SendStringSynch+0x80>
	{
		while (*Copy_u8Data != '\0')
		{
			Local_u16Timeout = 0;
     17c:	1a 82       	std	Y+2, r1	; 0x02
     17e:	19 82       	std	Y+1, r1	; 0x01

			/* Put data into buffer, sends the data */
			UART_UDR = *Copy_u8Data;
     180:	ec e2       	ldi	r30, 0x2C	; 44
     182:	f0 e0       	ldi	r31, 0x00	; 0
     184:	ac 81       	ldd	r26, Y+4	; 0x04
     186:	bd 81       	ldd	r27, Y+5	; 0x05
     188:	8c 91       	ld	r24, X
     18a:	80 83       	st	Z, r24
     18c:	05 c0       	rjmp	.+10     	; 0x198 <UART_u8SendStringSynch+0x3e>

			/* Wait for empty transmit buffer and checking that the timeout variable doesn't exceed
			 * the fault timeout */
			while (GET_BIT(UART_UCSRA,UDRE) == 0 && Local_u16Timeout < UART_u16_FAULT_TIMEOUT)
			{
				Local_u16Timeout++;
     18e:	89 81       	ldd	r24, Y+1	; 0x01
     190:	9a 81       	ldd	r25, Y+2	; 0x02
     192:	01 96       	adiw	r24, 0x01	; 1
     194:	9a 83       	std	Y+2, r25	; 0x02
     196:	89 83       	std	Y+1, r24	; 0x01
			/* Put data into buffer, sends the data */
			UART_UDR = *Copy_u8Data;

			/* Wait for empty transmit buffer and checking that the timeout variable doesn't exceed
			 * the fault timeout */
			while (GET_BIT(UART_UCSRA,UDRE) == 0 && Local_u16Timeout < UART_u16_FAULT_TIMEOUT)
     198:	eb e2       	ldi	r30, 0x2B	; 43
     19a:	f0 e0       	ldi	r31, 0x00	; 0
     19c:	80 81       	ld	r24, Z
     19e:	82 95       	swap	r24
     1a0:	86 95       	lsr	r24
     1a2:	87 70       	andi	r24, 0x07	; 7
     1a4:	88 2f       	mov	r24, r24
     1a6:	90 e0       	ldi	r25, 0x00	; 0
     1a8:	81 70       	andi	r24, 0x01	; 1
     1aa:	90 70       	andi	r25, 0x00	; 0
     1ac:	00 97       	sbiw	r24, 0x00	; 0
     1ae:	31 f4       	brne	.+12     	; 0x1bc <UART_u8SendStringSynch+0x62>
     1b0:	89 81       	ldd	r24, Y+1	; 0x01
     1b2:	9a 81       	ldd	r25, Y+2	; 0x02
     1b4:	2c e9       	ldi	r18, 0x9C	; 156
     1b6:	80 34       	cpi	r24, 0x40	; 64
     1b8:	92 07       	cpc	r25, r18
     1ba:	48 f3       	brcs	.-46     	; 0x18e <UART_u8SendStringSynch+0x34>
			{
				Local_u16Timeout++;
			}

			if (Local_u16Timeout != UART_u16_FAULT_TIMEOUT)
     1bc:	89 81       	ldd	r24, Y+1	; 0x01
     1be:	9a 81       	ldd	r25, Y+2	; 0x02
     1c0:	2c e9       	ldi	r18, 0x9C	; 156
     1c2:	80 34       	cpi	r24, 0x40	; 64
     1c4:	92 07       	cpc	r25, r18
     1c6:	31 f0       	breq	.+12     	; 0x1d4 <UART_u8SendStringSynch+0x7a>
				Copy_u8Data++;
     1c8:	8c 81       	ldd	r24, Y+4	; 0x04
     1ca:	9d 81       	ldd	r25, Y+5	; 0x05
     1cc:	01 96       	adiw	r24, 0x01	; 1
     1ce:	9d 83       	std	Y+5, r25	; 0x05
     1d0:	8c 83       	std	Y+4, r24	; 0x04
     1d2:	03 c0       	rjmp	.+6      	; 0x1da <UART_u8SendStringSynch+0x80>
			else
			{
				Local_u8Error = ERROR_NOK;
     1d4:	81 e0       	ldi	r24, 0x01	; 1
     1d6:	8b 83       	std	Y+3, r24	; 0x03
     1d8:	08 c0       	rjmp	.+16     	; 0x1ea <UART_u8SendStringSynch+0x90>
	uint8_t Local_u8Error = ERROR_OK;
	uint16_t Local_u16Timeout = 0;

	if (Copy_u8Data != NULL)
	{
		while (*Copy_u8Data != '\0')
     1da:	ec 81       	ldd	r30, Y+4	; 0x04
     1dc:	fd 81       	ldd	r31, Y+5	; 0x05
     1de:	80 81       	ld	r24, Z
     1e0:	88 23       	and	r24, r24
     1e2:	61 f6       	brne	.-104    	; 0x17c <UART_u8SendStringSynch+0x22>
     1e4:	02 c0       	rjmp	.+4      	; 0x1ea <UART_u8SendStringSynch+0x90>
			}
		}
	}
	else
	{
		Local_u8Error = ERROR_NOK;
     1e6:	81 e0       	ldi	r24, 0x01	; 1
     1e8:	8b 83       	std	Y+3, r24	; 0x03
	}

	/*Function return*/
	return Local_u8Error;
     1ea:	8b 81       	ldd	r24, Y+3	; 0x03
}
     1ec:	0f 90       	pop	r0
     1ee:	0f 90       	pop	r0
     1f0:	0f 90       	pop	r0
     1f2:	0f 90       	pop	r0
     1f4:	0f 90       	pop	r0
     1f6:	cf 91       	pop	r28
     1f8:	df 91       	pop	r29
     1fa:	08 95       	ret

000001fc <UART_u8SendStringAsynch>:
 * Inputs: pointer to array of characters and the callback function to notify the upper layer
 *         that the complete message is successfully sent
 * Output: the Error state of the function
 */
uint8_t UART_u8SendStringAsynch ( uint8_t* Copy_u8Data,void (*Callback)(void))
{
     1fc:	df 93       	push	r29
     1fe:	cf 93       	push	r28
     200:	00 d0       	rcall	.+0      	; 0x202 <UART_u8SendStringAsynch+0x6>
     202:	00 d0       	rcall	.+0      	; 0x204 <UART_u8SendStringAsynch+0x8>
     204:	0f 92       	push	r0
     206:	cd b7       	in	r28, 0x3d	; 61
     208:	de b7       	in	r29, 0x3e	; 62
     20a:	9b 83       	std	Y+3, r25	; 0x03
     20c:	8a 83       	std	Y+2, r24	; 0x02
     20e:	7d 83       	std	Y+5, r23	; 0x05
     210:	6c 83       	std	Y+4, r22	; 0x04
	/*Local Variable holding the error state*/
	uint8_t Local_u8Error = ERROR_OK;
     212:	19 82       	std	Y+1, r1	; 0x01

	if (Copy_u8Data != NULL && Callback != NULL)
     214:	8a 81       	ldd	r24, Y+2	; 0x02
     216:	9b 81       	ldd	r25, Y+3	; 0x03
     218:	00 97       	sbiw	r24, 0x00	; 0
     21a:	d1 f0       	breq	.+52     	; 0x250 <UART_u8SendStringAsynch+0x54>
     21c:	8c 81       	ldd	r24, Y+4	; 0x04
     21e:	9d 81       	ldd	r25, Y+5	; 0x05
     220:	00 97       	sbiw	r24, 0x00	; 0
     222:	b1 f0       	breq	.+44     	; 0x250 <UART_u8SendStringAsynch+0x54>
	{
		UART_u8Index = 0;
     224:	10 92 75 01 	sts	0x0175, r1

		/*Enabling Data Register Empty interrupt */
		SET_BIT(UART_UCSRB,UDRIE);
     228:	aa e2       	ldi	r26, 0x2A	; 42
     22a:	b0 e0       	ldi	r27, 0x00	; 0
     22c:	ea e2       	ldi	r30, 0x2A	; 42
     22e:	f0 e0       	ldi	r31, 0x00	; 0
     230:	80 81       	ld	r24, Z
     232:	80 62       	ori	r24, 0x20	; 32
     234:	8c 93       	st	X, r24

		UART_pu8TransmittedString = Copy_u8Data;
     236:	8a 81       	ldd	r24, Y+2	; 0x02
     238:	9b 81       	ldd	r25, Y+3	; 0x03
     23a:	90 93 71 01 	sts	0x0171, r25
     23e:	80 93 70 01 	sts	0x0170, r24

		/* Linking the driver pointer to function to the passed callback function */
		PtrASychCallback = Callback;
     242:	8c 81       	ldd	r24, Y+4	; 0x04
     244:	9d 81       	ldd	r25, Y+5	; 0x05
     246:	90 93 6f 01 	sts	0x016F, r25
     24a:	80 93 6e 01 	sts	0x016E, r24
     24e:	02 c0       	rjmp	.+4      	; 0x254 <UART_u8SendStringAsynch+0x58>
	}
	else
	{
		Local_u8Error = ERROR_NOK;
     250:	81 e0       	ldi	r24, 0x01	; 1
     252:	89 83       	std	Y+1, r24	; 0x01
	}

	/*Function return*/
	return Local_u8Error;
     254:	89 81       	ldd	r24, Y+1	; 0x01
}
     256:	0f 90       	pop	r0
     258:	0f 90       	pop	r0
     25a:	0f 90       	pop	r0
     25c:	0f 90       	pop	r0
     25e:	0f 90       	pop	r0
     260:	cf 91       	pop	r28
     262:	df 91       	pop	r29
     264:	08 95       	ret

00000266 <UART_u8ReceiveChar>:
 * Description: Function to receive a single character by UART through RXD pin (PD1)
 * Inputs: pointer to the variable that will hold the received character
 * Output: the Error state of the function
 */
uint8_t UART_u8ReceiveChar (uint8_t *Copy_u8Char)
{
     266:	df 93       	push	r29
     268:	cf 93       	push	r28
     26a:	00 d0       	rcall	.+0      	; 0x26c <UART_u8ReceiveChar+0x6>
     26c:	00 d0       	rcall	.+0      	; 0x26e <UART_u8ReceiveChar+0x8>
     26e:	0f 92       	push	r0
     270:	cd b7       	in	r28, 0x3d	; 61
     272:	de b7       	in	r29, 0x3e	; 62
     274:	9d 83       	std	Y+5, r25	; 0x05
     276:	8c 83       	std	Y+4, r24	; 0x04
	/*Local Variable holding the error state*/
	uint8_t Local_u8Error = ERROR_OK;
     278:	1b 82       	std	Y+3, r1	; 0x03
	uint16_t Local_u16Timeout = 0;
     27a:	1a 82       	std	Y+2, r1	; 0x02
     27c:	19 82       	std	Y+1, r1	; 0x01

	if (Copy_u8Char != NULL)
     27e:	8c 81       	ldd	r24, Y+4	; 0x04
     280:	9d 81       	ldd	r25, Y+5	; 0x05
     282:	00 97       	sbiw	r24, 0x00	; 0
     284:	09 f1       	breq	.+66     	; 0x2c8 <UART_u8ReceiveChar+0x62>
     286:	05 c0       	rjmp	.+10     	; 0x292 <UART_u8ReceiveChar+0x2c>
	{
		/* Wait for empty receive buffer and checking that the timeout var doesn't exceed
		 * the fault timeout */
		while (GET_BIT(UART_UCSRA,RXC) == 0 && Local_u16Timeout < UART_u16_FAULT_TIMEOUT)
		{
			Local_u16Timeout++;
     288:	89 81       	ldd	r24, Y+1	; 0x01
     28a:	9a 81       	ldd	r25, Y+2	; 0x02
     28c:	01 96       	adiw	r24, 0x01	; 1
     28e:	9a 83       	std	Y+2, r25	; 0x02
     290:	89 83       	std	Y+1, r24	; 0x01

	if (Copy_u8Char != NULL)
	{
		/* Wait for empty receive buffer and checking that the timeout var doesn't exceed
		 * the fault timeout */
		while (GET_BIT(UART_UCSRA,RXC) == 0 && Local_u16Timeout < UART_u16_FAULT_TIMEOUT)
     292:	eb e2       	ldi	r30, 0x2B	; 43
     294:	f0 e0       	ldi	r31, 0x00	; 0
     296:	80 81       	ld	r24, Z
     298:	88 23       	and	r24, r24
     29a:	34 f0       	brlt	.+12     	; 0x2a8 <UART_u8ReceiveChar+0x42>
     29c:	89 81       	ldd	r24, Y+1	; 0x01
     29e:	9a 81       	ldd	r25, Y+2	; 0x02
     2a0:	2c e9       	ldi	r18, 0x9C	; 156
     2a2:	80 34       	cpi	r24, 0x40	; 64
     2a4:	92 07       	cpc	r25, r18
     2a6:	80 f3       	brcs	.-32     	; 0x288 <UART_u8ReceiveChar+0x22>
		{
			Local_u16Timeout++;
		}

		if (Local_u16Timeout == UART_u16_FAULT_TIMEOUT)
     2a8:	89 81       	ldd	r24, Y+1	; 0x01
     2aa:	9a 81       	ldd	r25, Y+2	; 0x02
     2ac:	2c e9       	ldi	r18, 0x9C	; 156
     2ae:	80 34       	cpi	r24, 0x40	; 64
     2b0:	92 07       	cpc	r25, r18
     2b2:	19 f4       	brne	.+6      	; 0x2ba <UART_u8ReceiveChar+0x54>
			Local_u8Error = ERROR_NOK;
     2b4:	81 e0       	ldi	r24, 0x01	; 1
     2b6:	8b 83       	std	Y+3, r24	; 0x03
     2b8:	09 c0       	rjmp	.+18     	; 0x2cc <UART_u8ReceiveChar+0x66>
		else
			/* Get and return received data from buffer */
			*Copy_u8Char = UART_UDR;
     2ba:	ec e2       	ldi	r30, 0x2C	; 44
     2bc:	f0 e0       	ldi	r31, 0x00	; 0
     2be:	80 81       	ld	r24, Z
     2c0:	ec 81       	ldd	r30, Y+4	; 0x04
     2c2:	fd 81       	ldd	r31, Y+5	; 0x05
     2c4:	80 83       	st	Z, r24
     2c6:	02 c0       	rjmp	.+4      	; 0x2cc <UART_u8ReceiveChar+0x66>

	}
	else
	{
		Local_u8Error = ERROR_NOK;
     2c8:	81 e0       	ldi	r24, 0x01	; 1
     2ca:	8b 83       	std	Y+3, r24	; 0x03
	}

	/*Function return*/
	return Local_u8Error;
     2cc:	8b 81       	ldd	r24, Y+3	; 0x03
}
     2ce:	0f 90       	pop	r0
     2d0:	0f 90       	pop	r0
     2d2:	0f 90       	pop	r0
     2d4:	0f 90       	pop	r0
     2d6:	0f 90       	pop	r0
     2d8:	cf 91       	pop	r28
     2da:	df 91       	pop	r29
     2dc:	08 95       	ret

000002de <UART_u8ReceiveStringSynch>:
 * Description: Synchronous Function to receive string by UART through RXD pin (PD1)
 * Inputs: a pointer to array of character which will hold the received string and the message Size
 * Output: the Error state of the function
 */
uint8_t UART_u8ReceiveStringSynch (uint8_t* Copy_u8ReceivedData,uint8_t Copy_u8MessageLength)
{
     2de:	df 93       	push	r29
     2e0:	cf 93       	push	r28
     2e2:	cd b7       	in	r28, 0x3d	; 61
     2e4:	de b7       	in	r29, 0x3e	; 62
     2e6:	27 97       	sbiw	r28, 0x07	; 7
     2e8:	0f b6       	in	r0, 0x3f	; 63
     2ea:	f8 94       	cli
     2ec:	de bf       	out	0x3e, r29	; 62
     2ee:	0f be       	out	0x3f, r0	; 63
     2f0:	cd bf       	out	0x3d, r28	; 61
     2f2:	9e 83       	std	Y+6, r25	; 0x06
     2f4:	8d 83       	std	Y+5, r24	; 0x05
     2f6:	6f 83       	std	Y+7, r22	; 0x07
	/*Local Variable holding the error state*/
	uint8_t Local_u8Error = ERROR_OK;
     2f8:	1c 82       	std	Y+4, r1	; 0x04
	uint8_t Local_u8LoopIndex;
	uint16_t Local_u16Timeout = 0;
     2fa:	1a 82       	std	Y+2, r1	; 0x02
     2fc:	19 82       	std	Y+1, r1	; 0x01

	if (Copy_u8ReceivedData != NULL)
     2fe:	8d 81       	ldd	r24, Y+5	; 0x05
     300:	9e 81       	ldd	r25, Y+6	; 0x06
     302:	00 97       	sbiw	r24, 0x00	; 0
     304:	81 f1       	breq	.+96     	; 0x366 <UART_u8ReceiveStringSynch+0x88>
	{
		for (Local_u8LoopIndex = 0 ; Local_u8LoopIndex < Copy_u8MessageLength;Local_u8LoopIndex++)
     306:	1b 82       	std	Y+3, r1	; 0x03
     308:	29 c0       	rjmp	.+82     	; 0x35c <UART_u8ReceiveStringSynch+0x7e>
		{
			/* Wait for data to be received and checking that the timeout variable doesn't exceed
			 * the fault timeout */
			while (GET_BIT(UART_UCSRA,RXC) == 0 && Local_u16Timeout < UART_u16_FAULT_TIMEOUT)
			{
				Local_u16Timeout++;
     30a:	89 81       	ldd	r24, Y+1	; 0x01
     30c:	9a 81       	ldd	r25, Y+2	; 0x02
     30e:	01 96       	adiw	r24, 0x01	; 1
     310:	9a 83       	std	Y+2, r25	; 0x02
     312:	89 83       	std	Y+1, r24	; 0x01
	{
		for (Local_u8LoopIndex = 0 ; Local_u8LoopIndex < Copy_u8MessageLength;Local_u8LoopIndex++)
		{
			/* Wait for data to be received and checking that the timeout variable doesn't exceed
			 * the fault timeout */
			while (GET_BIT(UART_UCSRA,RXC) == 0 && Local_u16Timeout < UART_u16_FAULT_TIMEOUT)
     314:	eb e2       	ldi	r30, 0x2B	; 43
     316:	f0 e0       	ldi	r31, 0x00	; 0
     318:	80 81       	ld	r24, Z
     31a:	88 23       	and	r24, r24
     31c:	34 f0       	brlt	.+12     	; 0x32a <UART_u8ReceiveStringSynch+0x4c>
     31e:	89 81       	ldd	r24, Y+1	; 0x01
     320:	9a 81       	ldd	r25, Y+2	; 0x02
     322:	2c e9       	ldi	r18, 0x9C	; 156
     324:	80 34       	cpi	r24, 0x40	; 64
     326:	92 07       	cpc	r25, r18
     328:	80 f3       	brcs	.-32     	; 0x30a <UART_u8ReceiveStringSynch+0x2c>
			{
				Local_u16Timeout++;
			}

			if (Local_u16Timeout != UART_u16_FAULT_TIMEOUT)
     32a:	89 81       	ldd	r24, Y+1	; 0x01
     32c:	9a 81       	ldd	r25, Y+2	; 0x02
     32e:	2c e9       	ldi	r18, 0x9C	; 156
     330:	80 34       	cpi	r24, 0x40	; 64
     332:	92 07       	cpc	r25, r18
     334:	81 f0       	breq	.+32     	; 0x356 <UART_u8ReceiveStringSynch+0x78>
				/* Get and return received data from buffer */
				Copy_u8ReceivedData[Local_u8LoopIndex] = UART_UDR;
     336:	8b 81       	ldd	r24, Y+3	; 0x03
     338:	28 2f       	mov	r18, r24
     33a:	30 e0       	ldi	r19, 0x00	; 0
     33c:	8d 81       	ldd	r24, Y+5	; 0x05
     33e:	9e 81       	ldd	r25, Y+6	; 0x06
     340:	dc 01       	movw	r26, r24
     342:	a2 0f       	add	r26, r18
     344:	b3 1f       	adc	r27, r19
     346:	ec e2       	ldi	r30, 0x2C	; 44
     348:	f0 e0       	ldi	r31, 0x00	; 0
     34a:	80 81       	ld	r24, Z
     34c:	8c 93       	st	X, r24
	uint8_t Local_u8LoopIndex;
	uint16_t Local_u16Timeout = 0;

	if (Copy_u8ReceivedData != NULL)
	{
		for (Local_u8LoopIndex = 0 ; Local_u8LoopIndex < Copy_u8MessageLength;Local_u8LoopIndex++)
     34e:	8b 81       	ldd	r24, Y+3	; 0x03
     350:	8f 5f       	subi	r24, 0xFF	; 255
     352:	8b 83       	std	Y+3, r24	; 0x03
     354:	03 c0       	rjmp	.+6      	; 0x35c <UART_u8ReceiveStringSynch+0x7e>
			if (Local_u16Timeout != UART_u16_FAULT_TIMEOUT)
				/* Get and return received data from buffer */
				Copy_u8ReceivedData[Local_u8LoopIndex] = UART_UDR;
			else
			{
				Local_u8Error = ERROR_NOK;
     356:	81 e0       	ldi	r24, 0x01	; 1
     358:	8c 83       	std	Y+4, r24	; 0x04
     35a:	07 c0       	rjmp	.+14     	; 0x36a <UART_u8ReceiveStringSynch+0x8c>
	uint8_t Local_u8LoopIndex;
	uint16_t Local_u16Timeout = 0;

	if (Copy_u8ReceivedData != NULL)
	{
		for (Local_u8LoopIndex = 0 ; Local_u8LoopIndex < Copy_u8MessageLength;Local_u8LoopIndex++)
     35c:	9b 81       	ldd	r25, Y+3	; 0x03
     35e:	8f 81       	ldd	r24, Y+7	; 0x07
     360:	98 17       	cp	r25, r24
     362:	c0 f2       	brcs	.-80     	; 0x314 <UART_u8ReceiveStringSynch+0x36>
     364:	02 c0       	rjmp	.+4      	; 0x36a <UART_u8ReceiveStringSynch+0x8c>
			}
		}
	}
	else
	{
		Local_u8Error = ERROR_NOK;
     366:	81 e0       	ldi	r24, 0x01	; 1
     368:	8c 83       	std	Y+4, r24	; 0x04
	}

	/*Function return*/
	return Local_u8Error;
     36a:	8c 81       	ldd	r24, Y+4	; 0x04
}
     36c:	27 96       	adiw	r28, 0x07	; 7
     36e:	0f b6       	in	r0, 0x3f	; 63
     370:	f8 94       	cli
     372:	de bf       	out	0x3e, r29	; 62
     374:	0f be       	out	0x3f, r0	; 63
     376:	cd bf       	out	0x3d, r28	; 61
     378:	cf 91       	pop	r28
     37a:	df 91       	pop	r29
     37c:	08 95       	ret

0000037e <UART_u8ReceiveStringAsynch>:
 * Inputs: a pointer to array of character which will hold the received string + the message Size
 *         + the callback function to notify the upper layer that the complete message is successfully sent
 * Output: the Error state of the function
 */
uint8_t UART_u8ReceiveStringAsynch (uint8_t* Copy_u8ReceivedData,uint8_t Copy_u8MessageLength,void (*Callback)(void))
{
     37e:	df 93       	push	r29
     380:	cf 93       	push	r28
     382:	00 d0       	rcall	.+0      	; 0x384 <UART_u8ReceiveStringAsynch+0x6>
     384:	00 d0       	rcall	.+0      	; 0x386 <UART_u8ReceiveStringAsynch+0x8>
     386:	00 d0       	rcall	.+0      	; 0x388 <UART_u8ReceiveStringAsynch+0xa>
     388:	cd b7       	in	r28, 0x3d	; 61
     38a:	de b7       	in	r29, 0x3e	; 62
     38c:	9b 83       	std	Y+3, r25	; 0x03
     38e:	8a 83       	std	Y+2, r24	; 0x02
     390:	6c 83       	std	Y+4, r22	; 0x04
     392:	5e 83       	std	Y+6, r21	; 0x06
     394:	4d 83       	std	Y+5, r20	; 0x05
	/*Local Variable holding the error state*/
	uint8_t Local_u8Error = ERROR_OK;
     396:	19 82       	std	Y+1, r1	; 0x01


	if (Copy_u8ReceivedData != NULL && Callback != NULL)
     398:	8a 81       	ldd	r24, Y+2	; 0x02
     39a:	9b 81       	ldd	r25, Y+3	; 0x03
     39c:	00 97       	sbiw	r24, 0x00	; 0
     39e:	e9 f0       	breq	.+58     	; 0x3da <UART_u8ReceiveStringAsynch+0x5c>
     3a0:	8d 81       	ldd	r24, Y+5	; 0x05
     3a2:	9e 81       	ldd	r25, Y+6	; 0x06
     3a4:	00 97       	sbiw	r24, 0x00	; 0
     3a6:	c9 f0       	breq	.+50     	; 0x3da <UART_u8ReceiveStringAsynch+0x5c>
	{
		UART_u8Index = 0;
     3a8:	10 92 75 01 	sts	0x0175, r1
		UART_pu8ReceivedString = Copy_u8ReceivedData;
     3ac:	8a 81       	ldd	r24, Y+2	; 0x02
     3ae:	9b 81       	ldd	r25, Y+3	; 0x03
     3b0:	90 93 73 01 	sts	0x0173, r25
     3b4:	80 93 72 01 	sts	0x0172, r24
		UART_u8ReceivedMsgSize = Copy_u8MessageLength;
     3b8:	8c 81       	ldd	r24, Y+4	; 0x04
     3ba:	80 93 74 01 	sts	0x0174, r24

		/* Linking the driver pointer to function to the passed callback function */
		PtrASychCallback = Callback;
     3be:	8d 81       	ldd	r24, Y+5	; 0x05
     3c0:	9e 81       	ldd	r25, Y+6	; 0x06
     3c2:	90 93 6f 01 	sts	0x016F, r25
     3c6:	80 93 6e 01 	sts	0x016E, r24

		/*Enabling Data Register Empty interrupt */
		SET_BIT(UART_UCSRB,UDRIE);
     3ca:	aa e2       	ldi	r26, 0x2A	; 42
     3cc:	b0 e0       	ldi	r27, 0x00	; 0
     3ce:	ea e2       	ldi	r30, 0x2A	; 42
     3d0:	f0 e0       	ldi	r31, 0x00	; 0
     3d2:	80 81       	ld	r24, Z
     3d4:	80 62       	ori	r24, 0x20	; 32
     3d6:	8c 93       	st	X, r24
     3d8:	02 c0       	rjmp	.+4      	; 0x3de <UART_u8ReceiveStringAsynch+0x60>
	}
	else
	{
		Local_u8Error = ERROR_NOK;
     3da:	81 e0       	ldi	r24, 0x01	; 1
     3dc:	89 83       	std	Y+1, r24	; 0x01
	}

	/*Function return*/
	return Local_u8Error;
     3de:	89 81       	ldd	r24, Y+1	; 0x01
}
     3e0:	26 96       	adiw	r28, 0x06	; 6
     3e2:	0f b6       	in	r0, 0x3f	; 63
     3e4:	f8 94       	cli
     3e6:	de bf       	out	0x3e, r29	; 62
     3e8:	0f be       	out	0x3f, r0	; 63
     3ea:	cd bf       	out	0x3d, r28	; 61
     3ec:	cf 91       	pop	r28
     3ee:	df 91       	pop	r29
     3f0:	08 95       	ret

000003f2 <__vector_13>:
/************************************************************/
/*      ISRs of UART interrupts                             */
/************************************************************/
/*The ISR of USART, Rx Complete interrupt*/
void __vector_13 (void)
{
     3f2:	1f 92       	push	r1
     3f4:	0f 92       	push	r0
     3f6:	0f b6       	in	r0, 0x3f	; 63
     3f8:	0f 92       	push	r0
     3fa:	11 24       	eor	r1, r1
     3fc:	2f 93       	push	r18
     3fe:	3f 93       	push	r19
     400:	4f 93       	push	r20
     402:	5f 93       	push	r21
     404:	6f 93       	push	r22
     406:	7f 93       	push	r23
     408:	8f 93       	push	r24
     40a:	9f 93       	push	r25
     40c:	af 93       	push	r26
     40e:	bf 93       	push	r27
     410:	ef 93       	push	r30
     412:	ff 93       	push	r31
     414:	df 93       	push	r29
     416:	cf 93       	push	r28
     418:	cd b7       	in	r28, 0x3d	; 61
     41a:	de b7       	in	r29, 0x3e	; 62
	/* Put data into buffer, sends the data */
	UART_pu8ReceivedString[UART_u8Index] = UART_UDR;
     41c:	20 91 72 01 	lds	r18, 0x0172
     420:	30 91 73 01 	lds	r19, 0x0173
     424:	80 91 75 01 	lds	r24, 0x0175
     428:	88 2f       	mov	r24, r24
     42a:	90 e0       	ldi	r25, 0x00	; 0
     42c:	d9 01       	movw	r26, r18
     42e:	a8 0f       	add	r26, r24
     430:	b9 1f       	adc	r27, r25
     432:	ec e2       	ldi	r30, 0x2C	; 44
     434:	f0 e0       	ldi	r31, 0x00	; 0
     436:	80 81       	ld	r24, Z
     438:	8c 93       	st	X, r24

	UART_u8Index++;
     43a:	80 91 75 01 	lds	r24, 0x0175
     43e:	8f 5f       	subi	r24, 0xFF	; 255
     440:	80 93 75 01 	sts	0x0175, r24

	if (UART_u8Index == UART_u8ReceivedMsgSize)
     444:	90 91 75 01 	lds	r25, 0x0175
     448:	80 91 74 01 	lds	r24, 0x0174
     44c:	98 17       	cp	r25, r24
     44e:	71 f4       	brne	.+28     	; 0x46c <__vector_13+0x7a>
	{
		UART_u8Index = 0;
     450:	10 92 75 01 	sts	0x0175, r1
		CLR_BIT(UART_UCSRB,RXCIE);
     454:	aa e2       	ldi	r26, 0x2A	; 42
     456:	b0 e0       	ldi	r27, 0x00	; 0
     458:	ea e2       	ldi	r30, 0x2A	; 42
     45a:	f0 e0       	ldi	r31, 0x00	; 0
     45c:	80 81       	ld	r24, Z
     45e:	8f 77       	andi	r24, 0x7F	; 127
     460:	8c 93       	st	X, r24
		PtrASychCallback();
     462:	e0 91 6e 01 	lds	r30, 0x016E
     466:	f0 91 6f 01 	lds	r31, 0x016F
     46a:	09 95       	icall
	}
}
     46c:	cf 91       	pop	r28
     46e:	df 91       	pop	r29
     470:	ff 91       	pop	r31
     472:	ef 91       	pop	r30
     474:	bf 91       	pop	r27
     476:	af 91       	pop	r26
     478:	9f 91       	pop	r25
     47a:	8f 91       	pop	r24
     47c:	7f 91       	pop	r23
     47e:	6f 91       	pop	r22
     480:	5f 91       	pop	r21
     482:	4f 91       	pop	r20
     484:	3f 91       	pop	r19
     486:	2f 91       	pop	r18
     488:	0f 90       	pop	r0
     48a:	0f be       	out	0x3f, r0	; 63
     48c:	0f 90       	pop	r0
     48e:	1f 90       	pop	r1
     490:	18 95       	reti

00000492 <__vector_14>:

/*The ISR of USART Data Register Empty interrupt*/
void __vector_14 (void)
{
     492:	1f 92       	push	r1
     494:	0f 92       	push	r0
     496:	0f b6       	in	r0, 0x3f	; 63
     498:	0f 92       	push	r0
     49a:	11 24       	eor	r1, r1
     49c:	2f 93       	push	r18
     49e:	3f 93       	push	r19
     4a0:	4f 93       	push	r20
     4a2:	5f 93       	push	r21
     4a4:	6f 93       	push	r22
     4a6:	7f 93       	push	r23
     4a8:	8f 93       	push	r24
     4aa:	9f 93       	push	r25
     4ac:	af 93       	push	r26
     4ae:	bf 93       	push	r27
     4b0:	ef 93       	push	r30
     4b2:	ff 93       	push	r31
     4b4:	df 93       	push	r29
     4b6:	cf 93       	push	r28
     4b8:	cd b7       	in	r28, 0x3d	; 61
     4ba:	de b7       	in	r29, 0x3e	; 62
	if (UART_pu8TransmittedString[UART_u8Index] != '\0')
     4bc:	20 91 70 01 	lds	r18, 0x0170
     4c0:	30 91 71 01 	lds	r19, 0x0171
     4c4:	80 91 75 01 	lds	r24, 0x0175
     4c8:	88 2f       	mov	r24, r24
     4ca:	90 e0       	ldi	r25, 0x00	; 0
     4cc:	f9 01       	movw	r30, r18
     4ce:	e8 0f       	add	r30, r24
     4d0:	f9 1f       	adc	r31, r25
     4d2:	80 81       	ld	r24, Z
     4d4:	88 23       	and	r24, r24
     4d6:	81 f0       	breq	.+32     	; 0x4f8 <__vector_14+0x66>
		/* Put data into buffer, sends the data */
		UART_UDR = UART_pu8TransmittedString[UART_u8Index];
     4d8:	ac e2       	ldi	r26, 0x2C	; 44
     4da:	b0 e0       	ldi	r27, 0x00	; 0
     4dc:	20 91 70 01 	lds	r18, 0x0170
     4e0:	30 91 71 01 	lds	r19, 0x0171
     4e4:	80 91 75 01 	lds	r24, 0x0175
     4e8:	88 2f       	mov	r24, r24
     4ea:	90 e0       	ldi	r25, 0x00	; 0
     4ec:	f9 01       	movw	r30, r18
     4ee:	e8 0f       	add	r30, r24
     4f0:	f9 1f       	adc	r31, r25
     4f2:	80 81       	ld	r24, Z
     4f4:	8c 93       	st	X, r24
     4f6:	0e c0       	rjmp	.+28     	; 0x514 <__vector_14+0x82>
	else
	{
		UART_u8Index = 0;
     4f8:	10 92 75 01 	sts	0x0175, r1
		PtrASychCallback();
     4fc:	e0 91 6e 01 	lds	r30, 0x016E
     500:	f0 91 6f 01 	lds	r31, 0x016F
     504:	09 95       	icall
		CLR_BIT(UART_UCSRB,UDRIE);
     506:	aa e2       	ldi	r26, 0x2A	; 42
     508:	b0 e0       	ldi	r27, 0x00	; 0
     50a:	ea e2       	ldi	r30, 0x2A	; 42
     50c:	f0 e0       	ldi	r31, 0x00	; 0
     50e:	80 81       	ld	r24, Z
     510:	8f 7d       	andi	r24, 0xDF	; 223
     512:	8c 93       	st	X, r24
	}

	UART_u8Index++;
     514:	80 91 75 01 	lds	r24, 0x0175
     518:	8f 5f       	subi	r24, 0xFF	; 255
     51a:	80 93 75 01 	sts	0x0175, r24

	return;
}
     51e:	cf 91       	pop	r28
     520:	df 91       	pop	r29
     522:	ff 91       	pop	r31
     524:	ef 91       	pop	r30
     526:	bf 91       	pop	r27
     528:	af 91       	pop	r26
     52a:	9f 91       	pop	r25
     52c:	8f 91       	pop	r24
     52e:	7f 91       	pop	r23
     530:	6f 91       	pop	r22
     532:	5f 91       	pop	r21
     534:	4f 91       	pop	r20
     536:	3f 91       	pop	r19
     538:	2f 91       	pop	r18
     53a:	0f 90       	pop	r0
     53c:	0f be       	out	0x3f, r0	; 63
     53e:	0f 90       	pop	r0
     540:	1f 90       	pop	r1
     542:	18 95       	reti

00000544 <__vector_15>:

/*The ISR of USART, Tx Complete interrupt*/
void __vector_15 (void)
{
     544:	1f 92       	push	r1
     546:	0f 92       	push	r0
     548:	0f b6       	in	r0, 0x3f	; 63
     54a:	0f 92       	push	r0
     54c:	11 24       	eor	r1, r1
     54e:	df 93       	push	r29
     550:	cf 93       	push	r28
     552:	cd b7       	in	r28, 0x3d	; 61
     554:	de b7       	in	r29, 0x3e	; 62
	return;
}
     556:	cf 91       	pop	r28
     558:	df 91       	pop	r29
     55a:	0f 90       	pop	r0
     55c:	0f be       	out	0x3f, r0	; 63
     55e:	0f 90       	pop	r0
     560:	1f 90       	pop	r1
     562:	18 95       	reti

00000564 <SPI_vInit>:
 * Description: Function to initialize the SPI peripheral
 * Inputs: none
 * Output: void
 */
void SPI_vInit (void)
{
     564:	df 93       	push	r29
     566:	cf 93       	push	r28
     568:	cd b7       	in	r28, 0x3d	; 61
     56a:	de b7       	in	r29, 0x3e	; 62
	if (SPI_u8_SELECTROLE == SPI_u8_MASTER)
	{
		SET_BIT(SPI_SPCR,MSTR);
     56c:	ad e2       	ldi	r26, 0x2D	; 45
     56e:	b0 e0       	ldi	r27, 0x00	; 0
     570:	ed e2       	ldi	r30, 0x2D	; 45
     572:	f0 e0       	ldi	r31, 0x00	; 0
     574:	80 81       	ld	r24, Z
     576:	80 61       	ori	r24, 0x10	; 16
     578:	8c 93       	st	X, r24
	if (SPI_u8_CLKPHASE == SPI_u8_SETUP)
	{
		SET_BIT(SPI_SPCR,CPHA);
	}

	SPI_SPCR |= SPI_u8_SPRBITS;
     57a:	ad e2       	ldi	r26, 0x2D	; 45
     57c:	b0 e0       	ldi	r27, 0x00	; 0
     57e:	ed e2       	ldi	r30, 0x2D	; 45
     580:	f0 e0       	ldi	r31, 0x00	; 0
     582:	80 81       	ld	r24, Z
     584:	81 60       	ori	r24, 0x01	; 1
     586:	8c 93       	st	X, r24

	  //if Double SPI Speed is selected
	if (SPI_u8_CLKRATE > 3)
		SET_BIT(SPI_SPSR,SPI2X);

	SET_BIT(SPI_SPCR,SPE);
     588:	ad e2       	ldi	r26, 0x2D	; 45
     58a:	b0 e0       	ldi	r27, 0x00	; 0
     58c:	ed e2       	ldi	r30, 0x2D	; 45
     58e:	f0 e0       	ldi	r31, 0x00	; 0
     590:	80 81       	ld	r24, Z
     592:	80 64       	ori	r24, 0x40	; 64
     594:	8c 93       	st	X, r24
	return;
}
     596:	cf 91       	pop	r28
     598:	df 91       	pop	r29
     59a:	08 95       	ret

0000059c <SPI_u8ReceiveByte_Synch>:
/*
 * Description: Synchronous Function to send and receive a byte using polling mechanism
 * Inputs: the byte needed to be sent and a pointer to received byte
 * Output: the Error state of the function
 */
uint8_t SPI_u8ReceiveByte_Synch(uint8_t *Copy_pu8RecByte) {
     59c:	df 93       	push	r29
     59e:	cf 93       	push	r28
     5a0:	00 d0       	rcall	.+0      	; 0x5a2 <SPI_u8ReceiveByte_Synch+0x6>
     5a2:	00 d0       	rcall	.+0      	; 0x5a4 <SPI_u8ReceiveByte_Synch+0x8>
     5a4:	00 d0       	rcall	.+0      	; 0x5a6 <SPI_u8ReceiveByte_Synch+0xa>
     5a6:	cd b7       	in	r28, 0x3d	; 61
     5a8:	de b7       	in	r29, 0x3e	; 62
     5aa:	9d 83       	std	Y+5, r25	; 0x05
     5ac:	8c 83       	std	Y+4, r24	; 0x04
    /* Local Variable holding the error state */
    uint8_t Local_u8Error = ERROR_NOK;
     5ae:	81 e0       	ldi	r24, 0x01	; 1
     5b0:	8b 83       	std	Y+3, r24	; 0x03
    uint16_t Local_u16Timeout = 0;
     5b2:	1a 82       	std	Y+2, r1	; 0x02
     5b4:	19 82       	std	Y+1, r1	; 0x01

    /* Check if the receive buffer pointer is valid */
    if (Copy_pu8RecByte != NULL) {
     5b6:	8c 81       	ldd	r24, Y+4	; 0x04
     5b8:	9d 81       	ldd	r25, Y+5	; 0x05
     5ba:	00 97       	sbiw	r24, 0x00	; 0
     5bc:	09 f1       	breq	.+66     	; 0x600 <SPI_u8ReceiveByte_Synch+0x64>
     5be:	05 c0       	rjmp	.+10     	; 0x5ca <SPI_u8ReceiveByte_Synch+0x2e>
        /* Wait for reception to complete */
        while (GET_BIT(SPI_SPSR, SPIF) == 0 && Local_u16Timeout < SPI_u16_FAULT_TIMEOUT) {
            Local_u16Timeout++;
     5c0:	89 81       	ldd	r24, Y+1	; 0x01
     5c2:	9a 81       	ldd	r25, Y+2	; 0x02
     5c4:	01 96       	adiw	r24, 0x01	; 1
     5c6:	9a 83       	std	Y+2, r25	; 0x02
     5c8:	89 83       	std	Y+1, r24	; 0x01
    uint16_t Local_u16Timeout = 0;

    /* Check if the receive buffer pointer is valid */
    if (Copy_pu8RecByte != NULL) {
        /* Wait for reception to complete */
        while (GET_BIT(SPI_SPSR, SPIF) == 0 && Local_u16Timeout < SPI_u16_FAULT_TIMEOUT) {
     5ca:	ee e2       	ldi	r30, 0x2E	; 46
     5cc:	f0 e0       	ldi	r31, 0x00	; 0
     5ce:	80 81       	ld	r24, Z
     5d0:	88 23       	and	r24, r24
     5d2:	34 f0       	brlt	.+12     	; 0x5e0 <SPI_u8ReceiveByte_Synch+0x44>
     5d4:	89 81       	ldd	r24, Y+1	; 0x01
     5d6:	9a 81       	ldd	r25, Y+2	; 0x02
     5d8:	23 ec       	ldi	r18, 0xC3	; 195
     5da:	80 35       	cpi	r24, 0x50	; 80
     5dc:	92 07       	cpc	r25, r18
     5de:	80 f3       	brcs	.-32     	; 0x5c0 <SPI_u8ReceiveByte_Synch+0x24>
            Local_u16Timeout++;
        }

        /* Check if the timeout occurred */
        if (Local_u16Timeout == SPI_u16_FAULT_TIMEOUT) {
     5e0:	89 81       	ldd	r24, Y+1	; 0x01
     5e2:	9a 81       	ldd	r25, Y+2	; 0x02
     5e4:	23 ec       	ldi	r18, 0xC3	; 195
     5e6:	80 35       	cpi	r24, 0x50	; 80
     5e8:	92 07       	cpc	r25, r18
     5ea:	19 f4       	brne	.+6      	; 0x5f2 <SPI_u8ReceiveByte_Synch+0x56>
            return ERROR_NOK;
     5ec:	81 e0       	ldi	r24, 0x01	; 1
     5ee:	8e 83       	std	Y+6, r24	; 0x06
     5f0:	09 c0       	rjmp	.+18     	; 0x604 <SPI_u8ReceiveByte_Synch+0x68>
        }

        /* Read the received data from SPDR */
        *Copy_pu8RecByte = SPI_SPDR;
     5f2:	ef e2       	ldi	r30, 0x2F	; 47
     5f4:	f0 e0       	ldi	r31, 0x00	; 0
     5f6:	80 81       	ld	r24, Z
     5f8:	ec 81       	ldd	r30, Y+4	; 0x04
     5fa:	fd 81       	ldd	r31, Y+5	; 0x05
     5fc:	80 83       	st	Z, r24

        /* Set the error state to OK as the reception completed successfully */
        Local_u8Error = ERROR_OK;
     5fe:	1b 82       	std	Y+3, r1	; 0x03
    }

    /* Function return */
    return Local_u8Error;
     600:	2b 81       	ldd	r18, Y+3	; 0x03
     602:	2e 83       	std	Y+6, r18	; 0x06
     604:	8e 81       	ldd	r24, Y+6	; 0x06
}
     606:	26 96       	adiw	r28, 0x06	; 6
     608:	0f b6       	in	r0, 0x3f	; 63
     60a:	f8 94       	cli
     60c:	de bf       	out	0x3e, r29	; 62
     60e:	0f be       	out	0x3f, r0	; 63
     610:	cd bf       	out	0x3d, r28	; 61
     612:	cf 91       	pop	r28
     614:	df 91       	pop	r29
     616:	08 95       	ret

00000618 <SPI_u8SendByte_Synch>:

uint8_t SPI_u8SendByte_Synch(uint8_t Copy_u8SentByte) {
     618:	df 93       	push	r29
     61a:	cf 93       	push	r28
     61c:	00 d0       	rcall	.+0      	; 0x61e <SPI_u8SendByte_Synch+0x6>
     61e:	00 d0       	rcall	.+0      	; 0x620 <SPI_u8SendByte_Synch+0x8>
     620:	0f 92       	push	r0
     622:	cd b7       	in	r28, 0x3d	; 61
     624:	de b7       	in	r29, 0x3e	; 62
     626:	8c 83       	std	Y+4, r24	; 0x04
    /* Local Variable holding the error state */
    uint8_t Local_u8Error = ERROR_NOK;
     628:	81 e0       	ldi	r24, 0x01	; 1
     62a:	8b 83       	std	Y+3, r24	; 0x03
    uint16_t Local_u16Timeout = 0;
     62c:	1a 82       	std	Y+2, r1	; 0x02
     62e:	19 82       	std	Y+1, r1	; 0x01

    /* Start the transmission by writing the data to SPDR */
    SPI_SPDR = Copy_u8SentByte;
     630:	ef e2       	ldi	r30, 0x2F	; 47
     632:	f0 e0       	ldi	r31, 0x00	; 0
     634:	8c 81       	ldd	r24, Y+4	; 0x04
     636:	80 83       	st	Z, r24
     638:	05 c0       	rjmp	.+10     	; 0x644 <SPI_u8SendByte_Synch+0x2c>

    /* Wait for the transmission to complete */
    while (GET_BIT(SPI_SPSR, SPIF) == 0 && Local_u16Timeout < SPI_u16_FAULT_TIMEOUT) {
        Local_u16Timeout++;
     63a:	89 81       	ldd	r24, Y+1	; 0x01
     63c:	9a 81       	ldd	r25, Y+2	; 0x02
     63e:	01 96       	adiw	r24, 0x01	; 1
     640:	9a 83       	std	Y+2, r25	; 0x02
     642:	89 83       	std	Y+1, r24	; 0x01

    /* Start the transmission by writing the data to SPDR */
    SPI_SPDR = Copy_u8SentByte;

    /* Wait for the transmission to complete */
    while (GET_BIT(SPI_SPSR, SPIF) == 0 && Local_u16Timeout < SPI_u16_FAULT_TIMEOUT) {
     644:	ee e2       	ldi	r30, 0x2E	; 46
     646:	f0 e0       	ldi	r31, 0x00	; 0
     648:	80 81       	ld	r24, Z
     64a:	88 23       	and	r24, r24
     64c:	34 f0       	brlt	.+12     	; 0x65a <SPI_u8SendByte_Synch+0x42>
     64e:	89 81       	ldd	r24, Y+1	; 0x01
     650:	9a 81       	ldd	r25, Y+2	; 0x02
     652:	23 ec       	ldi	r18, 0xC3	; 195
     654:	80 35       	cpi	r24, 0x50	; 80
     656:	92 07       	cpc	r25, r18
     658:	80 f3       	brcs	.-32     	; 0x63a <SPI_u8SendByte_Synch+0x22>
        Local_u16Timeout++;
    }

    /* Check if the timeout occurred */
    if (Local_u16Timeout == SPI_u16_FAULT_TIMEOUT) {
     65a:	89 81       	ldd	r24, Y+1	; 0x01
     65c:	9a 81       	ldd	r25, Y+2	; 0x02
     65e:	23 ec       	ldi	r18, 0xC3	; 195
     660:	80 35       	cpi	r24, 0x50	; 80
     662:	92 07       	cpc	r25, r18
     664:	19 f4       	brne	.+6      	; 0x66c <SPI_u8SendByte_Synch+0x54>
        return ERROR_NOK;
     666:	81 e0       	ldi	r24, 0x01	; 1
     668:	8d 83       	std	Y+5, r24	; 0x05
     66a:	03 c0       	rjmp	.+6      	; 0x672 <SPI_u8SendByte_Synch+0x5a>
    }

    /* Set the error state to OK as the transmission completed successfully */
    Local_u8Error = ERROR_OK;
     66c:	1b 82       	std	Y+3, r1	; 0x03

    /* Function return */
    return Local_u8Error;
     66e:	2b 81       	ldd	r18, Y+3	; 0x03
     670:	2d 83       	std	Y+5, r18	; 0x05
     672:	8d 81       	ldd	r24, Y+5	; 0x05
}
     674:	0f 90       	pop	r0
     676:	0f 90       	pop	r0
     678:	0f 90       	pop	r0
     67a:	0f 90       	pop	r0
     67c:	0f 90       	pop	r0
     67e:	cf 91       	pop	r28
     680:	df 91       	pop	r29
     682:	08 95       	ret

00000684 <SPI_u8SendReceiveBuffer_Asynch>:
 * 		   (3) the expected size of the transmitted and received buffer
 * 		   (4) the callback function to notify the upper layer that the complete message is successfully sent
 * Output: the Error state of the function
 */
uint8_t SPI_u8SendReceiveBuffer_Asynch (uint8_t *Copy_pu8SentBuffer,uint8_t *Copy_pu8RecBuffer,uint8_t Copy_u8NoOfBytes,void (*CallBack)(void))
{
     684:	df 93       	push	r29
     686:	cf 93       	push	r28
     688:	cd b7       	in	r28, 0x3d	; 61
     68a:	de b7       	in	r29, 0x3e	; 62
     68c:	28 97       	sbiw	r28, 0x08	; 8
     68e:	0f b6       	in	r0, 0x3f	; 63
     690:	f8 94       	cli
     692:	de bf       	out	0x3e, r29	; 62
     694:	0f be       	out	0x3f, r0	; 63
     696:	cd bf       	out	0x3d, r28	; 61
     698:	9b 83       	std	Y+3, r25	; 0x03
     69a:	8a 83       	std	Y+2, r24	; 0x02
     69c:	7d 83       	std	Y+5, r23	; 0x05
     69e:	6c 83       	std	Y+4, r22	; 0x04
     6a0:	4e 83       	std	Y+6, r20	; 0x06
     6a2:	38 87       	std	Y+8, r19	; 0x08
     6a4:	2f 83       	std	Y+7, r18	; 0x07
	/*Local Variable holding the error state*/
	uint8_t Local_u8Error = ERROR_NOK;
     6a6:	81 e0       	ldi	r24, 0x01	; 1
     6a8:	89 83       	std	Y+1, r24	; 0x01

	if (Copy_pu8SentBuffer != NULL && Copy_pu8RecBuffer != NULL && CallBack != NULL)
     6aa:	8a 81       	ldd	r24, Y+2	; 0x02
     6ac:	9b 81       	ldd	r25, Y+3	; 0x03
     6ae:	00 97       	sbiw	r24, 0x00	; 0
     6b0:	a1 f1       	breq	.+104    	; 0x71a <SPI_u8SendReceiveBuffer_Asynch+0x96>
     6b2:	8c 81       	ldd	r24, Y+4	; 0x04
     6b4:	9d 81       	ldd	r25, Y+5	; 0x05
     6b6:	00 97       	sbiw	r24, 0x00	; 0
     6b8:	81 f1       	breq	.+96     	; 0x71a <SPI_u8SendReceiveBuffer_Asynch+0x96>
     6ba:	8f 81       	ldd	r24, Y+7	; 0x07
     6bc:	98 85       	ldd	r25, Y+8	; 0x08
     6be:	00 97       	sbiw	r24, 0x00	; 0
     6c0:	61 f1       	breq	.+88     	; 0x71a <SPI_u8SendReceiveBuffer_Asynch+0x96>
	{
		Local_u8Error = ERROR_OK;
     6c2:	19 82       	std	Y+1, r1	; 0x01
		SPI_pu8TransmittedString = Copy_pu8SentBuffer;
     6c4:	8a 81       	ldd	r24, Y+2	; 0x02
     6c6:	9b 81       	ldd	r25, Y+3	; 0x03
     6c8:	90 93 79 01 	sts	0x0179, r25
     6cc:	80 93 78 01 	sts	0x0178, r24
		SPI_pu8ReceivedString = Copy_pu8RecBuffer;
     6d0:	8c 81       	ldd	r24, Y+4	; 0x04
     6d2:	9d 81       	ldd	r25, Y+5	; 0x05
     6d4:	90 93 7b 01 	sts	0x017B, r25
     6d8:	80 93 7a 01 	sts	0x017A, r24
		PtrASychCallback = CallBack;
     6dc:	8f 81       	ldd	r24, Y+7	; 0x07
     6de:	98 85       	ldd	r25, Y+8	; 0x08
     6e0:	90 93 77 01 	sts	0x0177, r25
     6e4:	80 93 76 01 	sts	0x0176, r24
		SPI_u8NoOfBytes = Copy_u8NoOfBytes;
     6e8:	8e 81       	ldd	r24, Y+6	; 0x06
     6ea:	80 93 7c 01 	sts	0x017C, r24
		SPI_SPDR = SPI_pu8TransmittedString[SPI_u8Index];
     6ee:	af e2       	ldi	r26, 0x2F	; 47
     6f0:	b0 e0       	ldi	r27, 0x00	; 0
     6f2:	20 91 78 01 	lds	r18, 0x0178
     6f6:	30 91 79 01 	lds	r19, 0x0179
     6fa:	80 91 7d 01 	lds	r24, 0x017D
     6fe:	88 2f       	mov	r24, r24
     700:	90 e0       	ldi	r25, 0x00	; 0
     702:	f9 01       	movw	r30, r18
     704:	e8 0f       	add	r30, r24
     706:	f9 1f       	adc	r31, r25
     708:	80 81       	ld	r24, Z
     70a:	8c 93       	st	X, r24
		SET_BIT(SPI_SPCR,SPIE);
     70c:	ad e2       	ldi	r26, 0x2D	; 45
     70e:	b0 e0       	ldi	r27, 0x00	; 0
     710:	ed e2       	ldi	r30, 0x2D	; 45
     712:	f0 e0       	ldi	r31, 0x00	; 0
     714:	80 81       	ld	r24, Z
     716:	80 68       	ori	r24, 0x80	; 128
     718:	8c 93       	st	X, r24
	}
	/*Function return*/
	return Local_u8Error;
     71a:	89 81       	ldd	r24, Y+1	; 0x01
}
     71c:	28 96       	adiw	r28, 0x08	; 8
     71e:	0f b6       	in	r0, 0x3f	; 63
     720:	f8 94       	cli
     722:	de bf       	out	0x3e, r29	; 62
     724:	0f be       	out	0x3f, r0	; 63
     726:	cd bf       	out	0x3d, r28	; 61
     728:	cf 91       	pop	r28
     72a:	df 91       	pop	r29
     72c:	08 95       	ret

0000072e <__vector_12>:

/* The ISR of Serial Transfer Complete */
void __vector_12 (void)
{
     72e:	1f 92       	push	r1
     730:	0f 92       	push	r0
     732:	0f b6       	in	r0, 0x3f	; 63
     734:	0f 92       	push	r0
     736:	11 24       	eor	r1, r1
     738:	2f 93       	push	r18
     73a:	3f 93       	push	r19
     73c:	4f 93       	push	r20
     73e:	5f 93       	push	r21
     740:	6f 93       	push	r22
     742:	7f 93       	push	r23
     744:	8f 93       	push	r24
     746:	9f 93       	push	r25
     748:	af 93       	push	r26
     74a:	bf 93       	push	r27
     74c:	ef 93       	push	r30
     74e:	ff 93       	push	r31
     750:	df 93       	push	r29
     752:	cf 93       	push	r28
     754:	cd b7       	in	r28, 0x3d	; 61
     756:	de b7       	in	r29, 0x3e	; 62
	SPI_pu8ReceivedString[SPI_u8Index] = SPI_SPDR;
     758:	20 91 7a 01 	lds	r18, 0x017A
     75c:	30 91 7b 01 	lds	r19, 0x017B
     760:	80 91 7d 01 	lds	r24, 0x017D
     764:	88 2f       	mov	r24, r24
     766:	90 e0       	ldi	r25, 0x00	; 0
     768:	d9 01       	movw	r26, r18
     76a:	a8 0f       	add	r26, r24
     76c:	b9 1f       	adc	r27, r25
     76e:	ef e2       	ldi	r30, 0x2F	; 47
     770:	f0 e0       	ldi	r31, 0x00	; 0
     772:	80 81       	ld	r24, Z
     774:	8c 93       	st	X, r24
	if (SPI_u8Index == SPI_u8NoOfBytes)
     776:	90 91 7d 01 	lds	r25, 0x017D
     77a:	80 91 7c 01 	lds	r24, 0x017C
     77e:	98 17       	cp	r25, r24
     780:	89 f4       	brne	.+34     	; 0x7a4 <__vector_12+0x76>
	{
		SPI_u8Index = 0;
     782:	10 92 7d 01 	sts	0x017D, r1
		SPI_u8NoOfBytes = 0;
     786:	10 92 7c 01 	sts	0x017C, r1
		CLR_BIT(SPI_SPCR,SPIE);
     78a:	ad e2       	ldi	r26, 0x2D	; 45
     78c:	b0 e0       	ldi	r27, 0x00	; 0
     78e:	ed e2       	ldi	r30, 0x2D	; 45
     790:	f0 e0       	ldi	r31, 0x00	; 0
     792:	80 81       	ld	r24, Z
     794:	8f 77       	andi	r24, 0x7F	; 127
     796:	8c 93       	st	X, r24
		PtrASychCallback();
     798:	e0 91 76 01 	lds	r30, 0x0176
     79c:	f0 91 77 01 	lds	r31, 0x0177
     7a0:	09 95       	icall
     7a2:	14 c0       	rjmp	.+40     	; 0x7cc <__vector_12+0x9e>
	}
	else
	{
		SPI_u8Index++;
     7a4:	80 91 7d 01 	lds	r24, 0x017D
     7a8:	8f 5f       	subi	r24, 0xFF	; 255
     7aa:	80 93 7d 01 	sts	0x017D, r24
		SPI_SPDR = SPI_pu8TransmittedString[SPI_u8Index];
     7ae:	af e2       	ldi	r26, 0x2F	; 47
     7b0:	b0 e0       	ldi	r27, 0x00	; 0
     7b2:	20 91 78 01 	lds	r18, 0x0178
     7b6:	30 91 79 01 	lds	r19, 0x0179
     7ba:	80 91 7d 01 	lds	r24, 0x017D
     7be:	88 2f       	mov	r24, r24
     7c0:	90 e0       	ldi	r25, 0x00	; 0
     7c2:	f9 01       	movw	r30, r18
     7c4:	e8 0f       	add	r30, r24
     7c6:	f9 1f       	adc	r31, r25
     7c8:	80 81       	ld	r24, Z
     7ca:	8c 93       	st	X, r24
	}
	return;
}
     7cc:	cf 91       	pop	r28
     7ce:	df 91       	pop	r29
     7d0:	ff 91       	pop	r31
     7d2:	ef 91       	pop	r30
     7d4:	bf 91       	pop	r27
     7d6:	af 91       	pop	r26
     7d8:	9f 91       	pop	r25
     7da:	8f 91       	pop	r24
     7dc:	7f 91       	pop	r23
     7de:	6f 91       	pop	r22
     7e0:	5f 91       	pop	r21
     7e2:	4f 91       	pop	r20
     7e4:	3f 91       	pop	r19
     7e6:	2f 91       	pop	r18
     7e8:	0f 90       	pop	r0
     7ea:	0f be       	out	0x3f, r0	; 63
     7ec:	0f 90       	pop	r0
     7ee:	1f 90       	pop	r1
     7f0:	18 95       	reti

000007f2 <i2c_init_master>:
#include "I2c.h"
#include "I2C_priv.h"
#include "../../LIB/BIT_MATH.h"

void i2c_init_master(void)
{
     7f2:	df 93       	push	r29
     7f4:	cf 93       	push	r28
     7f6:	cd b7       	in	r28, 0x3d	; 61
     7f8:	de b7       	in	r29, 0x3e	; 62
    TWBR = 2; // bit rate = 400.000 kbps, F_CPU = 8M, SCL freq = F_CPU / (16 + 2 * TWBR * 4^TWPS)
     7fa:	e0 e2       	ldi	r30, 0x20	; 32
     7fc:	f0 e0       	ldi	r31, 0x00	; 0
     7fe:	82 e0       	ldi	r24, 0x02	; 2
     800:	80 83       	st	Z, r24
    TWSR &= ~((1<<TWPS1) | (1<<TWPS0)); // Prescaler = 1
     802:	a1 e2       	ldi	r26, 0x21	; 33
     804:	b0 e0       	ldi	r27, 0x00	; 0
     806:	e1 e2       	ldi	r30, 0x21	; 33
     808:	f0 e0       	ldi	r31, 0x00	; 0
     80a:	80 81       	ld	r24, Z
     80c:	8c 7f       	andi	r24, 0xFC	; 252
     80e:	8c 93       	st	X, r24
    TWAR = (1<<1); // My address = 0x01
     810:	e2 e2       	ldi	r30, 0x22	; 34
     812:	f0 e0       	ldi	r31, 0x00	; 0
     814:	82 e0       	ldi	r24, 0x02	; 2
     816:	80 83       	st	Z, r24
    TWCR = (1<<TWEN); // Enable I2C
     818:	e6 e5       	ldi	r30, 0x56	; 86
     81a:	f0 e0       	ldi	r31, 0x00	; 0
     81c:	84 e0       	ldi	r24, 0x04	; 4
     81e:	80 83       	st	Z, r24
}
     820:	cf 91       	pop	r28
     822:	df 91       	pop	r29
     824:	08 95       	ret

00000826 <i2c_init_slave>:

void i2c_init_slave(void)
{
     826:	df 93       	push	r29
     828:	cf 93       	push	r28
     82a:	cd b7       	in	r28, 0x3d	; 61
     82c:	de b7       	in	r29, 0x3e	; 62
    TWAR = (1<<1); // My address = 0x01
     82e:	e2 e2       	ldi	r30, 0x22	; 34
     830:	f0 e0       	ldi	r31, 0x00	; 0
     832:	82 e0       	ldi	r24, 0x02	; 2
     834:	80 83       	st	Z, r24
    TWCR = (1<<TWEN); // Enable I2C
     836:	e6 e5       	ldi	r30, 0x56	; 86
     838:	f0 e0       	ldi	r31, 0x00	; 0
     83a:	84 e0       	ldi	r24, 0x04	; 4
     83c:	80 83       	st	Z, r24
}
     83e:	cf 91       	pop	r28
     840:	df 91       	pop	r29
     842:	08 95       	ret

00000844 <i2c_start>:

void i2c_start(void)
{
     844:	df 93       	push	r29
     846:	cf 93       	push	r28
     848:	cd b7       	in	r28, 0x3d	; 61
     84a:	de b7       	in	r29, 0x3e	; 62
    TWCR = (1<<TWINT) | (1<<TWSTA) | (1<<TWEN); // Clear TWI interrupt flag, put start condition on SDA, enable TWI
     84c:	e6 e5       	ldi	r30, 0x56	; 86
     84e:	f0 e0       	ldi	r31, 0x00	; 0
     850:	84 ea       	ldi	r24, 0xA4	; 164
     852:	80 83       	st	Z, r24
    while(!(TWCR & (1<<TWINT))); // Wait till start condition is transmitted
     854:	e6 e5       	ldi	r30, 0x56	; 86
     856:	f0 e0       	ldi	r31, 0x00	; 0
     858:	80 81       	ld	r24, Z
     85a:	88 23       	and	r24, r24
     85c:	dc f7       	brge	.-10     	; 0x854 <i2c_start+0x10>
    while((TWSR & 0xF8) != START_ACK); // Check for acknowledgment
     85e:	e1 e2       	ldi	r30, 0x21	; 33
     860:	f0 e0       	ldi	r31, 0x00	; 0
     862:	80 81       	ld	r24, Z
     864:	88 2f       	mov	r24, r24
     866:	90 e0       	ldi	r25, 0x00	; 0
     868:	88 7f       	andi	r24, 0xF8	; 248
     86a:	90 70       	andi	r25, 0x00	; 0
     86c:	88 30       	cpi	r24, 0x08	; 8
     86e:	91 05       	cpc	r25, r1
     870:	b1 f7       	brne	.-20     	; 0x85e <i2c_start+0x1a>
}
     872:	cf 91       	pop	r28
     874:	df 91       	pop	r29
     876:	08 95       	ret

00000878 <i2c_repeated_start>:

void i2c_repeated_start(void)
{
     878:	df 93       	push	r29
     87a:	cf 93       	push	r28
     87c:	cd b7       	in	r28, 0x3d	; 61
     87e:	de b7       	in	r29, 0x3e	; 62
    TWCR = (1<<TWINT) | (1<<TWSTA) | (1<<TWEN); // Clear TWI interrupt flag, put start condition on SDA, enable TWI
     880:	e6 e5       	ldi	r30, 0x56	; 86
     882:	f0 e0       	ldi	r31, 0x00	; 0
     884:	84 ea       	ldi	r24, 0xA4	; 164
     886:	80 83       	st	Z, r24
    while(!(TWCR & (1<<TWINT))); // Wait till restart condition is transmitted
     888:	e6 e5       	ldi	r30, 0x56	; 86
     88a:	f0 e0       	ldi	r31, 0x00	; 0
     88c:	80 81       	ld	r24, Z
     88e:	88 23       	and	r24, r24
     890:	dc f7       	brge	.-10     	; 0x888 <i2c_repeated_start+0x10>
    while((TWSR & 0xF8) != REP_START_ACK); // Check for acknowledgment
     892:	e1 e2       	ldi	r30, 0x21	; 33
     894:	f0 e0       	ldi	r31, 0x00	; 0
     896:	80 81       	ld	r24, Z
     898:	88 2f       	mov	r24, r24
     89a:	90 e0       	ldi	r25, 0x00	; 0
     89c:	88 7f       	andi	r24, 0xF8	; 248
     89e:	90 70       	andi	r25, 0x00	; 0
     8a0:	80 31       	cpi	r24, 0x10	; 16
     8a2:	91 05       	cpc	r25, r1
     8a4:	b1 f7       	brne	.-20     	; 0x892 <i2c_repeated_start+0x1a>
}
     8a6:	cf 91       	pop	r28
     8a8:	df 91       	pop	r29
     8aa:	08 95       	ret

000008ac <i2c_send_slave_address_with_write_req>:

void i2c_send_slave_address_with_write_req(unsigned char slave_address)
{
     8ac:	df 93       	push	r29
     8ae:	cf 93       	push	r28
     8b0:	0f 92       	push	r0
     8b2:	cd b7       	in	r28, 0x3d	; 61
     8b4:	de b7       	in	r29, 0x3e	; 62
     8b6:	89 83       	std	Y+1, r24	; 0x01
    TWDR = (slave_address << 1); // Address and write instruction
     8b8:	e3 e2       	ldi	r30, 0x23	; 35
     8ba:	f0 e0       	ldi	r31, 0x00	; 0
     8bc:	89 81       	ldd	r24, Y+1	; 0x01
     8be:	88 0f       	add	r24, r24
     8c0:	80 83       	st	Z, r24
    TWCR = (1<<TWINT) | (1<<TWEN); // Clear TWI interrupt flag, enable TWI
     8c2:	e6 e5       	ldi	r30, 0x56	; 86
     8c4:	f0 e0       	ldi	r31, 0x00	; 0
     8c6:	84 e8       	ldi	r24, 0x84	; 132
     8c8:	80 83       	st	Z, r24
    while (!(TWCR & (1<<TWINT))); // Wait till complete TWDR byte transmitted
     8ca:	e6 e5       	ldi	r30, 0x56	; 86
     8cc:	f0 e0       	ldi	r31, 0x00	; 0
     8ce:	80 81       	ld	r24, Z
     8d0:	88 23       	and	r24, r24
     8d2:	dc f7       	brge	.-10     	; 0x8ca <i2c_send_slave_address_with_write_req+0x1e>
    while((TWSR & 0xF8) != SLAVE_ADD_AND_WR_ACK); // Check for acknowledgment
     8d4:	e1 e2       	ldi	r30, 0x21	; 33
     8d6:	f0 e0       	ldi	r31, 0x00	; 0
     8d8:	80 81       	ld	r24, Z
     8da:	88 2f       	mov	r24, r24
     8dc:	90 e0       	ldi	r25, 0x00	; 0
     8de:	88 7f       	andi	r24, 0xF8	; 248
     8e0:	90 70       	andi	r25, 0x00	; 0
     8e2:	88 31       	cpi	r24, 0x18	; 24
     8e4:	91 05       	cpc	r25, r1
     8e6:	b1 f7       	brne	.-20     	; 0x8d4 <i2c_send_slave_address_with_write_req+0x28>
}
     8e8:	0f 90       	pop	r0
     8ea:	cf 91       	pop	r28
     8ec:	df 91       	pop	r29
     8ee:	08 95       	ret

000008f0 <i2c_send_slave_address_with_read_req>:

void i2c_send_slave_address_with_read_req(unsigned char slave_address)
{
     8f0:	df 93       	push	r29
     8f2:	cf 93       	push	r28
     8f4:	0f 92       	push	r0
     8f6:	cd b7       	in	r28, 0x3d	; 61
     8f8:	de b7       	in	r29, 0x3e	; 62
     8fa:	89 83       	std	Y+1, r24	; 0x01
    TWDR = (slave_address << 1) | 1; // Address and read instruction
     8fc:	e3 e2       	ldi	r30, 0x23	; 35
     8fe:	f0 e0       	ldi	r31, 0x00	; 0
     900:	89 81       	ldd	r24, Y+1	; 0x01
     902:	88 2f       	mov	r24, r24
     904:	90 e0       	ldi	r25, 0x00	; 0
     906:	88 0f       	add	r24, r24
     908:	99 1f       	adc	r25, r25
     90a:	81 60       	ori	r24, 0x01	; 1
     90c:	80 83       	st	Z, r24
    TWCR = (1<<TWINT) | (1<<TWEN); // Clear TWI interrupt flag, enable TWI
     90e:	e6 e5       	ldi	r30, 0x56	; 86
     910:	f0 e0       	ldi	r31, 0x00	; 0
     912:	84 e8       	ldi	r24, 0x84	; 132
     914:	80 83       	st	Z, r24
    while (!(TWCR & (1<<TWINT))); // Wait till complete TWDR byte received
     916:	e6 e5       	ldi	r30, 0x56	; 86
     918:	f0 e0       	ldi	r31, 0x00	; 0
     91a:	80 81       	ld	r24, Z
     91c:	88 23       	and	r24, r24
     91e:	dc f7       	brge	.-10     	; 0x916 <i2c_send_slave_address_with_read_req+0x26>
    while((TWSR & 0xF8) != SLAVE_ADD_AND_RD_ACK); // Check for acknowledgment
     920:	e1 e2       	ldi	r30, 0x21	; 33
     922:	f0 e0       	ldi	r31, 0x00	; 0
     924:	80 81       	ld	r24, Z
     926:	88 2f       	mov	r24, r24
     928:	90 e0       	ldi	r25, 0x00	; 0
     92a:	88 7f       	andi	r24, 0xF8	; 248
     92c:	90 70       	andi	r25, 0x00	; 0
     92e:	80 34       	cpi	r24, 0x40	; 64
     930:	91 05       	cpc	r25, r1
     932:	b1 f7       	brne	.-20     	; 0x920 <i2c_send_slave_address_with_read_req+0x30>
}
     934:	0f 90       	pop	r0
     936:	cf 91       	pop	r28
     938:	df 91       	pop	r29
     93a:	08 95       	ret

0000093c <i2c_write_byte>:

void i2c_write_byte(unsigned char byte)
{
     93c:	df 93       	push	r29
     93e:	cf 93       	push	r28
     940:	0f 92       	push	r0
     942:	cd b7       	in	r28, 0x3d	; 61
     944:	de b7       	in	r29, 0x3e	; 62
     946:	89 83       	std	Y+1, r24	; 0x01
    TWDR = byte; // Put data in TWDR
     948:	e3 e2       	ldi	r30, 0x23	; 35
     94a:	f0 e0       	ldi	r31, 0x00	; 0
     94c:	89 81       	ldd	r24, Y+1	; 0x01
     94e:	80 83       	st	Z, r24
    TWCR = (1<<TWINT) | (1<<TWEN); // Clear TWI interrupt flag, enable TWI
     950:	e6 e5       	ldi	r30, 0x56	; 86
     952:	f0 e0       	ldi	r31, 0x00	; 0
     954:	84 e8       	ldi	r24, 0x84	; 132
     956:	80 83       	st	Z, r24
    while (!(TWCR & (1<<TWINT))); // Wait till complete TWDR byte transmitted
     958:	e6 e5       	ldi	r30, 0x56	; 86
     95a:	f0 e0       	ldi	r31, 0x00	; 0
     95c:	80 81       	ld	r24, Z
     95e:	88 23       	and	r24, r24
     960:	dc f7       	brge	.-10     	; 0x958 <i2c_write_byte+0x1c>
    while((TWSR & 0xF8) != WR_BYTE_ACK); // Check for acknowledgment
     962:	e1 e2       	ldi	r30, 0x21	; 33
     964:	f0 e0       	ldi	r31, 0x00	; 0
     966:	80 81       	ld	r24, Z
     968:	88 2f       	mov	r24, r24
     96a:	90 e0       	ldi	r25, 0x00	; 0
     96c:	88 7f       	andi	r24, 0xF8	; 248
     96e:	90 70       	andi	r25, 0x00	; 0
     970:	88 32       	cpi	r24, 0x28	; 40
     972:	91 05       	cpc	r25, r1
     974:	b1 f7       	brne	.-20     	; 0x962 <i2c_write_byte+0x26>
}
     976:	0f 90       	pop	r0
     978:	cf 91       	pop	r28
     97a:	df 91       	pop	r29
     97c:	08 95       	ret

0000097e <i2c_read_byte>:

unsigned char i2c_read_byte(void)
{
     97e:	df 93       	push	r29
     980:	cf 93       	push	r28
     982:	cd b7       	in	r28, 0x3d	; 61
     984:	de b7       	in	r29, 0x3e	; 62
    TWCR = (1<<TWINT) | (1<<TWEN); // Clear TWI interrupt flag, enable TWI
     986:	e6 e5       	ldi	r30, 0x56	; 86
     988:	f0 e0       	ldi	r31, 0x00	; 0
     98a:	84 e8       	ldi	r24, 0x84	; 132
     98c:	80 83       	st	Z, r24
    while(!(TWCR & (1<<TWINT))); // Wait till complete TWDR byte transmitted
     98e:	e6 e5       	ldi	r30, 0x56	; 86
     990:	f0 e0       	ldi	r31, 0x00	; 0
     992:	80 81       	ld	r24, Z
     994:	88 23       	and	r24, r24
     996:	dc f7       	brge	.-10     	; 0x98e <i2c_read_byte+0x10>
    while((TWSR & 0xF8) != RD_BYTE_WITH_NACK); // Check for acknowledgment
     998:	e1 e2       	ldi	r30, 0x21	; 33
     99a:	f0 e0       	ldi	r31, 0x00	; 0
     99c:	80 81       	ld	r24, Z
     99e:	88 2f       	mov	r24, r24
     9a0:	90 e0       	ldi	r25, 0x00	; 0
     9a2:	88 7f       	andi	r24, 0xF8	; 248
     9a4:	90 70       	andi	r25, 0x00	; 0
     9a6:	88 35       	cpi	r24, 0x58	; 88
     9a8:	91 05       	cpc	r25, r1
     9aa:	b1 f7       	brne	.-20     	; 0x998 <i2c_read_byte+0x1a>
    return TWDR;
     9ac:	e3 e2       	ldi	r30, 0x23	; 35
     9ae:	f0 e0       	ldi	r31, 0x00	; 0
     9b0:	80 81       	ld	r24, Z
}
     9b2:	cf 91       	pop	r28
     9b4:	df 91       	pop	r29
     9b6:	08 95       	ret

000009b8 <i2c_stop>:

void i2c_stop(void)
{
     9b8:	df 93       	push	r29
     9ba:	cf 93       	push	r28
     9bc:	cd b7       	in	r28, 0x3d	; 61
     9be:	de b7       	in	r29, 0x3e	; 62
    TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWSTO); // Clear TWI interrupt flag, put stop condition on SDA, enable TWI
     9c0:	e6 e5       	ldi	r30, 0x56	; 86
     9c2:	f0 e0       	ldi	r31, 0x00	; 0
     9c4:	84 e9       	ldi	r24, 0x94	; 148
     9c6:	80 83       	st	Z, r24
}
     9c8:	cf 91       	pop	r28
     9ca:	df 91       	pop	r29
     9cc:	08 95       	ret

000009ce <i2c_slave_check_slave_address_received_with_write_req>:

void i2c_slave_check_slave_address_received_with_write_req(void)
{
     9ce:	df 93       	push	r29
     9d0:	cf 93       	push	r28
     9d2:	cd b7       	in	r28, 0x3d	; 61
     9d4:	de b7       	in	r29, 0x3e	; 62
    TWCR = (1<<TWEA) | (1<<TWEN) | (1<<TWINT); // Enable acknowledgment after receive, enable TWI, clear TWI interrupt flag
     9d6:	e6 e5       	ldi	r30, 0x56	; 86
     9d8:	f0 e0       	ldi	r31, 0x00	; 0
     9da:	84 ec       	ldi	r24, 0xC4	; 196
     9dc:	80 83       	st	Z, r24
    while (!(TWCR & (1<<TWINT))); // Wait for TWINT flag
     9de:	e6 e5       	ldi	r30, 0x56	; 86
     9e0:	f0 e0       	ldi	r31, 0x00	; 0
     9e2:	80 81       	ld	r24, Z
     9e4:	88 23       	and	r24, r24
     9e6:	dc f7       	brge	.-10     	; 0x9de <i2c_slave_check_slave_address_received_with_write_req+0x10>
    while((TWSR & 0xF8) != SLAVE_ADD_RCVD_WR_REQ);
     9e8:	e1 e2       	ldi	r30, 0x21	; 33
     9ea:	f0 e0       	ldi	r31, 0x00	; 0
     9ec:	80 81       	ld	r24, Z
     9ee:	88 2f       	mov	r24, r24
     9f0:	90 e0       	ldi	r25, 0x00	; 0
     9f2:	88 7f       	andi	r24, 0xF8	; 248
     9f4:	90 70       	andi	r25, 0x00	; 0
     9f6:	80 36       	cpi	r24, 0x60	; 96
     9f8:	91 05       	cpc	r25, r1
     9fa:	b1 f7       	brne	.-20     	; 0x9e8 <i2c_slave_check_slave_address_received_with_write_req+0x1a>
}
     9fc:	cf 91       	pop	r28
     9fe:	df 91       	pop	r29
     a00:	08 95       	ret

00000a02 <i2c_slave_check_slave_address_received_with_read_req>:

void i2c_slave_check_slave_address_received_with_read_req(void)
{
     a02:	df 93       	push	r29
     a04:	cf 93       	push	r28
     a06:	cd b7       	in	r28, 0x3d	; 61
     a08:	de b7       	in	r29, 0x3e	; 62
    TWCR = (1<<TWEA) | (1<<TWEN) | (1<<TWINT); // Enable acknowledgment after receive, enable TWI, clear TWI interrupt flag
     a0a:	e6 e5       	ldi	r30, 0x56	; 86
     a0c:	f0 e0       	ldi	r31, 0x00	; 0
     a0e:	84 ec       	ldi	r24, 0xC4	; 196
     a10:	80 83       	st	Z, r24
    while (!(TWCR & (1<<TWINT))); // Wait for TWINT flag
     a12:	e6 e5       	ldi	r30, 0x56	; 86
     a14:	f0 e0       	ldi	r31, 0x00	; 0
     a16:	80 81       	ld	r24, Z
     a18:	88 23       	and	r24, r24
     a1a:	dc f7       	brge	.-10     	; 0xa12 <i2c_slave_check_slave_address_received_with_read_req+0x10>
    while((TWSR & 0xF8) != SLAVE_ADD_RCVD_RD_REQ);
     a1c:	e1 e2       	ldi	r30, 0x21	; 33
     a1e:	f0 e0       	ldi	r31, 0x00	; 0
     a20:	80 81       	ld	r24, Z
     a22:	88 2f       	mov	r24, r24
     a24:	90 e0       	ldi	r25, 0x00	; 0
     a26:	88 7f       	andi	r24, 0xF8	; 248
     a28:	90 70       	andi	r25, 0x00	; 0
     a2a:	88 3a       	cpi	r24, 0xA8	; 168
     a2c:	91 05       	cpc	r25, r1
     a2e:	b1 f7       	brne	.-20     	; 0xa1c <i2c_slave_check_slave_address_received_with_read_req+0x1a>
}
     a30:	cf 91       	pop	r28
     a32:	df 91       	pop	r29
     a34:	08 95       	ret

00000a36 <i2c_slave_read_byte>:

unsigned char i2c_slave_read_byte(void)
{
     a36:	df 93       	push	r29
     a38:	cf 93       	push	r28
     a3a:	cd b7       	in	r28, 0x3d	; 61
     a3c:	de b7       	in	r29, 0x3e	; 62
    TWCR = (1<<TWINT) | (1<<TWEA) | (1<<TWEN); // Clear TWI interrupt flag, get enable acknowledgment, enable TWI
     a3e:	e6 e5       	ldi	r30, 0x56	; 86
     a40:	f0 e0       	ldi	r31, 0x00	; 0
     a42:	84 ec       	ldi	r24, 0xC4	; 196
     a44:	80 83       	st	Z, r24
    while(!(TWCR & (1<<TWINT))); // Wait for TWINT flag
     a46:	e6 e5       	ldi	r30, 0x56	; 86
     a48:	f0 e0       	ldi	r31, 0x00	; 0
     a4a:	80 81       	ld	r24, Z
     a4c:	88 23       	and	r24, r24
     a4e:	dc f7       	brge	.-10     	; 0xa46 <i2c_slave_read_byte+0x10>
    while((TWSR & 0xF8) != SLAVE_DATA_RECEIVED);
     a50:	e1 e2       	ldi	r30, 0x21	; 33
     a52:	f0 e0       	ldi	r31, 0x00	; 0
     a54:	80 81       	ld	r24, Z
     a56:	88 2f       	mov	r24, r24
     a58:	90 e0       	ldi	r25, 0x00	; 0
     a5a:	88 7f       	andi	r24, 0xF8	; 248
     a5c:	90 70       	andi	r25, 0x00	; 0
     a5e:	80 38       	cpi	r24, 0x80	; 128
     a60:	91 05       	cpc	r25, r1
     a62:	b1 f7       	brne	.-20     	; 0xa50 <i2c_slave_read_byte+0x1a>
    return TWDR;
     a64:	e3 e2       	ldi	r30, 0x23	; 35
     a66:	f0 e0       	ldi	r31, 0x00	; 0
     a68:	80 81       	ld	r24, Z
}
     a6a:	cf 91       	pop	r28
     a6c:	df 91       	pop	r29
     a6e:	08 95       	ret

00000a70 <i2c_slave_write_byte>:

void i2c_slave_write_byte(unsigned char byte)
{
     a70:	df 93       	push	r29
     a72:	cf 93       	push	r28
     a74:	0f 92       	push	r0
     a76:	cd b7       	in	r28, 0x3d	; 61
     a78:	de b7       	in	r29, 0x3e	; 62
     a7a:	89 83       	std	Y+1, r24	; 0x01
    TWDR = byte;
     a7c:	e3 e2       	ldi	r30, 0x23	; 35
     a7e:	f0 e0       	ldi	r31, 0x00	; 0
     a80:	89 81       	ldd	r24, Y+1	; 0x01
     a82:	80 83       	st	Z, r24
    TWCR = (1<<TWINT) | (1<<TWEA) | (1<<TWEN); // Clear TWI interrupt flag, get enable acknowledgment, enable TWI
     a84:	e6 e5       	ldi	r30, 0x56	; 86
     a86:	f0 e0       	ldi	r31, 0x00	; 0
     a88:	84 ec       	ldi	r24, 0xC4	; 196
     a8a:	80 83       	st	Z, r24
    while(!(TWCR & (1<<TWINT))); // Wait for TWINT flag
     a8c:	e6 e5       	ldi	r30, 0x56	; 86
     a8e:	f0 e0       	ldi	r31, 0x00	; 0
     a90:	80 81       	ld	r24, Z
     a92:	88 23       	and	r24, r24
     a94:	dc f7       	brge	.-10     	; 0xa8c <i2c_slave_write_byte+0x1c>
    while((TWSR & 0xF8) != SLAVE_BYTE_TRANSMITTED); // Data byte in TWDR has been transmitted
     a96:	e1 e2       	ldi	r30, 0x21	; 33
     a98:	f0 e0       	ldi	r31, 0x00	; 0
     a9a:	80 81       	ld	r24, Z
     a9c:	88 2f       	mov	r24, r24
     a9e:	90 e0       	ldi	r25, 0x00	; 0
     aa0:	88 7f       	andi	r24, 0xF8	; 248
     aa2:	90 70       	andi	r25, 0x00	; 0
     aa4:	80 3c       	cpi	r24, 0xC0	; 192
     aa6:	91 05       	cpc	r25, r1
     aa8:	b1 f7       	brne	.-20     	; 0xa96 <i2c_slave_write_byte+0x26>
}
     aaa:	0f 90       	pop	r0
     aac:	cf 91       	pop	r28
     aae:	df 91       	pop	r29
     ab0:	08 95       	ret

00000ab2 <GIE_voidEnable>:

#include "GIE_int.h"
#include "GIE_reg.h"


void GIE_voidEnable(void){
     ab2:	df 93       	push	r29
     ab4:	cf 93       	push	r28
     ab6:	cd b7       	in	r28, 0x3d	; 61
     ab8:	de b7       	in	r29, 0x3e	; 62

	SET_BIT(SREG , I);
     aba:	af e5       	ldi	r26, 0x5F	; 95
     abc:	b0 e0       	ldi	r27, 0x00	; 0
     abe:	ef e5       	ldi	r30, 0x5F	; 95
     ac0:	f0 e0       	ldi	r31, 0x00	; 0
     ac2:	80 81       	ld	r24, Z
     ac4:	80 68       	ori	r24, 0x80	; 128
     ac6:	8c 93       	st	X, r24

}
     ac8:	cf 91       	pop	r28
     aca:	df 91       	pop	r29
     acc:	08 95       	ret

00000ace <GIE_voidDisable>:

void GIE_voidDisable(void){
     ace:	df 93       	push	r29
     ad0:	cf 93       	push	r28
     ad2:	cd b7       	in	r28, 0x3d	; 61
     ad4:	de b7       	in	r29, 0x3e	; 62

	CLR_BIT(SREG , I);
     ad6:	af e5       	ldi	r26, 0x5F	; 95
     ad8:	b0 e0       	ldi	r27, 0x00	; 0
     ada:	ef e5       	ldi	r30, 0x5F	; 95
     adc:	f0 e0       	ldi	r31, 0x00	; 0
     ade:	80 81       	ld	r24, Z
     ae0:	8f 77       	andi	r24, 0x7F	; 127
     ae2:	8c 93       	st	X, r24

}
     ae4:	cf 91       	pop	r28
     ae6:	df 91       	pop	r29
     ae8:	08 95       	ret

00000aea <EXTI0_VoidInit>:
void (*INT1_PFun)(void);
void (*INT2_PFun)(void);

/**************************************************************************/
/**************************************************************************/
void EXTI0_VoidInit(void){
     aea:	df 93       	push	r29
     aec:	cf 93       	push	r28
     aee:	cd b7       	in	r28, 0x3d	; 61
     af0:	de b7       	in	r29, 0x3e	; 62
	case ANY_CHANGE:
		CLR_BIT(MCUCR, ISC01);
		SET_BIT(MCUCR, ISC00);
		break;
	case FAILING_EDGE:
			SET_BIT(MCUCR, ISC01);
     af2:	a5 e5       	ldi	r26, 0x55	; 85
     af4:	b0 e0       	ldi	r27, 0x00	; 0
     af6:	e5 e5       	ldi	r30, 0x55	; 85
     af8:	f0 e0       	ldi	r31, 0x00	; 0
     afa:	80 81       	ld	r24, Z
     afc:	82 60       	ori	r24, 0x02	; 2
     afe:	8c 93       	st	X, r24
			CLR_BIT(MCUCR, ISC00);
     b00:	a5 e5       	ldi	r26, 0x55	; 85
     b02:	b0 e0       	ldi	r27, 0x00	; 0
     b04:	e5 e5       	ldi	r30, 0x55	; 85
     b06:	f0 e0       	ldi	r31, 0x00	; 0
     b08:	80 81       	ld	r24, Z
     b0a:	8e 7f       	andi	r24, 0xFE	; 254
     b0c:	8c 93       	st	X, r24
			SET_BIT(MCUCR, ISC01);
			SET_BIT(MCUCR, ISC00);
			break;
	}
	//PIE 	Enable interrupt 0
	SET_BIT(GICR, INT0);
     b0e:	ab e5       	ldi	r26, 0x5B	; 91
     b10:	b0 e0       	ldi	r27, 0x00	; 0
     b12:	eb e5       	ldi	r30, 0x5B	; 91
     b14:	f0 e0       	ldi	r31, 0x00	; 0
     b16:	80 81       	ld	r24, Z
     b18:	80 64       	ori	r24, 0x40	; 64
     b1a:	8c 93       	st	X, r24

}
     b1c:	cf 91       	pop	r28
     b1e:	df 91       	pop	r29
     b20:	08 95       	ret

00000b22 <EXTI1_VoidInit>:
/**************************************************************************/
void EXTI1_VoidInit(void){
     b22:	df 93       	push	r29
     b24:	cf 93       	push	r28
     b26:	cd b7       	in	r28, 0x3d	; 61
     b28:	de b7       	in	r29, 0x3e	; 62
	case FAILING_EDGE:
			SET_BIT(MCUCR, ISC11);
			CLR_BIT(MCUCR, ISC10);
			break;
	case RISING_EDGE:
			SET_BIT(MCUCR, ISC11);
     b2a:	a5 e5       	ldi	r26, 0x55	; 85
     b2c:	b0 e0       	ldi	r27, 0x00	; 0
     b2e:	e5 e5       	ldi	r30, 0x55	; 85
     b30:	f0 e0       	ldi	r31, 0x00	; 0
     b32:	80 81       	ld	r24, Z
     b34:	88 60       	ori	r24, 0x08	; 8
     b36:	8c 93       	st	X, r24
			SET_BIT(MCUCR, ISC10);
     b38:	a5 e5       	ldi	r26, 0x55	; 85
     b3a:	b0 e0       	ldi	r27, 0x00	; 0
     b3c:	e5 e5       	ldi	r30, 0x55	; 85
     b3e:	f0 e0       	ldi	r31, 0x00	; 0
     b40:	80 81       	ld	r24, Z
     b42:	84 60       	ori	r24, 0x04	; 4
     b44:	8c 93       	st	X, r24
			break;
	}
	//PIE 	Enable interrupt 1
	SET_BIT(GICR, INT1);
     b46:	ab e5       	ldi	r26, 0x5B	; 91
     b48:	b0 e0       	ldi	r27, 0x00	; 0
     b4a:	eb e5       	ldi	r30, 0x5B	; 91
     b4c:	f0 e0       	ldi	r31, 0x00	; 0
     b4e:	80 81       	ld	r24, Z
     b50:	80 68       	ori	r24, 0x80	; 128
     b52:	8c 93       	st	X, r24

}
     b54:	cf 91       	pop	r28
     b56:	df 91       	pop	r29
     b58:	08 95       	ret

00000b5a <EXTI2_VoidInit>:
/**************************************************************************/
void EXTI2_VoidInit(void){
     b5a:	df 93       	push	r29
     b5c:	cf 93       	push	r28
     b5e:	cd b7       	in	r28, 0x3d	; 61
     b60:	de b7       	in	r29, 0x3e	; 62

	switch (INT2_SENSE)
	{
	case FAILING_EDGE:
			CLR_BIT(MCUCSR, ISC2);
     b62:	a4 e5       	ldi	r26, 0x54	; 84
     b64:	b0 e0       	ldi	r27, 0x00	; 0
     b66:	e4 e5       	ldi	r30, 0x54	; 84
     b68:	f0 e0       	ldi	r31, 0x00	; 0
     b6a:	80 81       	ld	r24, Z
     b6c:	8f 7b       	andi	r24, 0xBF	; 191
     b6e:	8c 93       	st	X, r24
			SET_BIT(MCUCSR, ISC2);
			break;

	}
	//PIE 	Enable interrupt 2
	SET_BIT(GICR, INT2);
     b70:	ab e5       	ldi	r26, 0x5B	; 91
     b72:	b0 e0       	ldi	r27, 0x00	; 0
     b74:	eb e5       	ldi	r30, 0x5B	; 91
     b76:	f0 e0       	ldi	r31, 0x00	; 0
     b78:	80 81       	ld	r24, Z
     b7a:	80 62       	ori	r24, 0x20	; 32
     b7c:	8c 93       	st	X, r24

}
     b7e:	cf 91       	pop	r28
     b80:	df 91       	pop	r29
     b82:	08 95       	ret

00000b84 <EXTI0_voidSetSenseControl>:
/**************************************************************************/
/**************************************************************************/
//Change Sense control of interrupt 0 during program
void EXTI0_voidSetSenseControl(uint8_t copy_U8SenseControl){
     b84:	df 93       	push	r29
     b86:	cf 93       	push	r28
     b88:	00 d0       	rcall	.+0      	; 0xb8a <EXTI0_voidSetSenseControl+0x6>
     b8a:	0f 92       	push	r0
     b8c:	cd b7       	in	r28, 0x3d	; 61
     b8e:	de b7       	in	r29, 0x3e	; 62
     b90:	89 83       	std	Y+1, r24	; 0x01
	switch (copy_U8SenseControl)
     b92:	89 81       	ldd	r24, Y+1	; 0x01
     b94:	28 2f       	mov	r18, r24
     b96:	30 e0       	ldi	r19, 0x00	; 0
     b98:	3b 83       	std	Y+3, r19	; 0x03
     b9a:	2a 83       	std	Y+2, r18	; 0x02
     b9c:	8a 81       	ldd	r24, Y+2	; 0x02
     b9e:	9b 81       	ldd	r25, Y+3	; 0x03
     ba0:	82 30       	cpi	r24, 0x02	; 2
     ba2:	91 05       	cpc	r25, r1
     ba4:	29 f1       	breq	.+74     	; 0xbf0 <EXTI0_voidSetSenseControl+0x6c>
     ba6:	2a 81       	ldd	r18, Y+2	; 0x02
     ba8:	3b 81       	ldd	r19, Y+3	; 0x03
     baa:	23 30       	cpi	r18, 0x03	; 3
     bac:	31 05       	cpc	r19, r1
     bae:	34 f4       	brge	.+12     	; 0xbbc <EXTI0_voidSetSenseControl+0x38>
     bb0:	8a 81       	ldd	r24, Y+2	; 0x02
     bb2:	9b 81       	ldd	r25, Y+3	; 0x03
     bb4:	81 30       	cpi	r24, 0x01	; 1
     bb6:	91 05       	cpc	r25, r1
     bb8:	61 f0       	breq	.+24     	; 0xbd2 <EXTI0_voidSetSenseControl+0x4e>
     bba:	46 c0       	rjmp	.+140    	; 0xc48 <EXTI0_voidSetSenseControl+0xc4>
     bbc:	2a 81       	ldd	r18, Y+2	; 0x02
     bbe:	3b 81       	ldd	r19, Y+3	; 0x03
     bc0:	23 30       	cpi	r18, 0x03	; 3
     bc2:	31 05       	cpc	r19, r1
     bc4:	21 f1       	breq	.+72     	; 0xc0e <EXTI0_voidSetSenseControl+0x8a>
     bc6:	8a 81       	ldd	r24, Y+2	; 0x02
     bc8:	9b 81       	ldd	r25, Y+3	; 0x03
     bca:	84 30       	cpi	r24, 0x04	; 4
     bcc:	91 05       	cpc	r25, r1
     bce:	71 f1       	breq	.+92     	; 0xc2c <EXTI0_voidSetSenseControl+0xa8>
     bd0:	3b c0       	rjmp	.+118    	; 0xc48 <EXTI0_voidSetSenseControl+0xc4>
		{
		case LOW_LEVEL:
			CLR_BIT(MCUCR, ISC01);
     bd2:	a5 e5       	ldi	r26, 0x55	; 85
     bd4:	b0 e0       	ldi	r27, 0x00	; 0
     bd6:	e5 e5       	ldi	r30, 0x55	; 85
     bd8:	f0 e0       	ldi	r31, 0x00	; 0
     bda:	80 81       	ld	r24, Z
     bdc:	8d 7f       	andi	r24, 0xFD	; 253
     bde:	8c 93       	st	X, r24
			CLR_BIT(MCUCR, ISC00);
     be0:	a5 e5       	ldi	r26, 0x55	; 85
     be2:	b0 e0       	ldi	r27, 0x00	; 0
     be4:	e5 e5       	ldi	r30, 0x55	; 85
     be6:	f0 e0       	ldi	r31, 0x00	; 0
     be8:	80 81       	ld	r24, Z
     bea:	8e 7f       	andi	r24, 0xFE	; 254
     bec:	8c 93       	st	X, r24
     bee:	2c c0       	rjmp	.+88     	; 0xc48 <EXTI0_voidSetSenseControl+0xc4>
			break;

		case ANY_CHANGE:
			CLR_BIT(MCUCR, ISC01);
     bf0:	a5 e5       	ldi	r26, 0x55	; 85
     bf2:	b0 e0       	ldi	r27, 0x00	; 0
     bf4:	e5 e5       	ldi	r30, 0x55	; 85
     bf6:	f0 e0       	ldi	r31, 0x00	; 0
     bf8:	80 81       	ld	r24, Z
     bfa:	8d 7f       	andi	r24, 0xFD	; 253
     bfc:	8c 93       	st	X, r24
			SET_BIT(MCUCR, ISC00);
     bfe:	a5 e5       	ldi	r26, 0x55	; 85
     c00:	b0 e0       	ldi	r27, 0x00	; 0
     c02:	e5 e5       	ldi	r30, 0x55	; 85
     c04:	f0 e0       	ldi	r31, 0x00	; 0
     c06:	80 81       	ld	r24, Z
     c08:	81 60       	ori	r24, 0x01	; 1
     c0a:	8c 93       	st	X, r24
     c0c:	1d c0       	rjmp	.+58     	; 0xc48 <EXTI0_voidSetSenseControl+0xc4>
			break;
		case FAILING_EDGE:
				SET_BIT(MCUCR, ISC01);
     c0e:	a5 e5       	ldi	r26, 0x55	; 85
     c10:	b0 e0       	ldi	r27, 0x00	; 0
     c12:	e5 e5       	ldi	r30, 0x55	; 85
     c14:	f0 e0       	ldi	r31, 0x00	; 0
     c16:	80 81       	ld	r24, Z
     c18:	82 60       	ori	r24, 0x02	; 2
     c1a:	8c 93       	st	X, r24
				CLR_BIT(MCUCR, ISC00);
     c1c:	a5 e5       	ldi	r26, 0x55	; 85
     c1e:	b0 e0       	ldi	r27, 0x00	; 0
     c20:	e5 e5       	ldi	r30, 0x55	; 85
     c22:	f0 e0       	ldi	r31, 0x00	; 0
     c24:	80 81       	ld	r24, Z
     c26:	8e 7f       	andi	r24, 0xFE	; 254
     c28:	8c 93       	st	X, r24
     c2a:	0e c0       	rjmp	.+28     	; 0xc48 <EXTI0_voidSetSenseControl+0xc4>
				break;
		case RISING_EDGE:
				SET_BIT(MCUCR, ISC01);
     c2c:	a5 e5       	ldi	r26, 0x55	; 85
     c2e:	b0 e0       	ldi	r27, 0x00	; 0
     c30:	e5 e5       	ldi	r30, 0x55	; 85
     c32:	f0 e0       	ldi	r31, 0x00	; 0
     c34:	80 81       	ld	r24, Z
     c36:	82 60       	ori	r24, 0x02	; 2
     c38:	8c 93       	st	X, r24
				SET_BIT(MCUCR, ISC00);
     c3a:	a5 e5       	ldi	r26, 0x55	; 85
     c3c:	b0 e0       	ldi	r27, 0x00	; 0
     c3e:	e5 e5       	ldi	r30, 0x55	; 85
     c40:	f0 e0       	ldi	r31, 0x00	; 0
     c42:	80 81       	ld	r24, Z
     c44:	81 60       	ori	r24, 0x01	; 1
     c46:	8c 93       	st	X, r24
				break;
		}

}
     c48:	0f 90       	pop	r0
     c4a:	0f 90       	pop	r0
     c4c:	0f 90       	pop	r0
     c4e:	cf 91       	pop	r28
     c50:	df 91       	pop	r29
     c52:	08 95       	ret

00000c54 <EXTI1_voidSetSenseControl>:
//Change Sense control of interrupt 1 during program
void EXTI1_voidSetSenseControl(uint8_t copy_U8SenseControl){
     c54:	df 93       	push	r29
     c56:	cf 93       	push	r28
     c58:	00 d0       	rcall	.+0      	; 0xc5a <EXTI1_voidSetSenseControl+0x6>
     c5a:	0f 92       	push	r0
     c5c:	cd b7       	in	r28, 0x3d	; 61
     c5e:	de b7       	in	r29, 0x3e	; 62
     c60:	89 83       	std	Y+1, r24	; 0x01
	switch (copy_U8SenseControl)
     c62:	89 81       	ldd	r24, Y+1	; 0x01
     c64:	28 2f       	mov	r18, r24
     c66:	30 e0       	ldi	r19, 0x00	; 0
     c68:	3b 83       	std	Y+3, r19	; 0x03
     c6a:	2a 83       	std	Y+2, r18	; 0x02
     c6c:	8a 81       	ldd	r24, Y+2	; 0x02
     c6e:	9b 81       	ldd	r25, Y+3	; 0x03
     c70:	82 30       	cpi	r24, 0x02	; 2
     c72:	91 05       	cpc	r25, r1
     c74:	29 f1       	breq	.+74     	; 0xcc0 <EXTI1_voidSetSenseControl+0x6c>
     c76:	2a 81       	ldd	r18, Y+2	; 0x02
     c78:	3b 81       	ldd	r19, Y+3	; 0x03
     c7a:	23 30       	cpi	r18, 0x03	; 3
     c7c:	31 05       	cpc	r19, r1
     c7e:	34 f4       	brge	.+12     	; 0xc8c <EXTI1_voidSetSenseControl+0x38>
     c80:	8a 81       	ldd	r24, Y+2	; 0x02
     c82:	9b 81       	ldd	r25, Y+3	; 0x03
     c84:	81 30       	cpi	r24, 0x01	; 1
     c86:	91 05       	cpc	r25, r1
     c88:	61 f0       	breq	.+24     	; 0xca2 <EXTI1_voidSetSenseControl+0x4e>
     c8a:	46 c0       	rjmp	.+140    	; 0xd18 <EXTI1_voidSetSenseControl+0xc4>
     c8c:	2a 81       	ldd	r18, Y+2	; 0x02
     c8e:	3b 81       	ldd	r19, Y+3	; 0x03
     c90:	23 30       	cpi	r18, 0x03	; 3
     c92:	31 05       	cpc	r19, r1
     c94:	21 f1       	breq	.+72     	; 0xcde <EXTI1_voidSetSenseControl+0x8a>
     c96:	8a 81       	ldd	r24, Y+2	; 0x02
     c98:	9b 81       	ldd	r25, Y+3	; 0x03
     c9a:	84 30       	cpi	r24, 0x04	; 4
     c9c:	91 05       	cpc	r25, r1
     c9e:	71 f1       	breq	.+92     	; 0xcfc <EXTI1_voidSetSenseControl+0xa8>
     ca0:	3b c0       	rjmp	.+118    	; 0xd18 <EXTI1_voidSetSenseControl+0xc4>
		{
		case LOW_LEVEL:
			CLR_BIT(MCUCR, ISC11);
     ca2:	a5 e5       	ldi	r26, 0x55	; 85
     ca4:	b0 e0       	ldi	r27, 0x00	; 0
     ca6:	e5 e5       	ldi	r30, 0x55	; 85
     ca8:	f0 e0       	ldi	r31, 0x00	; 0
     caa:	80 81       	ld	r24, Z
     cac:	87 7f       	andi	r24, 0xF7	; 247
     cae:	8c 93       	st	X, r24
			CLR_BIT(MCUCR, ISC10);
     cb0:	a5 e5       	ldi	r26, 0x55	; 85
     cb2:	b0 e0       	ldi	r27, 0x00	; 0
     cb4:	e5 e5       	ldi	r30, 0x55	; 85
     cb6:	f0 e0       	ldi	r31, 0x00	; 0
     cb8:	80 81       	ld	r24, Z
     cba:	8b 7f       	andi	r24, 0xFB	; 251
     cbc:	8c 93       	st	X, r24
     cbe:	2c c0       	rjmp	.+88     	; 0xd18 <EXTI1_voidSetSenseControl+0xc4>
			break;

		case ANY_CHANGE:
			CLR_BIT(MCUCR, ISC11);
     cc0:	a5 e5       	ldi	r26, 0x55	; 85
     cc2:	b0 e0       	ldi	r27, 0x00	; 0
     cc4:	e5 e5       	ldi	r30, 0x55	; 85
     cc6:	f0 e0       	ldi	r31, 0x00	; 0
     cc8:	80 81       	ld	r24, Z
     cca:	87 7f       	andi	r24, 0xF7	; 247
     ccc:	8c 93       	st	X, r24
			SET_BIT(MCUCR, ISC10);
     cce:	a5 e5       	ldi	r26, 0x55	; 85
     cd0:	b0 e0       	ldi	r27, 0x00	; 0
     cd2:	e5 e5       	ldi	r30, 0x55	; 85
     cd4:	f0 e0       	ldi	r31, 0x00	; 0
     cd6:	80 81       	ld	r24, Z
     cd8:	84 60       	ori	r24, 0x04	; 4
     cda:	8c 93       	st	X, r24
     cdc:	1d c0       	rjmp	.+58     	; 0xd18 <EXTI1_voidSetSenseControl+0xc4>
			break;
		case FAILING_EDGE:
				SET_BIT(MCUCR, ISC11);
     cde:	a5 e5       	ldi	r26, 0x55	; 85
     ce0:	b0 e0       	ldi	r27, 0x00	; 0
     ce2:	e5 e5       	ldi	r30, 0x55	; 85
     ce4:	f0 e0       	ldi	r31, 0x00	; 0
     ce6:	80 81       	ld	r24, Z
     ce8:	88 60       	ori	r24, 0x08	; 8
     cea:	8c 93       	st	X, r24
				CLR_BIT(MCUCR, ISC10);
     cec:	a5 e5       	ldi	r26, 0x55	; 85
     cee:	b0 e0       	ldi	r27, 0x00	; 0
     cf0:	e5 e5       	ldi	r30, 0x55	; 85
     cf2:	f0 e0       	ldi	r31, 0x00	; 0
     cf4:	80 81       	ld	r24, Z
     cf6:	8b 7f       	andi	r24, 0xFB	; 251
     cf8:	8c 93       	st	X, r24
     cfa:	0e c0       	rjmp	.+28     	; 0xd18 <EXTI1_voidSetSenseControl+0xc4>
				break;
		case RISING_EDGE:
				SET_BIT(MCUCR, ISC11);
     cfc:	a5 e5       	ldi	r26, 0x55	; 85
     cfe:	b0 e0       	ldi	r27, 0x00	; 0
     d00:	e5 e5       	ldi	r30, 0x55	; 85
     d02:	f0 e0       	ldi	r31, 0x00	; 0
     d04:	80 81       	ld	r24, Z
     d06:	88 60       	ori	r24, 0x08	; 8
     d08:	8c 93       	st	X, r24
				SET_BIT(MCUCR, ISC10);
     d0a:	a5 e5       	ldi	r26, 0x55	; 85
     d0c:	b0 e0       	ldi	r27, 0x00	; 0
     d0e:	e5 e5       	ldi	r30, 0x55	; 85
     d10:	f0 e0       	ldi	r31, 0x00	; 0
     d12:	80 81       	ld	r24, Z
     d14:	84 60       	ori	r24, 0x04	; 4
     d16:	8c 93       	st	X, r24
				break;
		}

}
     d18:	0f 90       	pop	r0
     d1a:	0f 90       	pop	r0
     d1c:	0f 90       	pop	r0
     d1e:	cf 91       	pop	r28
     d20:	df 91       	pop	r29
     d22:	08 95       	ret

00000d24 <EXTI2_voidSetSenseControl>:
//Change Sense control of interrupt 2 during program
void EXTI2_voidSetSenseControl(uint8_t copy_U8SenseControl){
     d24:	df 93       	push	r29
     d26:	cf 93       	push	r28
     d28:	00 d0       	rcall	.+0      	; 0xd2a <EXTI2_voidSetSenseControl+0x6>
     d2a:	0f 92       	push	r0
     d2c:	cd b7       	in	r28, 0x3d	; 61
     d2e:	de b7       	in	r29, 0x3e	; 62
     d30:	89 83       	std	Y+1, r24	; 0x01
	switch (copy_U8SenseControl)
     d32:	89 81       	ldd	r24, Y+1	; 0x01
     d34:	28 2f       	mov	r18, r24
     d36:	30 e0       	ldi	r19, 0x00	; 0
     d38:	3b 83       	std	Y+3, r19	; 0x03
     d3a:	2a 83       	std	Y+2, r18	; 0x02
     d3c:	8a 81       	ldd	r24, Y+2	; 0x02
     d3e:	9b 81       	ldd	r25, Y+3	; 0x03
     d40:	83 30       	cpi	r24, 0x03	; 3
     d42:	91 05       	cpc	r25, r1
     d44:	31 f0       	breq	.+12     	; 0xd52 <EXTI2_voidSetSenseControl+0x2e>
     d46:	2a 81       	ldd	r18, Y+2	; 0x02
     d48:	3b 81       	ldd	r19, Y+3	; 0x03
     d4a:	24 30       	cpi	r18, 0x04	; 4
     d4c:	31 05       	cpc	r19, r1
     d4e:	49 f0       	breq	.+18     	; 0xd62 <EXTI2_voidSetSenseControl+0x3e>
     d50:	0f c0       	rjmp	.+30     	; 0xd70 <EXTI2_voidSetSenseControl+0x4c>
		{

		case FAILING_EDGE:
				CLR_BIT(MCUCSR, ISC2);
     d52:	a4 e5       	ldi	r26, 0x54	; 84
     d54:	b0 e0       	ldi	r27, 0x00	; 0
     d56:	e4 e5       	ldi	r30, 0x54	; 84
     d58:	f0 e0       	ldi	r31, 0x00	; 0
     d5a:	80 81       	ld	r24, Z
     d5c:	8f 7b       	andi	r24, 0xBF	; 191
     d5e:	8c 93       	st	X, r24
     d60:	07 c0       	rjmp	.+14     	; 0xd70 <EXTI2_voidSetSenseControl+0x4c>
				break;
		case RISING_EDGE:
				SET_BIT(MCUCSR, ISC2);
     d62:	a4 e5       	ldi	r26, 0x54	; 84
     d64:	b0 e0       	ldi	r27, 0x00	; 0
     d66:	e4 e5       	ldi	r30, 0x54	; 84
     d68:	f0 e0       	ldi	r31, 0x00	; 0
     d6a:	80 81       	ld	r24, Z
     d6c:	80 64       	ori	r24, 0x40	; 64
     d6e:	8c 93       	st	X, r24
				break;
		}

}
     d70:	0f 90       	pop	r0
     d72:	0f 90       	pop	r0
     d74:	0f 90       	pop	r0
     d76:	cf 91       	pop	r28
     d78:	df 91       	pop	r29
     d7a:	08 95       	ret

00000d7c <EXTI0_voidEnable>:

/**************************************************************************/
/**************************************************************************/
//Enable or disable interrupt 0
void EXTI0_voidEnable(void){
     d7c:	df 93       	push	r29
     d7e:	cf 93       	push	r28
     d80:	cd b7       	in	r28, 0x3d	; 61
     d82:	de b7       	in	r29, 0x3e	; 62

	SET_BIT(GICR, INT0);
     d84:	ab e5       	ldi	r26, 0x5B	; 91
     d86:	b0 e0       	ldi	r27, 0x00	; 0
     d88:	eb e5       	ldi	r30, 0x5B	; 91
     d8a:	f0 e0       	ldi	r31, 0x00	; 0
     d8c:	80 81       	ld	r24, Z
     d8e:	80 64       	ori	r24, 0x40	; 64
     d90:	8c 93       	st	X, r24
}
     d92:	cf 91       	pop	r28
     d94:	df 91       	pop	r29
     d96:	08 95       	ret

00000d98 <EXTI0_voidDisable>:
void EXTI0_voidDisable(void){
     d98:	df 93       	push	r29
     d9a:	cf 93       	push	r28
     d9c:	cd b7       	in	r28, 0x3d	; 61
     d9e:	de b7       	in	r29, 0x3e	; 62

	CLR_BIT(GICR, INT0);
     da0:	ab e5       	ldi	r26, 0x5B	; 91
     da2:	b0 e0       	ldi	r27, 0x00	; 0
     da4:	eb e5       	ldi	r30, 0x5B	; 91
     da6:	f0 e0       	ldi	r31, 0x00	; 0
     da8:	80 81       	ld	r24, Z
     daa:	8f 7b       	andi	r24, 0xBF	; 191
     dac:	8c 93       	st	X, r24
}
     dae:	cf 91       	pop	r28
     db0:	df 91       	pop	r29
     db2:	08 95       	ret

00000db4 <EXTI1_voidEnable>:
/**************************************************************************/
//Enable or disable interrupt 1
void EXTI1_voidEnable(void){
     db4:	df 93       	push	r29
     db6:	cf 93       	push	r28
     db8:	cd b7       	in	r28, 0x3d	; 61
     dba:	de b7       	in	r29, 0x3e	; 62

	SET_BIT(GICR, INT1);
     dbc:	ab e5       	ldi	r26, 0x5B	; 91
     dbe:	b0 e0       	ldi	r27, 0x00	; 0
     dc0:	eb e5       	ldi	r30, 0x5B	; 91
     dc2:	f0 e0       	ldi	r31, 0x00	; 0
     dc4:	80 81       	ld	r24, Z
     dc6:	80 68       	ori	r24, 0x80	; 128
     dc8:	8c 93       	st	X, r24
}
     dca:	cf 91       	pop	r28
     dcc:	df 91       	pop	r29
     dce:	08 95       	ret

00000dd0 <EXTI1_voidDisable>:
void EXTI1_voidDisable(void){
     dd0:	df 93       	push	r29
     dd2:	cf 93       	push	r28
     dd4:	cd b7       	in	r28, 0x3d	; 61
     dd6:	de b7       	in	r29, 0x3e	; 62

	CLR_BIT(GICR, INT1);
     dd8:	ab e5       	ldi	r26, 0x5B	; 91
     dda:	b0 e0       	ldi	r27, 0x00	; 0
     ddc:	eb e5       	ldi	r30, 0x5B	; 91
     dde:	f0 e0       	ldi	r31, 0x00	; 0
     de0:	80 81       	ld	r24, Z
     de2:	8f 77       	andi	r24, 0x7F	; 127
     de4:	8c 93       	st	X, r24
}
     de6:	cf 91       	pop	r28
     de8:	df 91       	pop	r29
     dea:	08 95       	ret

00000dec <EXTI2_voidEnable>:
/**************************************************************************/
//Enable or disable interrupt 2
void EXTI2_voidEnable(void){
     dec:	df 93       	push	r29
     dee:	cf 93       	push	r28
     df0:	cd b7       	in	r28, 0x3d	; 61
     df2:	de b7       	in	r29, 0x3e	; 62

	SET_BIT(GICR, INT2);
     df4:	ab e5       	ldi	r26, 0x5B	; 91
     df6:	b0 e0       	ldi	r27, 0x00	; 0
     df8:	eb e5       	ldi	r30, 0x5B	; 91
     dfa:	f0 e0       	ldi	r31, 0x00	; 0
     dfc:	80 81       	ld	r24, Z
     dfe:	80 62       	ori	r24, 0x20	; 32
     e00:	8c 93       	st	X, r24
}
     e02:	cf 91       	pop	r28
     e04:	df 91       	pop	r29
     e06:	08 95       	ret

00000e08 <EXTI2_voidDisable>:
void EXTI2_voidDisable(void){
     e08:	df 93       	push	r29
     e0a:	cf 93       	push	r28
     e0c:	cd b7       	in	r28, 0x3d	; 61
     e0e:	de b7       	in	r29, 0x3e	; 62

	CLR_BIT(GICR, INT2);
     e10:	ab e5       	ldi	r26, 0x5B	; 91
     e12:	b0 e0       	ldi	r27, 0x00	; 0
     e14:	eb e5       	ldi	r30, 0x5B	; 91
     e16:	f0 e0       	ldi	r31, 0x00	; 0
     e18:	80 81       	ld	r24, Z
     e1a:	8f 7d       	andi	r24, 0xDF	; 223
     e1c:	8c 93       	st	X, r24
}
     e1e:	cf 91       	pop	r28
     e20:	df 91       	pop	r29
     e22:	08 95       	ret

00000e24 <EXTI0_voidSetCallBack>:

/**************************************************************************/
/**************************************************************************/
void EXTI0_voidSetCallBack(void (*copy_PFunc)(void)){
     e24:	df 93       	push	r29
     e26:	cf 93       	push	r28
     e28:	00 d0       	rcall	.+0      	; 0xe2a <EXTI0_voidSetCallBack+0x6>
     e2a:	cd b7       	in	r28, 0x3d	; 61
     e2c:	de b7       	in	r29, 0x3e	; 62
     e2e:	9a 83       	std	Y+2, r25	; 0x02
     e30:	89 83       	std	Y+1, r24	; 0x01

	INT0_PFun = copy_PFunc;
     e32:	89 81       	ldd	r24, Y+1	; 0x01
     e34:	9a 81       	ldd	r25, Y+2	; 0x02
     e36:	90 93 7f 01 	sts	0x017F, r25
     e3a:	80 93 7e 01 	sts	0x017E, r24

}
     e3e:	0f 90       	pop	r0
     e40:	0f 90       	pop	r0
     e42:	cf 91       	pop	r28
     e44:	df 91       	pop	r29
     e46:	08 95       	ret

00000e48 <EXTI1_voidSetCallBack>:
/**************************************************************************/
void EXTI1_voidSetCallBack(void (*copy_PFunc)(void)){
     e48:	df 93       	push	r29
     e4a:	cf 93       	push	r28
     e4c:	00 d0       	rcall	.+0      	; 0xe4e <EXTI1_voidSetCallBack+0x6>
     e4e:	cd b7       	in	r28, 0x3d	; 61
     e50:	de b7       	in	r29, 0x3e	; 62
     e52:	9a 83       	std	Y+2, r25	; 0x02
     e54:	89 83       	std	Y+1, r24	; 0x01

	INT1_PFun = copy_PFunc;
     e56:	89 81       	ldd	r24, Y+1	; 0x01
     e58:	9a 81       	ldd	r25, Y+2	; 0x02
     e5a:	90 93 83 01 	sts	0x0183, r25
     e5e:	80 93 82 01 	sts	0x0182, r24

}
     e62:	0f 90       	pop	r0
     e64:	0f 90       	pop	r0
     e66:	cf 91       	pop	r28
     e68:	df 91       	pop	r29
     e6a:	08 95       	ret

00000e6c <EXTI2_voidSetCallBack>:
/**************************************************************************/
void EXTI2_voidSetCallBack(void (*copy_PFunc)(void)){
     e6c:	df 93       	push	r29
     e6e:	cf 93       	push	r28
     e70:	00 d0       	rcall	.+0      	; 0xe72 <EXTI2_voidSetCallBack+0x6>
     e72:	cd b7       	in	r28, 0x3d	; 61
     e74:	de b7       	in	r29, 0x3e	; 62
     e76:	9a 83       	std	Y+2, r25	; 0x02
     e78:	89 83       	std	Y+1, r24	; 0x01

	INT2_PFun = copy_PFunc;
     e7a:	89 81       	ldd	r24, Y+1	; 0x01
     e7c:	9a 81       	ldd	r25, Y+2	; 0x02
     e7e:	90 93 81 01 	sts	0x0181, r25
     e82:	80 93 80 01 	sts	0x0180, r24

}
     e86:	0f 90       	pop	r0
     e88:	0f 90       	pop	r0
     e8a:	cf 91       	pop	r28
     e8c:	df 91       	pop	r29
     e8e:	08 95       	ret

00000e90 <__vector_1>:
void __vector_3(void) __attribute__((signal)); //ISR for interrupt 2


/**************************************************************************/
/**************************************************************************/
void __vector_1(void){
     e90:	1f 92       	push	r1
     e92:	0f 92       	push	r0
     e94:	0f b6       	in	r0, 0x3f	; 63
     e96:	0f 92       	push	r0
     e98:	11 24       	eor	r1, r1
     e9a:	2f 93       	push	r18
     e9c:	3f 93       	push	r19
     e9e:	4f 93       	push	r20
     ea0:	5f 93       	push	r21
     ea2:	6f 93       	push	r22
     ea4:	7f 93       	push	r23
     ea6:	8f 93       	push	r24
     ea8:	9f 93       	push	r25
     eaa:	af 93       	push	r26
     eac:	bf 93       	push	r27
     eae:	ef 93       	push	r30
     eb0:	ff 93       	push	r31
     eb2:	df 93       	push	r29
     eb4:	cf 93       	push	r28
     eb6:	cd b7       	in	r28, 0x3d	; 61
     eb8:	de b7       	in	r29, 0x3e	; 62

	INT0_PFun();
     eba:	e0 91 7e 01 	lds	r30, 0x017E
     ebe:	f0 91 7f 01 	lds	r31, 0x017F
     ec2:	09 95       	icall
}
     ec4:	cf 91       	pop	r28
     ec6:	df 91       	pop	r29
     ec8:	ff 91       	pop	r31
     eca:	ef 91       	pop	r30
     ecc:	bf 91       	pop	r27
     ece:	af 91       	pop	r26
     ed0:	9f 91       	pop	r25
     ed2:	8f 91       	pop	r24
     ed4:	7f 91       	pop	r23
     ed6:	6f 91       	pop	r22
     ed8:	5f 91       	pop	r21
     eda:	4f 91       	pop	r20
     edc:	3f 91       	pop	r19
     ede:	2f 91       	pop	r18
     ee0:	0f 90       	pop	r0
     ee2:	0f be       	out	0x3f, r0	; 63
     ee4:	0f 90       	pop	r0
     ee6:	1f 90       	pop	r1
     ee8:	18 95       	reti

00000eea <__vector_2>:
/**************************************************************************/
void __vector_2(void){
     eea:	1f 92       	push	r1
     eec:	0f 92       	push	r0
     eee:	0f b6       	in	r0, 0x3f	; 63
     ef0:	0f 92       	push	r0
     ef2:	11 24       	eor	r1, r1
     ef4:	2f 93       	push	r18
     ef6:	3f 93       	push	r19
     ef8:	4f 93       	push	r20
     efa:	5f 93       	push	r21
     efc:	6f 93       	push	r22
     efe:	7f 93       	push	r23
     f00:	8f 93       	push	r24
     f02:	9f 93       	push	r25
     f04:	af 93       	push	r26
     f06:	bf 93       	push	r27
     f08:	ef 93       	push	r30
     f0a:	ff 93       	push	r31
     f0c:	df 93       	push	r29
     f0e:	cf 93       	push	r28
     f10:	cd b7       	in	r28, 0x3d	; 61
     f12:	de b7       	in	r29, 0x3e	; 62

	INT1_PFun();
     f14:	e0 91 82 01 	lds	r30, 0x0182
     f18:	f0 91 83 01 	lds	r31, 0x0183
     f1c:	09 95       	icall
}
     f1e:	cf 91       	pop	r28
     f20:	df 91       	pop	r29
     f22:	ff 91       	pop	r31
     f24:	ef 91       	pop	r30
     f26:	bf 91       	pop	r27
     f28:	af 91       	pop	r26
     f2a:	9f 91       	pop	r25
     f2c:	8f 91       	pop	r24
     f2e:	7f 91       	pop	r23
     f30:	6f 91       	pop	r22
     f32:	5f 91       	pop	r21
     f34:	4f 91       	pop	r20
     f36:	3f 91       	pop	r19
     f38:	2f 91       	pop	r18
     f3a:	0f 90       	pop	r0
     f3c:	0f be       	out	0x3f, r0	; 63
     f3e:	0f 90       	pop	r0
     f40:	1f 90       	pop	r1
     f42:	18 95       	reti

00000f44 <__vector_3>:
/**************************************************************************/
void __vector_3(void){
     f44:	1f 92       	push	r1
     f46:	0f 92       	push	r0
     f48:	0f b6       	in	r0, 0x3f	; 63
     f4a:	0f 92       	push	r0
     f4c:	11 24       	eor	r1, r1
     f4e:	2f 93       	push	r18
     f50:	3f 93       	push	r19
     f52:	4f 93       	push	r20
     f54:	5f 93       	push	r21
     f56:	6f 93       	push	r22
     f58:	7f 93       	push	r23
     f5a:	8f 93       	push	r24
     f5c:	9f 93       	push	r25
     f5e:	af 93       	push	r26
     f60:	bf 93       	push	r27
     f62:	ef 93       	push	r30
     f64:	ff 93       	push	r31
     f66:	df 93       	push	r29
     f68:	cf 93       	push	r28
     f6a:	cd b7       	in	r28, 0x3d	; 61
     f6c:	de b7       	in	r29, 0x3e	; 62

	INT2_PFun();
     f6e:	e0 91 80 01 	lds	r30, 0x0180
     f72:	f0 91 81 01 	lds	r31, 0x0181
     f76:	09 95       	icall
}
     f78:	cf 91       	pop	r28
     f7a:	df 91       	pop	r29
     f7c:	ff 91       	pop	r31
     f7e:	ef 91       	pop	r30
     f80:	bf 91       	pop	r27
     f82:	af 91       	pop	r26
     f84:	9f 91       	pop	r25
     f86:	8f 91       	pop	r24
     f88:	7f 91       	pop	r23
     f8a:	6f 91       	pop	r22
     f8c:	5f 91       	pop	r21
     f8e:	4f 91       	pop	r20
     f90:	3f 91       	pop	r19
     f92:	2f 91       	pop	r18
     f94:	0f 90       	pop	r0
     f96:	0f be       	out	0x3f, r0	; 63
     f98:	0f 90       	pop	r0
     f9a:	1f 90       	pop	r1
     f9c:	18 95       	reti

00000f9e <DIO_U8SetPinDirection>:

#include "DIO_int.h"
#include "DIO_reg.h"

/*Function for the pin direction*/
uint8_t DIO_U8SetPinDirection(uint8_t Copy_U8Port , uint8_t Copy_U8Pin, uint8_t Copy_U8Direction ){
     f9e:	df 93       	push	r29
     fa0:	cf 93       	push	r28
     fa2:	cd b7       	in	r28, 0x3d	; 61
     fa4:	de b7       	in	r29, 0x3e	; 62
     fa6:	2a 97       	sbiw	r28, 0x0a	; 10
     fa8:	0f b6       	in	r0, 0x3f	; 63
     faa:	f8 94       	cli
     fac:	de bf       	out	0x3e, r29	; 62
     fae:	0f be       	out	0x3f, r0	; 63
     fb0:	cd bf       	out	0x3d, r28	; 61
     fb2:	8a 83       	std	Y+2, r24	; 0x02
     fb4:	6b 83       	std	Y+3, r22	; 0x03
     fb6:	4c 83       	std	Y+4, r20	; 0x04
	uint8_t err_status = E_OK;
     fb8:	19 82       	std	Y+1, r1	; 0x01

	switch (Copy_U8Direction)
     fba:	8c 81       	ldd	r24, Y+4	; 0x04
     fbc:	28 2f       	mov	r18, r24
     fbe:	30 e0       	ldi	r19, 0x00	; 0
     fc0:	3a 87       	std	Y+10, r19	; 0x0a
     fc2:	29 87       	std	Y+9, r18	; 0x09
     fc4:	89 85       	ldd	r24, Y+9	; 0x09
     fc6:	9a 85       	ldd	r25, Y+10	; 0x0a
     fc8:	00 97       	sbiw	r24, 0x00	; 0
     fca:	39 f0       	breq	.+14     	; 0xfda <DIO_U8SetPinDirection+0x3c>
     fcc:	29 85       	ldd	r18, Y+9	; 0x09
     fce:	3a 85       	ldd	r19, Y+10	; 0x0a
     fd0:	21 30       	cpi	r18, 0x01	; 1
     fd2:	31 05       	cpc	r19, r1
     fd4:	09 f4       	brne	.+2      	; 0xfd8 <DIO_U8SetPinDirection+0x3a>
     fd6:	78 c0       	rjmp	.+240    	; 0x10c8 <DIO_U8SetPinDirection+0x12a>
     fd8:	e9 c0       	rjmp	.+466    	; 0x11ac <DIO_U8SetPinDirection+0x20e>
	{
		case DIO_INPUT:

			switch (Copy_U8Port)
     fda:	8a 81       	ldd	r24, Y+2	; 0x02
     fdc:	28 2f       	mov	r18, r24
     fde:	30 e0       	ldi	r19, 0x00	; 0
     fe0:	38 87       	std	Y+8, r19	; 0x08
     fe2:	2f 83       	std	Y+7, r18	; 0x07
     fe4:	8f 81       	ldd	r24, Y+7	; 0x07
     fe6:	98 85       	ldd	r25, Y+8	; 0x08
     fe8:	81 30       	cpi	r24, 0x01	; 1
     fea:	91 05       	cpc	r25, r1
     fec:	59 f1       	breq	.+86     	; 0x1044 <DIO_U8SetPinDirection+0xa6>
     fee:	2f 81       	ldd	r18, Y+7	; 0x07
     ff0:	38 85       	ldd	r19, Y+8	; 0x08
     ff2:	22 30       	cpi	r18, 0x02	; 2
     ff4:	31 05       	cpc	r19, r1
     ff6:	2c f4       	brge	.+10     	; 0x1002 <DIO_U8SetPinDirection+0x64>
     ff8:	8f 81       	ldd	r24, Y+7	; 0x07
     ffa:	98 85       	ldd	r25, Y+8	; 0x08
     ffc:	00 97       	sbiw	r24, 0x00	; 0
     ffe:	69 f0       	breq	.+26     	; 0x101a <DIO_U8SetPinDirection+0x7c>
    1000:	60 c0       	rjmp	.+192    	; 0x10c2 <DIO_U8SetPinDirection+0x124>
    1002:	2f 81       	ldd	r18, Y+7	; 0x07
    1004:	38 85       	ldd	r19, Y+8	; 0x08
    1006:	22 30       	cpi	r18, 0x02	; 2
    1008:	31 05       	cpc	r19, r1
    100a:	89 f1       	breq	.+98     	; 0x106e <DIO_U8SetPinDirection+0xd0>
    100c:	8f 81       	ldd	r24, Y+7	; 0x07
    100e:	98 85       	ldd	r25, Y+8	; 0x08
    1010:	83 30       	cpi	r24, 0x03	; 3
    1012:	91 05       	cpc	r25, r1
    1014:	09 f4       	brne	.+2      	; 0x1018 <DIO_U8SetPinDirection+0x7a>
    1016:	40 c0       	rjmp	.+128    	; 0x1098 <DIO_U8SetPinDirection+0xfa>
    1018:	54 c0       	rjmp	.+168    	; 0x10c2 <DIO_U8SetPinDirection+0x124>
			{
				case DIO_PORTA:
					CLR_BIT (DDRA, Copy_U8Pin);
    101a:	aa e3       	ldi	r26, 0x3A	; 58
    101c:	b0 e0       	ldi	r27, 0x00	; 0
    101e:	ea e3       	ldi	r30, 0x3A	; 58
    1020:	f0 e0       	ldi	r31, 0x00	; 0
    1022:	80 81       	ld	r24, Z
    1024:	48 2f       	mov	r20, r24
    1026:	8b 81       	ldd	r24, Y+3	; 0x03
    1028:	28 2f       	mov	r18, r24
    102a:	30 e0       	ldi	r19, 0x00	; 0
    102c:	81 e0       	ldi	r24, 0x01	; 1
    102e:	90 e0       	ldi	r25, 0x00	; 0
    1030:	02 2e       	mov	r0, r18
    1032:	02 c0       	rjmp	.+4      	; 0x1038 <DIO_U8SetPinDirection+0x9a>
    1034:	88 0f       	add	r24, r24
    1036:	99 1f       	adc	r25, r25
    1038:	0a 94       	dec	r0
    103a:	e2 f7       	brpl	.-8      	; 0x1034 <DIO_U8SetPinDirection+0x96>
    103c:	80 95       	com	r24
    103e:	84 23       	and	r24, r20
    1040:	8c 93       	st	X, r24
    1042:	b6 c0       	rjmp	.+364    	; 0x11b0 <DIO_U8SetPinDirection+0x212>
					break;
				case DIO_PORTB:
					CLR_BIT (DDRB, Copy_U8Pin);
    1044:	a7 e3       	ldi	r26, 0x37	; 55
    1046:	b0 e0       	ldi	r27, 0x00	; 0
    1048:	e7 e3       	ldi	r30, 0x37	; 55
    104a:	f0 e0       	ldi	r31, 0x00	; 0
    104c:	80 81       	ld	r24, Z
    104e:	48 2f       	mov	r20, r24
    1050:	8b 81       	ldd	r24, Y+3	; 0x03
    1052:	28 2f       	mov	r18, r24
    1054:	30 e0       	ldi	r19, 0x00	; 0
    1056:	81 e0       	ldi	r24, 0x01	; 1
    1058:	90 e0       	ldi	r25, 0x00	; 0
    105a:	02 2e       	mov	r0, r18
    105c:	02 c0       	rjmp	.+4      	; 0x1062 <DIO_U8SetPinDirection+0xc4>
    105e:	88 0f       	add	r24, r24
    1060:	99 1f       	adc	r25, r25
    1062:	0a 94       	dec	r0
    1064:	e2 f7       	brpl	.-8      	; 0x105e <DIO_U8SetPinDirection+0xc0>
    1066:	80 95       	com	r24
    1068:	84 23       	and	r24, r20
    106a:	8c 93       	st	X, r24
    106c:	a1 c0       	rjmp	.+322    	; 0x11b0 <DIO_U8SetPinDirection+0x212>
					break;
				case DIO_PORTC:
					CLR_BIT (DDRC, Copy_U8Pin);
    106e:	a4 e3       	ldi	r26, 0x34	; 52
    1070:	b0 e0       	ldi	r27, 0x00	; 0
    1072:	e4 e3       	ldi	r30, 0x34	; 52
    1074:	f0 e0       	ldi	r31, 0x00	; 0
    1076:	80 81       	ld	r24, Z
    1078:	48 2f       	mov	r20, r24
    107a:	8b 81       	ldd	r24, Y+3	; 0x03
    107c:	28 2f       	mov	r18, r24
    107e:	30 e0       	ldi	r19, 0x00	; 0
    1080:	81 e0       	ldi	r24, 0x01	; 1
    1082:	90 e0       	ldi	r25, 0x00	; 0
    1084:	02 2e       	mov	r0, r18
    1086:	02 c0       	rjmp	.+4      	; 0x108c <DIO_U8SetPinDirection+0xee>
    1088:	88 0f       	add	r24, r24
    108a:	99 1f       	adc	r25, r25
    108c:	0a 94       	dec	r0
    108e:	e2 f7       	brpl	.-8      	; 0x1088 <DIO_U8SetPinDirection+0xea>
    1090:	80 95       	com	r24
    1092:	84 23       	and	r24, r20
    1094:	8c 93       	st	X, r24
    1096:	8c c0       	rjmp	.+280    	; 0x11b0 <DIO_U8SetPinDirection+0x212>
					break;
				case DIO_PORTD:
					CLR_BIT (DDRD, Copy_U8Pin);
    1098:	a1 e3       	ldi	r26, 0x31	; 49
    109a:	b0 e0       	ldi	r27, 0x00	; 0
    109c:	e1 e3       	ldi	r30, 0x31	; 49
    109e:	f0 e0       	ldi	r31, 0x00	; 0
    10a0:	80 81       	ld	r24, Z
    10a2:	48 2f       	mov	r20, r24
    10a4:	8b 81       	ldd	r24, Y+3	; 0x03
    10a6:	28 2f       	mov	r18, r24
    10a8:	30 e0       	ldi	r19, 0x00	; 0
    10aa:	81 e0       	ldi	r24, 0x01	; 1
    10ac:	90 e0       	ldi	r25, 0x00	; 0
    10ae:	02 2e       	mov	r0, r18
    10b0:	02 c0       	rjmp	.+4      	; 0x10b6 <DIO_U8SetPinDirection+0x118>
    10b2:	88 0f       	add	r24, r24
    10b4:	99 1f       	adc	r25, r25
    10b6:	0a 94       	dec	r0
    10b8:	e2 f7       	brpl	.-8      	; 0x10b2 <DIO_U8SetPinDirection+0x114>
    10ba:	80 95       	com	r24
    10bc:	84 23       	and	r24, r20
    10be:	8c 93       	st	X, r24
    10c0:	77 c0       	rjmp	.+238    	; 0x11b0 <DIO_U8SetPinDirection+0x212>
					break;
				default : err_status = E_NOK;
    10c2:	81 e0       	ldi	r24, 0x01	; 1
    10c4:	89 83       	std	Y+1, r24	; 0x01
    10c6:	74 c0       	rjmp	.+232    	; 0x11b0 <DIO_U8SetPinDirection+0x212>
			}
			break;

		case DIO_OUTPUT:
			switch (Copy_U8Port)
    10c8:	8a 81       	ldd	r24, Y+2	; 0x02
    10ca:	28 2f       	mov	r18, r24
    10cc:	30 e0       	ldi	r19, 0x00	; 0
    10ce:	3e 83       	std	Y+6, r19	; 0x06
    10d0:	2d 83       	std	Y+5, r18	; 0x05
    10d2:	8d 81       	ldd	r24, Y+5	; 0x05
    10d4:	9e 81       	ldd	r25, Y+6	; 0x06
    10d6:	81 30       	cpi	r24, 0x01	; 1
    10d8:	91 05       	cpc	r25, r1
    10da:	49 f1       	breq	.+82     	; 0x112e <DIO_U8SetPinDirection+0x190>
    10dc:	2d 81       	ldd	r18, Y+5	; 0x05
    10de:	3e 81       	ldd	r19, Y+6	; 0x06
    10e0:	22 30       	cpi	r18, 0x02	; 2
    10e2:	31 05       	cpc	r19, r1
    10e4:	2c f4       	brge	.+10     	; 0x10f0 <DIO_U8SetPinDirection+0x152>
    10e6:	8d 81       	ldd	r24, Y+5	; 0x05
    10e8:	9e 81       	ldd	r25, Y+6	; 0x06
    10ea:	00 97       	sbiw	r24, 0x00	; 0
    10ec:	61 f0       	breq	.+24     	; 0x1106 <DIO_U8SetPinDirection+0x168>
    10ee:	5b c0       	rjmp	.+182    	; 0x11a6 <DIO_U8SetPinDirection+0x208>
    10f0:	2d 81       	ldd	r18, Y+5	; 0x05
    10f2:	3e 81       	ldd	r19, Y+6	; 0x06
    10f4:	22 30       	cpi	r18, 0x02	; 2
    10f6:	31 05       	cpc	r19, r1
    10f8:	71 f1       	breq	.+92     	; 0x1156 <DIO_U8SetPinDirection+0x1b8>
    10fa:	8d 81       	ldd	r24, Y+5	; 0x05
    10fc:	9e 81       	ldd	r25, Y+6	; 0x06
    10fe:	83 30       	cpi	r24, 0x03	; 3
    1100:	91 05       	cpc	r25, r1
    1102:	e9 f1       	breq	.+122    	; 0x117e <DIO_U8SetPinDirection+0x1e0>
    1104:	50 c0       	rjmp	.+160    	; 0x11a6 <DIO_U8SetPinDirection+0x208>
			{
					case DIO_PORTA:
						SET_BIT (DDRA, Copy_U8Pin);
    1106:	aa e3       	ldi	r26, 0x3A	; 58
    1108:	b0 e0       	ldi	r27, 0x00	; 0
    110a:	ea e3       	ldi	r30, 0x3A	; 58
    110c:	f0 e0       	ldi	r31, 0x00	; 0
    110e:	80 81       	ld	r24, Z
    1110:	48 2f       	mov	r20, r24
    1112:	8b 81       	ldd	r24, Y+3	; 0x03
    1114:	28 2f       	mov	r18, r24
    1116:	30 e0       	ldi	r19, 0x00	; 0
    1118:	81 e0       	ldi	r24, 0x01	; 1
    111a:	90 e0       	ldi	r25, 0x00	; 0
    111c:	02 2e       	mov	r0, r18
    111e:	02 c0       	rjmp	.+4      	; 0x1124 <DIO_U8SetPinDirection+0x186>
    1120:	88 0f       	add	r24, r24
    1122:	99 1f       	adc	r25, r25
    1124:	0a 94       	dec	r0
    1126:	e2 f7       	brpl	.-8      	; 0x1120 <DIO_U8SetPinDirection+0x182>
    1128:	84 2b       	or	r24, r20
    112a:	8c 93       	st	X, r24
    112c:	41 c0       	rjmp	.+130    	; 0x11b0 <DIO_U8SetPinDirection+0x212>
						break;
					case DIO_PORTB:
						SET_BIT (DDRB, Copy_U8Pin);
    112e:	a7 e3       	ldi	r26, 0x37	; 55
    1130:	b0 e0       	ldi	r27, 0x00	; 0
    1132:	e7 e3       	ldi	r30, 0x37	; 55
    1134:	f0 e0       	ldi	r31, 0x00	; 0
    1136:	80 81       	ld	r24, Z
    1138:	48 2f       	mov	r20, r24
    113a:	8b 81       	ldd	r24, Y+3	; 0x03
    113c:	28 2f       	mov	r18, r24
    113e:	30 e0       	ldi	r19, 0x00	; 0
    1140:	81 e0       	ldi	r24, 0x01	; 1
    1142:	90 e0       	ldi	r25, 0x00	; 0
    1144:	02 2e       	mov	r0, r18
    1146:	02 c0       	rjmp	.+4      	; 0x114c <DIO_U8SetPinDirection+0x1ae>
    1148:	88 0f       	add	r24, r24
    114a:	99 1f       	adc	r25, r25
    114c:	0a 94       	dec	r0
    114e:	e2 f7       	brpl	.-8      	; 0x1148 <DIO_U8SetPinDirection+0x1aa>
    1150:	84 2b       	or	r24, r20
    1152:	8c 93       	st	X, r24
    1154:	2d c0       	rjmp	.+90     	; 0x11b0 <DIO_U8SetPinDirection+0x212>
						break;
					case DIO_PORTC:
						SET_BIT (DDRC, Copy_U8Pin);
    1156:	a4 e3       	ldi	r26, 0x34	; 52
    1158:	b0 e0       	ldi	r27, 0x00	; 0
    115a:	e4 e3       	ldi	r30, 0x34	; 52
    115c:	f0 e0       	ldi	r31, 0x00	; 0
    115e:	80 81       	ld	r24, Z
    1160:	48 2f       	mov	r20, r24
    1162:	8b 81       	ldd	r24, Y+3	; 0x03
    1164:	28 2f       	mov	r18, r24
    1166:	30 e0       	ldi	r19, 0x00	; 0
    1168:	81 e0       	ldi	r24, 0x01	; 1
    116a:	90 e0       	ldi	r25, 0x00	; 0
    116c:	02 2e       	mov	r0, r18
    116e:	02 c0       	rjmp	.+4      	; 0x1174 <DIO_U8SetPinDirection+0x1d6>
    1170:	88 0f       	add	r24, r24
    1172:	99 1f       	adc	r25, r25
    1174:	0a 94       	dec	r0
    1176:	e2 f7       	brpl	.-8      	; 0x1170 <DIO_U8SetPinDirection+0x1d2>
    1178:	84 2b       	or	r24, r20
    117a:	8c 93       	st	X, r24
    117c:	19 c0       	rjmp	.+50     	; 0x11b0 <DIO_U8SetPinDirection+0x212>
						break;
					case DIO_PORTD:
						SET_BIT (DDRD, Copy_U8Pin);
    117e:	a1 e3       	ldi	r26, 0x31	; 49
    1180:	b0 e0       	ldi	r27, 0x00	; 0
    1182:	e1 e3       	ldi	r30, 0x31	; 49
    1184:	f0 e0       	ldi	r31, 0x00	; 0
    1186:	80 81       	ld	r24, Z
    1188:	48 2f       	mov	r20, r24
    118a:	8b 81       	ldd	r24, Y+3	; 0x03
    118c:	28 2f       	mov	r18, r24
    118e:	30 e0       	ldi	r19, 0x00	; 0
    1190:	81 e0       	ldi	r24, 0x01	; 1
    1192:	90 e0       	ldi	r25, 0x00	; 0
    1194:	02 2e       	mov	r0, r18
    1196:	02 c0       	rjmp	.+4      	; 0x119c <DIO_U8SetPinDirection+0x1fe>
    1198:	88 0f       	add	r24, r24
    119a:	99 1f       	adc	r25, r25
    119c:	0a 94       	dec	r0
    119e:	e2 f7       	brpl	.-8      	; 0x1198 <DIO_U8SetPinDirection+0x1fa>
    11a0:	84 2b       	or	r24, r20
    11a2:	8c 93       	st	X, r24
    11a4:	05 c0       	rjmp	.+10     	; 0x11b0 <DIO_U8SetPinDirection+0x212>
						break;
					default : err_status = E_NOK;
    11a6:	81 e0       	ldi	r24, 0x01	; 1
    11a8:	89 83       	std	Y+1, r24	; 0x01
    11aa:	02 c0       	rjmp	.+4      	; 0x11b0 <DIO_U8SetPinDirection+0x212>
			}
			break;
		default : err_status = E_NOK;
    11ac:	81 e0       	ldi	r24, 0x01	; 1
    11ae:	89 83       	std	Y+1, r24	; 0x01
	}
	return err_status;
    11b0:	89 81       	ldd	r24, Y+1	; 0x01
}
    11b2:	2a 96       	adiw	r28, 0x0a	; 10
    11b4:	0f b6       	in	r0, 0x3f	; 63
    11b6:	f8 94       	cli
    11b8:	de bf       	out	0x3e, r29	; 62
    11ba:	0f be       	out	0x3f, r0	; 63
    11bc:	cd bf       	out	0x3d, r28	; 61
    11be:	cf 91       	pop	r28
    11c0:	df 91       	pop	r29
    11c2:	08 95       	ret

000011c4 <DIO_U8SetPinValue>:

/*Function for value*/
uint8_t DIO_U8SetPinValue(uint8_t Copy_U8Port , uint8_t Copy_U8Pin, uint8_t Copy_U8Value ){
    11c4:	df 93       	push	r29
    11c6:	cf 93       	push	r28
    11c8:	cd b7       	in	r28, 0x3d	; 61
    11ca:	de b7       	in	r29, 0x3e	; 62
    11cc:	2a 97       	sbiw	r28, 0x0a	; 10
    11ce:	0f b6       	in	r0, 0x3f	; 63
    11d0:	f8 94       	cli
    11d2:	de bf       	out	0x3e, r29	; 62
    11d4:	0f be       	out	0x3f, r0	; 63
    11d6:	cd bf       	out	0x3d, r28	; 61
    11d8:	8a 83       	std	Y+2, r24	; 0x02
    11da:	6b 83       	std	Y+3, r22	; 0x03
    11dc:	4c 83       	std	Y+4, r20	; 0x04
	uint8_t err_status = E_OK;
    11de:	19 82       	std	Y+1, r1	; 0x01
	switch (Copy_U8Value)
    11e0:	8c 81       	ldd	r24, Y+4	; 0x04
    11e2:	28 2f       	mov	r18, r24
    11e4:	30 e0       	ldi	r19, 0x00	; 0
    11e6:	3a 87       	std	Y+10, r19	; 0x0a
    11e8:	29 87       	std	Y+9, r18	; 0x09
    11ea:	89 85       	ldd	r24, Y+9	; 0x09
    11ec:	9a 85       	ldd	r25, Y+10	; 0x0a
    11ee:	00 97       	sbiw	r24, 0x00	; 0
    11f0:	39 f0       	breq	.+14     	; 0x1200 <DIO_U8SetPinValue+0x3c>
    11f2:	29 85       	ldd	r18, Y+9	; 0x09
    11f4:	3a 85       	ldd	r19, Y+10	; 0x0a
    11f6:	21 30       	cpi	r18, 0x01	; 1
    11f8:	31 05       	cpc	r19, r1
    11fa:	09 f4       	brne	.+2      	; 0x11fe <DIO_U8SetPinValue+0x3a>
    11fc:	78 c0       	rjmp	.+240    	; 0x12ee <DIO_U8SetPinValue+0x12a>
    11fe:	e9 c0       	rjmp	.+466    	; 0x13d2 <DIO_U8SetPinValue+0x20e>
		{
			case DIO_LOW:

				switch (Copy_U8Port)
    1200:	8a 81       	ldd	r24, Y+2	; 0x02
    1202:	28 2f       	mov	r18, r24
    1204:	30 e0       	ldi	r19, 0x00	; 0
    1206:	38 87       	std	Y+8, r19	; 0x08
    1208:	2f 83       	std	Y+7, r18	; 0x07
    120a:	8f 81       	ldd	r24, Y+7	; 0x07
    120c:	98 85       	ldd	r25, Y+8	; 0x08
    120e:	81 30       	cpi	r24, 0x01	; 1
    1210:	91 05       	cpc	r25, r1
    1212:	59 f1       	breq	.+86     	; 0x126a <DIO_U8SetPinValue+0xa6>
    1214:	2f 81       	ldd	r18, Y+7	; 0x07
    1216:	38 85       	ldd	r19, Y+8	; 0x08
    1218:	22 30       	cpi	r18, 0x02	; 2
    121a:	31 05       	cpc	r19, r1
    121c:	2c f4       	brge	.+10     	; 0x1228 <DIO_U8SetPinValue+0x64>
    121e:	8f 81       	ldd	r24, Y+7	; 0x07
    1220:	98 85       	ldd	r25, Y+8	; 0x08
    1222:	00 97       	sbiw	r24, 0x00	; 0
    1224:	69 f0       	breq	.+26     	; 0x1240 <DIO_U8SetPinValue+0x7c>
    1226:	60 c0       	rjmp	.+192    	; 0x12e8 <DIO_U8SetPinValue+0x124>
    1228:	2f 81       	ldd	r18, Y+7	; 0x07
    122a:	38 85       	ldd	r19, Y+8	; 0x08
    122c:	22 30       	cpi	r18, 0x02	; 2
    122e:	31 05       	cpc	r19, r1
    1230:	89 f1       	breq	.+98     	; 0x1294 <DIO_U8SetPinValue+0xd0>
    1232:	8f 81       	ldd	r24, Y+7	; 0x07
    1234:	98 85       	ldd	r25, Y+8	; 0x08
    1236:	83 30       	cpi	r24, 0x03	; 3
    1238:	91 05       	cpc	r25, r1
    123a:	09 f4       	brne	.+2      	; 0x123e <DIO_U8SetPinValue+0x7a>
    123c:	40 c0       	rjmp	.+128    	; 0x12be <DIO_U8SetPinValue+0xfa>
    123e:	54 c0       	rjmp	.+168    	; 0x12e8 <DIO_U8SetPinValue+0x124>
				{
					case DIO_PORTA:
						CLR_BIT (PORTA, Copy_U8Pin);
    1240:	ab e3       	ldi	r26, 0x3B	; 59
    1242:	b0 e0       	ldi	r27, 0x00	; 0
    1244:	eb e3       	ldi	r30, 0x3B	; 59
    1246:	f0 e0       	ldi	r31, 0x00	; 0
    1248:	80 81       	ld	r24, Z
    124a:	48 2f       	mov	r20, r24
    124c:	8b 81       	ldd	r24, Y+3	; 0x03
    124e:	28 2f       	mov	r18, r24
    1250:	30 e0       	ldi	r19, 0x00	; 0
    1252:	81 e0       	ldi	r24, 0x01	; 1
    1254:	90 e0       	ldi	r25, 0x00	; 0
    1256:	02 2e       	mov	r0, r18
    1258:	02 c0       	rjmp	.+4      	; 0x125e <DIO_U8SetPinValue+0x9a>
    125a:	88 0f       	add	r24, r24
    125c:	99 1f       	adc	r25, r25
    125e:	0a 94       	dec	r0
    1260:	e2 f7       	brpl	.-8      	; 0x125a <DIO_U8SetPinValue+0x96>
    1262:	80 95       	com	r24
    1264:	84 23       	and	r24, r20
    1266:	8c 93       	st	X, r24
    1268:	b6 c0       	rjmp	.+364    	; 0x13d6 <DIO_U8SetPinValue+0x212>
						break;
					case DIO_PORTB:
						CLR_BIT (PORTB, Copy_U8Pin);
    126a:	a8 e3       	ldi	r26, 0x38	; 56
    126c:	b0 e0       	ldi	r27, 0x00	; 0
    126e:	e8 e3       	ldi	r30, 0x38	; 56
    1270:	f0 e0       	ldi	r31, 0x00	; 0
    1272:	80 81       	ld	r24, Z
    1274:	48 2f       	mov	r20, r24
    1276:	8b 81       	ldd	r24, Y+3	; 0x03
    1278:	28 2f       	mov	r18, r24
    127a:	30 e0       	ldi	r19, 0x00	; 0
    127c:	81 e0       	ldi	r24, 0x01	; 1
    127e:	90 e0       	ldi	r25, 0x00	; 0
    1280:	02 2e       	mov	r0, r18
    1282:	02 c0       	rjmp	.+4      	; 0x1288 <DIO_U8SetPinValue+0xc4>
    1284:	88 0f       	add	r24, r24
    1286:	99 1f       	adc	r25, r25
    1288:	0a 94       	dec	r0
    128a:	e2 f7       	brpl	.-8      	; 0x1284 <DIO_U8SetPinValue+0xc0>
    128c:	80 95       	com	r24
    128e:	84 23       	and	r24, r20
    1290:	8c 93       	st	X, r24
    1292:	a1 c0       	rjmp	.+322    	; 0x13d6 <DIO_U8SetPinValue+0x212>
						break;
					case DIO_PORTC:
						CLR_BIT (PORTC, Copy_U8Pin);
    1294:	a5 e3       	ldi	r26, 0x35	; 53
    1296:	b0 e0       	ldi	r27, 0x00	; 0
    1298:	e5 e3       	ldi	r30, 0x35	; 53
    129a:	f0 e0       	ldi	r31, 0x00	; 0
    129c:	80 81       	ld	r24, Z
    129e:	48 2f       	mov	r20, r24
    12a0:	8b 81       	ldd	r24, Y+3	; 0x03
    12a2:	28 2f       	mov	r18, r24
    12a4:	30 e0       	ldi	r19, 0x00	; 0
    12a6:	81 e0       	ldi	r24, 0x01	; 1
    12a8:	90 e0       	ldi	r25, 0x00	; 0
    12aa:	02 2e       	mov	r0, r18
    12ac:	02 c0       	rjmp	.+4      	; 0x12b2 <DIO_U8SetPinValue+0xee>
    12ae:	88 0f       	add	r24, r24
    12b0:	99 1f       	adc	r25, r25
    12b2:	0a 94       	dec	r0
    12b4:	e2 f7       	brpl	.-8      	; 0x12ae <DIO_U8SetPinValue+0xea>
    12b6:	80 95       	com	r24
    12b8:	84 23       	and	r24, r20
    12ba:	8c 93       	st	X, r24
    12bc:	8c c0       	rjmp	.+280    	; 0x13d6 <DIO_U8SetPinValue+0x212>
						break;
					case DIO_PORTD:
						CLR_BIT (PORTD, Copy_U8Pin);
    12be:	a2 e3       	ldi	r26, 0x32	; 50
    12c0:	b0 e0       	ldi	r27, 0x00	; 0
    12c2:	e2 e3       	ldi	r30, 0x32	; 50
    12c4:	f0 e0       	ldi	r31, 0x00	; 0
    12c6:	80 81       	ld	r24, Z
    12c8:	48 2f       	mov	r20, r24
    12ca:	8b 81       	ldd	r24, Y+3	; 0x03
    12cc:	28 2f       	mov	r18, r24
    12ce:	30 e0       	ldi	r19, 0x00	; 0
    12d0:	81 e0       	ldi	r24, 0x01	; 1
    12d2:	90 e0       	ldi	r25, 0x00	; 0
    12d4:	02 2e       	mov	r0, r18
    12d6:	02 c0       	rjmp	.+4      	; 0x12dc <DIO_U8SetPinValue+0x118>
    12d8:	88 0f       	add	r24, r24
    12da:	99 1f       	adc	r25, r25
    12dc:	0a 94       	dec	r0
    12de:	e2 f7       	brpl	.-8      	; 0x12d8 <DIO_U8SetPinValue+0x114>
    12e0:	80 95       	com	r24
    12e2:	84 23       	and	r24, r20
    12e4:	8c 93       	st	X, r24
    12e6:	77 c0       	rjmp	.+238    	; 0x13d6 <DIO_U8SetPinValue+0x212>
						break;
					default : err_status = E_NOK;
    12e8:	81 e0       	ldi	r24, 0x01	; 1
    12ea:	89 83       	std	Y+1, r24	; 0x01
    12ec:	74 c0       	rjmp	.+232    	; 0x13d6 <DIO_U8SetPinValue+0x212>
				}
				break;

			case DIO_HIGH:
				switch (Copy_U8Port)
    12ee:	8a 81       	ldd	r24, Y+2	; 0x02
    12f0:	28 2f       	mov	r18, r24
    12f2:	30 e0       	ldi	r19, 0x00	; 0
    12f4:	3e 83       	std	Y+6, r19	; 0x06
    12f6:	2d 83       	std	Y+5, r18	; 0x05
    12f8:	8d 81       	ldd	r24, Y+5	; 0x05
    12fa:	9e 81       	ldd	r25, Y+6	; 0x06
    12fc:	81 30       	cpi	r24, 0x01	; 1
    12fe:	91 05       	cpc	r25, r1
    1300:	49 f1       	breq	.+82     	; 0x1354 <DIO_U8SetPinValue+0x190>
    1302:	2d 81       	ldd	r18, Y+5	; 0x05
    1304:	3e 81       	ldd	r19, Y+6	; 0x06
    1306:	22 30       	cpi	r18, 0x02	; 2
    1308:	31 05       	cpc	r19, r1
    130a:	2c f4       	brge	.+10     	; 0x1316 <DIO_U8SetPinValue+0x152>
    130c:	8d 81       	ldd	r24, Y+5	; 0x05
    130e:	9e 81       	ldd	r25, Y+6	; 0x06
    1310:	00 97       	sbiw	r24, 0x00	; 0
    1312:	61 f0       	breq	.+24     	; 0x132c <DIO_U8SetPinValue+0x168>
    1314:	5b c0       	rjmp	.+182    	; 0x13cc <DIO_U8SetPinValue+0x208>
    1316:	2d 81       	ldd	r18, Y+5	; 0x05
    1318:	3e 81       	ldd	r19, Y+6	; 0x06
    131a:	22 30       	cpi	r18, 0x02	; 2
    131c:	31 05       	cpc	r19, r1
    131e:	71 f1       	breq	.+92     	; 0x137c <DIO_U8SetPinValue+0x1b8>
    1320:	8d 81       	ldd	r24, Y+5	; 0x05
    1322:	9e 81       	ldd	r25, Y+6	; 0x06
    1324:	83 30       	cpi	r24, 0x03	; 3
    1326:	91 05       	cpc	r25, r1
    1328:	e9 f1       	breq	.+122    	; 0x13a4 <DIO_U8SetPinValue+0x1e0>
    132a:	50 c0       	rjmp	.+160    	; 0x13cc <DIO_U8SetPinValue+0x208>
				{
						case DIO_PORTA:
							SET_BIT (PORTA, Copy_U8Pin);
    132c:	ab e3       	ldi	r26, 0x3B	; 59
    132e:	b0 e0       	ldi	r27, 0x00	; 0
    1330:	eb e3       	ldi	r30, 0x3B	; 59
    1332:	f0 e0       	ldi	r31, 0x00	; 0
    1334:	80 81       	ld	r24, Z
    1336:	48 2f       	mov	r20, r24
    1338:	8b 81       	ldd	r24, Y+3	; 0x03
    133a:	28 2f       	mov	r18, r24
    133c:	30 e0       	ldi	r19, 0x00	; 0
    133e:	81 e0       	ldi	r24, 0x01	; 1
    1340:	90 e0       	ldi	r25, 0x00	; 0
    1342:	02 2e       	mov	r0, r18
    1344:	02 c0       	rjmp	.+4      	; 0x134a <DIO_U8SetPinValue+0x186>
    1346:	88 0f       	add	r24, r24
    1348:	99 1f       	adc	r25, r25
    134a:	0a 94       	dec	r0
    134c:	e2 f7       	brpl	.-8      	; 0x1346 <DIO_U8SetPinValue+0x182>
    134e:	84 2b       	or	r24, r20
    1350:	8c 93       	st	X, r24
    1352:	41 c0       	rjmp	.+130    	; 0x13d6 <DIO_U8SetPinValue+0x212>
							break;
						case DIO_PORTB:
							SET_BIT (PORTB, Copy_U8Pin);
    1354:	a8 e3       	ldi	r26, 0x38	; 56
    1356:	b0 e0       	ldi	r27, 0x00	; 0
    1358:	e8 e3       	ldi	r30, 0x38	; 56
    135a:	f0 e0       	ldi	r31, 0x00	; 0
    135c:	80 81       	ld	r24, Z
    135e:	48 2f       	mov	r20, r24
    1360:	8b 81       	ldd	r24, Y+3	; 0x03
    1362:	28 2f       	mov	r18, r24
    1364:	30 e0       	ldi	r19, 0x00	; 0
    1366:	81 e0       	ldi	r24, 0x01	; 1
    1368:	90 e0       	ldi	r25, 0x00	; 0
    136a:	02 2e       	mov	r0, r18
    136c:	02 c0       	rjmp	.+4      	; 0x1372 <DIO_U8SetPinValue+0x1ae>
    136e:	88 0f       	add	r24, r24
    1370:	99 1f       	adc	r25, r25
    1372:	0a 94       	dec	r0
    1374:	e2 f7       	brpl	.-8      	; 0x136e <DIO_U8SetPinValue+0x1aa>
    1376:	84 2b       	or	r24, r20
    1378:	8c 93       	st	X, r24
    137a:	2d c0       	rjmp	.+90     	; 0x13d6 <DIO_U8SetPinValue+0x212>
							break;
						case DIO_PORTC:
							SET_BIT (PORTC, Copy_U8Pin);
    137c:	a5 e3       	ldi	r26, 0x35	; 53
    137e:	b0 e0       	ldi	r27, 0x00	; 0
    1380:	e5 e3       	ldi	r30, 0x35	; 53
    1382:	f0 e0       	ldi	r31, 0x00	; 0
    1384:	80 81       	ld	r24, Z
    1386:	48 2f       	mov	r20, r24
    1388:	8b 81       	ldd	r24, Y+3	; 0x03
    138a:	28 2f       	mov	r18, r24
    138c:	30 e0       	ldi	r19, 0x00	; 0
    138e:	81 e0       	ldi	r24, 0x01	; 1
    1390:	90 e0       	ldi	r25, 0x00	; 0
    1392:	02 2e       	mov	r0, r18
    1394:	02 c0       	rjmp	.+4      	; 0x139a <DIO_U8SetPinValue+0x1d6>
    1396:	88 0f       	add	r24, r24
    1398:	99 1f       	adc	r25, r25
    139a:	0a 94       	dec	r0
    139c:	e2 f7       	brpl	.-8      	; 0x1396 <DIO_U8SetPinValue+0x1d2>
    139e:	84 2b       	or	r24, r20
    13a0:	8c 93       	st	X, r24
    13a2:	19 c0       	rjmp	.+50     	; 0x13d6 <DIO_U8SetPinValue+0x212>
							break;
						case DIO_PORTD:
							SET_BIT (PORTD, Copy_U8Pin);
    13a4:	a2 e3       	ldi	r26, 0x32	; 50
    13a6:	b0 e0       	ldi	r27, 0x00	; 0
    13a8:	e2 e3       	ldi	r30, 0x32	; 50
    13aa:	f0 e0       	ldi	r31, 0x00	; 0
    13ac:	80 81       	ld	r24, Z
    13ae:	48 2f       	mov	r20, r24
    13b0:	8b 81       	ldd	r24, Y+3	; 0x03
    13b2:	28 2f       	mov	r18, r24
    13b4:	30 e0       	ldi	r19, 0x00	; 0
    13b6:	81 e0       	ldi	r24, 0x01	; 1
    13b8:	90 e0       	ldi	r25, 0x00	; 0
    13ba:	02 2e       	mov	r0, r18
    13bc:	02 c0       	rjmp	.+4      	; 0x13c2 <DIO_U8SetPinValue+0x1fe>
    13be:	88 0f       	add	r24, r24
    13c0:	99 1f       	adc	r25, r25
    13c2:	0a 94       	dec	r0
    13c4:	e2 f7       	brpl	.-8      	; 0x13be <DIO_U8SetPinValue+0x1fa>
    13c6:	84 2b       	or	r24, r20
    13c8:	8c 93       	st	X, r24
    13ca:	05 c0       	rjmp	.+10     	; 0x13d6 <DIO_U8SetPinValue+0x212>
							break;
						default :err_status = E_NOK;
    13cc:	81 e0       	ldi	r24, 0x01	; 1
    13ce:	89 83       	std	Y+1, r24	; 0x01
    13d0:	02 c0       	rjmp	.+4      	; 0x13d6 <DIO_U8SetPinValue+0x212>
				}
				break;
			default : err_status = E_NOK;
    13d2:	81 e0       	ldi	r24, 0x01	; 1
    13d4:	89 83       	std	Y+1, r24	; 0x01

		}
	return err_status;
    13d6:	89 81       	ldd	r24, Y+1	; 0x01

}
    13d8:	2a 96       	adiw	r28, 0x0a	; 10
    13da:	0f b6       	in	r0, 0x3f	; 63
    13dc:	f8 94       	cli
    13de:	de bf       	out	0x3e, r29	; 62
    13e0:	0f be       	out	0x3f, r0	; 63
    13e2:	cd bf       	out	0x3d, r28	; 61
    13e4:	cf 91       	pop	r28
    13e6:	df 91       	pop	r29
    13e8:	08 95       	ret

000013ea <DIO_U8SetPortDirection>:


/*Function to set port direction*/
uint8_t DIO_U8SetPortDirection(uint8_t Copy_U8Port, uint8_t Copy_U8Direction)
{
    13ea:	df 93       	push	r29
    13ec:	cf 93       	push	r28
    13ee:	00 d0       	rcall	.+0      	; 0x13f0 <DIO_U8SetPortDirection+0x6>
    13f0:	00 d0       	rcall	.+0      	; 0x13f2 <DIO_U8SetPortDirection+0x8>
    13f2:	0f 92       	push	r0
    13f4:	cd b7       	in	r28, 0x3d	; 61
    13f6:	de b7       	in	r29, 0x3e	; 62
    13f8:	8a 83       	std	Y+2, r24	; 0x02
    13fa:	6b 83       	std	Y+3, r22	; 0x03
	uint8_t err_status = E_OK;
    13fc:	19 82       	std	Y+1, r1	; 0x01
	switch(Copy_U8Port)
    13fe:	8a 81       	ldd	r24, Y+2	; 0x02
    1400:	28 2f       	mov	r18, r24
    1402:	30 e0       	ldi	r19, 0x00	; 0
    1404:	3d 83       	std	Y+5, r19	; 0x05
    1406:	2c 83       	std	Y+4, r18	; 0x04
    1408:	8c 81       	ldd	r24, Y+4	; 0x04
    140a:	9d 81       	ldd	r25, Y+5	; 0x05
    140c:	81 30       	cpi	r24, 0x01	; 1
    140e:	91 05       	cpc	r25, r1
    1410:	d1 f0       	breq	.+52     	; 0x1446 <DIO_U8SetPortDirection+0x5c>
    1412:	2c 81       	ldd	r18, Y+4	; 0x04
    1414:	3d 81       	ldd	r19, Y+5	; 0x05
    1416:	22 30       	cpi	r18, 0x02	; 2
    1418:	31 05       	cpc	r19, r1
    141a:	2c f4       	brge	.+10     	; 0x1426 <DIO_U8SetPortDirection+0x3c>
    141c:	8c 81       	ldd	r24, Y+4	; 0x04
    141e:	9d 81       	ldd	r25, Y+5	; 0x05
    1420:	00 97       	sbiw	r24, 0x00	; 0
    1422:	61 f0       	breq	.+24     	; 0x143c <DIO_U8SetPortDirection+0x52>
    1424:	1f c0       	rjmp	.+62     	; 0x1464 <DIO_U8SetPortDirection+0x7a>
    1426:	2c 81       	ldd	r18, Y+4	; 0x04
    1428:	3d 81       	ldd	r19, Y+5	; 0x05
    142a:	22 30       	cpi	r18, 0x02	; 2
    142c:	31 05       	cpc	r19, r1
    142e:	81 f0       	breq	.+32     	; 0x1450 <DIO_U8SetPortDirection+0x66>
    1430:	8c 81       	ldd	r24, Y+4	; 0x04
    1432:	9d 81       	ldd	r25, Y+5	; 0x05
    1434:	83 30       	cpi	r24, 0x03	; 3
    1436:	91 05       	cpc	r25, r1
    1438:	81 f0       	breq	.+32     	; 0x145a <DIO_U8SetPortDirection+0x70>
    143a:	14 c0       	rjmp	.+40     	; 0x1464 <DIO_U8SetPortDirection+0x7a>
	{
		case DIO_PORTA :
			DDRA = Copy_U8Direction ;
    143c:	ea e3       	ldi	r30, 0x3A	; 58
    143e:	f0 e0       	ldi	r31, 0x00	; 0
    1440:	8b 81       	ldd	r24, Y+3	; 0x03
    1442:	80 83       	st	Z, r24
    1444:	11 c0       	rjmp	.+34     	; 0x1468 <DIO_U8SetPortDirection+0x7e>
			break;

		case DIO_PORTB :
			DDRB = Copy_U8Direction ;
    1446:	e7 e3       	ldi	r30, 0x37	; 55
    1448:	f0 e0       	ldi	r31, 0x00	; 0
    144a:	8b 81       	ldd	r24, Y+3	; 0x03
    144c:	80 83       	st	Z, r24
    144e:	0c c0       	rjmp	.+24     	; 0x1468 <DIO_U8SetPortDirection+0x7e>
			break;

		case DIO_PORTC :
			DDRC = Copy_U8Direction ;
    1450:	e4 e3       	ldi	r30, 0x34	; 52
    1452:	f0 e0       	ldi	r31, 0x00	; 0
    1454:	8b 81       	ldd	r24, Y+3	; 0x03
    1456:	80 83       	st	Z, r24
    1458:	07 c0       	rjmp	.+14     	; 0x1468 <DIO_U8SetPortDirection+0x7e>
			break;

		case DIO_PORTD :
			DDRD = Copy_U8Direction ;
    145a:	e1 e3       	ldi	r30, 0x31	; 49
    145c:	f0 e0       	ldi	r31, 0x00	; 0
    145e:	8b 81       	ldd	r24, Y+3	; 0x03
    1460:	80 83       	st	Z, r24
    1462:	02 c0       	rjmp	.+4      	; 0x1468 <DIO_U8SetPortDirection+0x7e>
			break;
		default : err_status = E_NOK;
    1464:	81 e0       	ldi	r24, 0x01	; 1
    1466:	89 83       	std	Y+1, r24	; 0x01
	}
	return err_status;
    1468:	89 81       	ldd	r24, Y+1	; 0x01
}
    146a:	0f 90       	pop	r0
    146c:	0f 90       	pop	r0
    146e:	0f 90       	pop	r0
    1470:	0f 90       	pop	r0
    1472:	0f 90       	pop	r0
    1474:	cf 91       	pop	r28
    1476:	df 91       	pop	r29
    1478:	08 95       	ret

0000147a <DIO_U8SetPortValue>:

/*Function to set port value*/
uint8_t DIO_U8SetPortValue(uint8_t Copy_U8Port, uint8_t Copy_U8Value)
{
    147a:	df 93       	push	r29
    147c:	cf 93       	push	r28
    147e:	00 d0       	rcall	.+0      	; 0x1480 <DIO_U8SetPortValue+0x6>
    1480:	00 d0       	rcall	.+0      	; 0x1482 <DIO_U8SetPortValue+0x8>
    1482:	0f 92       	push	r0
    1484:	cd b7       	in	r28, 0x3d	; 61
    1486:	de b7       	in	r29, 0x3e	; 62
    1488:	8a 83       	std	Y+2, r24	; 0x02
    148a:	6b 83       	std	Y+3, r22	; 0x03
	uint8_t err_status = E_OK;
    148c:	19 82       	std	Y+1, r1	; 0x01
	switch(Copy_U8Port)
    148e:	8a 81       	ldd	r24, Y+2	; 0x02
    1490:	28 2f       	mov	r18, r24
    1492:	30 e0       	ldi	r19, 0x00	; 0
    1494:	3d 83       	std	Y+5, r19	; 0x05
    1496:	2c 83       	std	Y+4, r18	; 0x04
    1498:	8c 81       	ldd	r24, Y+4	; 0x04
    149a:	9d 81       	ldd	r25, Y+5	; 0x05
    149c:	81 30       	cpi	r24, 0x01	; 1
    149e:	91 05       	cpc	r25, r1
    14a0:	d1 f0       	breq	.+52     	; 0x14d6 <DIO_U8SetPortValue+0x5c>
    14a2:	2c 81       	ldd	r18, Y+4	; 0x04
    14a4:	3d 81       	ldd	r19, Y+5	; 0x05
    14a6:	22 30       	cpi	r18, 0x02	; 2
    14a8:	31 05       	cpc	r19, r1
    14aa:	2c f4       	brge	.+10     	; 0x14b6 <DIO_U8SetPortValue+0x3c>
    14ac:	8c 81       	ldd	r24, Y+4	; 0x04
    14ae:	9d 81       	ldd	r25, Y+5	; 0x05
    14b0:	00 97       	sbiw	r24, 0x00	; 0
    14b2:	61 f0       	breq	.+24     	; 0x14cc <DIO_U8SetPortValue+0x52>
    14b4:	1f c0       	rjmp	.+62     	; 0x14f4 <DIO_U8SetPortValue+0x7a>
    14b6:	2c 81       	ldd	r18, Y+4	; 0x04
    14b8:	3d 81       	ldd	r19, Y+5	; 0x05
    14ba:	22 30       	cpi	r18, 0x02	; 2
    14bc:	31 05       	cpc	r19, r1
    14be:	81 f0       	breq	.+32     	; 0x14e0 <DIO_U8SetPortValue+0x66>
    14c0:	8c 81       	ldd	r24, Y+4	; 0x04
    14c2:	9d 81       	ldd	r25, Y+5	; 0x05
    14c4:	83 30       	cpi	r24, 0x03	; 3
    14c6:	91 05       	cpc	r25, r1
    14c8:	81 f0       	breq	.+32     	; 0x14ea <DIO_U8SetPortValue+0x70>
    14ca:	14 c0       	rjmp	.+40     	; 0x14f4 <DIO_U8SetPortValue+0x7a>
	{
		case DIO_PORTA :
			PORTA = Copy_U8Value ;
    14cc:	eb e3       	ldi	r30, 0x3B	; 59
    14ce:	f0 e0       	ldi	r31, 0x00	; 0
    14d0:	8b 81       	ldd	r24, Y+3	; 0x03
    14d2:	80 83       	st	Z, r24
    14d4:	11 c0       	rjmp	.+34     	; 0x14f8 <DIO_U8SetPortValue+0x7e>
			break;

		case DIO_PORTB :
			PORTB = Copy_U8Value ;
    14d6:	e8 e3       	ldi	r30, 0x38	; 56
    14d8:	f0 e0       	ldi	r31, 0x00	; 0
    14da:	8b 81       	ldd	r24, Y+3	; 0x03
    14dc:	80 83       	st	Z, r24
    14de:	0c c0       	rjmp	.+24     	; 0x14f8 <DIO_U8SetPortValue+0x7e>
			break;

		case DIO_PORTC :
			PORTC = Copy_U8Value ;
    14e0:	e5 e3       	ldi	r30, 0x35	; 53
    14e2:	f0 e0       	ldi	r31, 0x00	; 0
    14e4:	8b 81       	ldd	r24, Y+3	; 0x03
    14e6:	80 83       	st	Z, r24
    14e8:	07 c0       	rjmp	.+14     	; 0x14f8 <DIO_U8SetPortValue+0x7e>
			break;

		case DIO_PORTD :
			PORTD = Copy_U8Value ;
    14ea:	e2 e3       	ldi	r30, 0x32	; 50
    14ec:	f0 e0       	ldi	r31, 0x00	; 0
    14ee:	8b 81       	ldd	r24, Y+3	; 0x03
    14f0:	80 83       	st	Z, r24
    14f2:	02 c0       	rjmp	.+4      	; 0x14f8 <DIO_U8SetPortValue+0x7e>
			break;
		default : err_status = E_NOK;
    14f4:	81 e0       	ldi	r24, 0x01	; 1
    14f6:	89 83       	std	Y+1, r24	; 0x01
	}
	return err_status;
    14f8:	89 81       	ldd	r24, Y+1	; 0x01
}
    14fa:	0f 90       	pop	r0
    14fc:	0f 90       	pop	r0
    14fe:	0f 90       	pop	r0
    1500:	0f 90       	pop	r0
    1502:	0f 90       	pop	r0
    1504:	cf 91       	pop	r28
    1506:	df 91       	pop	r29
    1508:	08 95       	ret

0000150a <DIO_U8TogglePinValue>:
//Function to toggle the bin
uint8_t DIO_U8TogglePinValue(uint8_t Copy_U8Port, uint8_t Copy_U8Pin)
{
    150a:	df 93       	push	r29
    150c:	cf 93       	push	r28
    150e:	00 d0       	rcall	.+0      	; 0x1510 <DIO_U8TogglePinValue+0x6>
    1510:	00 d0       	rcall	.+0      	; 0x1512 <DIO_U8TogglePinValue+0x8>
    1512:	0f 92       	push	r0
    1514:	cd b7       	in	r28, 0x3d	; 61
    1516:	de b7       	in	r29, 0x3e	; 62
    1518:	8a 83       	std	Y+2, r24	; 0x02
    151a:	6b 83       	std	Y+3, r22	; 0x03
	uint8_t err_status = E_OK;
    151c:	19 82       	std	Y+1, r1	; 0x01
	switch(Copy_U8Port)
    151e:	8a 81       	ldd	r24, Y+2	; 0x02
    1520:	28 2f       	mov	r18, r24
    1522:	30 e0       	ldi	r19, 0x00	; 0
    1524:	3d 83       	std	Y+5, r19	; 0x05
    1526:	2c 83       	std	Y+4, r18	; 0x04
    1528:	8c 81       	ldd	r24, Y+4	; 0x04
    152a:	9d 81       	ldd	r25, Y+5	; 0x05
    152c:	81 30       	cpi	r24, 0x01	; 1
    152e:	91 05       	cpc	r25, r1
    1530:	49 f1       	breq	.+82     	; 0x1584 <DIO_U8TogglePinValue+0x7a>
    1532:	2c 81       	ldd	r18, Y+4	; 0x04
    1534:	3d 81       	ldd	r19, Y+5	; 0x05
    1536:	22 30       	cpi	r18, 0x02	; 2
    1538:	31 05       	cpc	r19, r1
    153a:	2c f4       	brge	.+10     	; 0x1546 <DIO_U8TogglePinValue+0x3c>
    153c:	8c 81       	ldd	r24, Y+4	; 0x04
    153e:	9d 81       	ldd	r25, Y+5	; 0x05
    1540:	00 97       	sbiw	r24, 0x00	; 0
    1542:	61 f0       	breq	.+24     	; 0x155c <DIO_U8TogglePinValue+0x52>
    1544:	5b c0       	rjmp	.+182    	; 0x15fc <DIO_U8TogglePinValue+0xf2>
    1546:	2c 81       	ldd	r18, Y+4	; 0x04
    1548:	3d 81       	ldd	r19, Y+5	; 0x05
    154a:	22 30       	cpi	r18, 0x02	; 2
    154c:	31 05       	cpc	r19, r1
    154e:	71 f1       	breq	.+92     	; 0x15ac <DIO_U8TogglePinValue+0xa2>
    1550:	8c 81       	ldd	r24, Y+4	; 0x04
    1552:	9d 81       	ldd	r25, Y+5	; 0x05
    1554:	83 30       	cpi	r24, 0x03	; 3
    1556:	91 05       	cpc	r25, r1
    1558:	e9 f1       	breq	.+122    	; 0x15d4 <DIO_U8TogglePinValue+0xca>
    155a:	50 c0       	rjmp	.+160    	; 0x15fc <DIO_U8TogglePinValue+0xf2>
		{
			case DIO_PORTA :
				TOGGLE_BIT(PORTA,Copy_U8Pin);
    155c:	ab e3       	ldi	r26, 0x3B	; 59
    155e:	b0 e0       	ldi	r27, 0x00	; 0
    1560:	eb e3       	ldi	r30, 0x3B	; 59
    1562:	f0 e0       	ldi	r31, 0x00	; 0
    1564:	80 81       	ld	r24, Z
    1566:	48 2f       	mov	r20, r24
    1568:	8b 81       	ldd	r24, Y+3	; 0x03
    156a:	28 2f       	mov	r18, r24
    156c:	30 e0       	ldi	r19, 0x00	; 0
    156e:	81 e0       	ldi	r24, 0x01	; 1
    1570:	90 e0       	ldi	r25, 0x00	; 0
    1572:	02 2e       	mov	r0, r18
    1574:	02 c0       	rjmp	.+4      	; 0x157a <DIO_U8TogglePinValue+0x70>
    1576:	88 0f       	add	r24, r24
    1578:	99 1f       	adc	r25, r25
    157a:	0a 94       	dec	r0
    157c:	e2 f7       	brpl	.-8      	; 0x1576 <DIO_U8TogglePinValue+0x6c>
    157e:	84 27       	eor	r24, r20
    1580:	8c 93       	st	X, r24
    1582:	3e c0       	rjmp	.+124    	; 0x1600 <DIO_U8TogglePinValue+0xf6>
				break;

			case DIO_PORTB :
				TOGGLE_BIT(PORTB,Copy_U8Pin);
    1584:	a8 e3       	ldi	r26, 0x38	; 56
    1586:	b0 e0       	ldi	r27, 0x00	; 0
    1588:	e8 e3       	ldi	r30, 0x38	; 56
    158a:	f0 e0       	ldi	r31, 0x00	; 0
    158c:	80 81       	ld	r24, Z
    158e:	48 2f       	mov	r20, r24
    1590:	8b 81       	ldd	r24, Y+3	; 0x03
    1592:	28 2f       	mov	r18, r24
    1594:	30 e0       	ldi	r19, 0x00	; 0
    1596:	81 e0       	ldi	r24, 0x01	; 1
    1598:	90 e0       	ldi	r25, 0x00	; 0
    159a:	02 2e       	mov	r0, r18
    159c:	02 c0       	rjmp	.+4      	; 0x15a2 <DIO_U8TogglePinValue+0x98>
    159e:	88 0f       	add	r24, r24
    15a0:	99 1f       	adc	r25, r25
    15a2:	0a 94       	dec	r0
    15a4:	e2 f7       	brpl	.-8      	; 0x159e <DIO_U8TogglePinValue+0x94>
    15a6:	84 27       	eor	r24, r20
    15a8:	8c 93       	st	X, r24
    15aa:	2a c0       	rjmp	.+84     	; 0x1600 <DIO_U8TogglePinValue+0xf6>
				break;

			case DIO_PORTC :
				TOGGLE_BIT(PORTC,Copy_U8Pin);
    15ac:	a5 e3       	ldi	r26, 0x35	; 53
    15ae:	b0 e0       	ldi	r27, 0x00	; 0
    15b0:	e5 e3       	ldi	r30, 0x35	; 53
    15b2:	f0 e0       	ldi	r31, 0x00	; 0
    15b4:	80 81       	ld	r24, Z
    15b6:	48 2f       	mov	r20, r24
    15b8:	8b 81       	ldd	r24, Y+3	; 0x03
    15ba:	28 2f       	mov	r18, r24
    15bc:	30 e0       	ldi	r19, 0x00	; 0
    15be:	81 e0       	ldi	r24, 0x01	; 1
    15c0:	90 e0       	ldi	r25, 0x00	; 0
    15c2:	02 2e       	mov	r0, r18
    15c4:	02 c0       	rjmp	.+4      	; 0x15ca <DIO_U8TogglePinValue+0xc0>
    15c6:	88 0f       	add	r24, r24
    15c8:	99 1f       	adc	r25, r25
    15ca:	0a 94       	dec	r0
    15cc:	e2 f7       	brpl	.-8      	; 0x15c6 <DIO_U8TogglePinValue+0xbc>
    15ce:	84 27       	eor	r24, r20
    15d0:	8c 93       	st	X, r24
    15d2:	16 c0       	rjmp	.+44     	; 0x1600 <DIO_U8TogglePinValue+0xf6>
				break;

			case DIO_PORTD :
				TOGGLE_BIT(PORTD,Copy_U8Pin);
    15d4:	a2 e3       	ldi	r26, 0x32	; 50
    15d6:	b0 e0       	ldi	r27, 0x00	; 0
    15d8:	e2 e3       	ldi	r30, 0x32	; 50
    15da:	f0 e0       	ldi	r31, 0x00	; 0
    15dc:	80 81       	ld	r24, Z
    15de:	48 2f       	mov	r20, r24
    15e0:	8b 81       	ldd	r24, Y+3	; 0x03
    15e2:	28 2f       	mov	r18, r24
    15e4:	30 e0       	ldi	r19, 0x00	; 0
    15e6:	81 e0       	ldi	r24, 0x01	; 1
    15e8:	90 e0       	ldi	r25, 0x00	; 0
    15ea:	02 2e       	mov	r0, r18
    15ec:	02 c0       	rjmp	.+4      	; 0x15f2 <DIO_U8TogglePinValue+0xe8>
    15ee:	88 0f       	add	r24, r24
    15f0:	99 1f       	adc	r25, r25
    15f2:	0a 94       	dec	r0
    15f4:	e2 f7       	brpl	.-8      	; 0x15ee <DIO_U8TogglePinValue+0xe4>
    15f6:	84 27       	eor	r24, r20
    15f8:	8c 93       	st	X, r24
    15fa:	02 c0       	rjmp	.+4      	; 0x1600 <DIO_U8TogglePinValue+0xf6>
				break;
			default : err_status = E_NOK;
    15fc:	81 e0       	ldi	r24, 0x01	; 1
    15fe:	89 83       	std	Y+1, r24	; 0x01
		}
	return err_status;
    1600:	89 81       	ldd	r24, Y+1	; 0x01
}
    1602:	0f 90       	pop	r0
    1604:	0f 90       	pop	r0
    1606:	0f 90       	pop	r0
    1608:	0f 90       	pop	r0
    160a:	0f 90       	pop	r0
    160c:	cf 91       	pop	r28
    160e:	df 91       	pop	r29
    1610:	08 95       	ret

00001612 <DIO_U8GetPinValue>:

uint8_t DIO_U8GetPinValue( uint8_t Copy_U8Port , uint8_t Copy_U8Pin, uint8_t *Copy_U8Value)
{
    1612:	df 93       	push	r29
    1614:	cf 93       	push	r28
    1616:	cd b7       	in	r28, 0x3d	; 61
    1618:	de b7       	in	r29, 0x3e	; 62
    161a:	27 97       	sbiw	r28, 0x07	; 7
    161c:	0f b6       	in	r0, 0x3f	; 63
    161e:	f8 94       	cli
    1620:	de bf       	out	0x3e, r29	; 62
    1622:	0f be       	out	0x3f, r0	; 63
    1624:	cd bf       	out	0x3d, r28	; 61
    1626:	8a 83       	std	Y+2, r24	; 0x02
    1628:	6b 83       	std	Y+3, r22	; 0x03
    162a:	5d 83       	std	Y+5, r21	; 0x05
    162c:	4c 83       	std	Y+4, r20	; 0x04
	uint8_t err_status = E_OK;
    162e:	19 82       	std	Y+1, r1	; 0x01

	switch(Copy_U8Port)
    1630:	8a 81       	ldd	r24, Y+2	; 0x02
    1632:	28 2f       	mov	r18, r24
    1634:	30 e0       	ldi	r19, 0x00	; 0
    1636:	3f 83       	std	Y+7, r19	; 0x07
    1638:	2e 83       	std	Y+6, r18	; 0x06
    163a:	4e 81       	ldd	r20, Y+6	; 0x06
    163c:	5f 81       	ldd	r21, Y+7	; 0x07
    163e:	41 30       	cpi	r20, 0x01	; 1
    1640:	51 05       	cpc	r21, r1
    1642:	59 f1       	breq	.+86     	; 0x169a <DIO_U8GetPinValue+0x88>
    1644:	8e 81       	ldd	r24, Y+6	; 0x06
    1646:	9f 81       	ldd	r25, Y+7	; 0x07
    1648:	82 30       	cpi	r24, 0x02	; 2
    164a:	91 05       	cpc	r25, r1
    164c:	34 f4       	brge	.+12     	; 0x165a <DIO_U8GetPinValue+0x48>
    164e:	2e 81       	ldd	r18, Y+6	; 0x06
    1650:	3f 81       	ldd	r19, Y+7	; 0x07
    1652:	21 15       	cp	r18, r1
    1654:	31 05       	cpc	r19, r1
    1656:	69 f0       	breq	.+26     	; 0x1672 <DIO_U8GetPinValue+0x60>
    1658:	5c c0       	rjmp	.+184    	; 0x1712 <DIO_U8GetPinValue+0x100>
    165a:	4e 81       	ldd	r20, Y+6	; 0x06
    165c:	5f 81       	ldd	r21, Y+7	; 0x07
    165e:	42 30       	cpi	r20, 0x02	; 2
    1660:	51 05       	cpc	r21, r1
    1662:	79 f1       	breq	.+94     	; 0x16c2 <DIO_U8GetPinValue+0xb0>
    1664:	8e 81       	ldd	r24, Y+6	; 0x06
    1666:	9f 81       	ldd	r25, Y+7	; 0x07
    1668:	83 30       	cpi	r24, 0x03	; 3
    166a:	91 05       	cpc	r25, r1
    166c:	09 f4       	brne	.+2      	; 0x1670 <DIO_U8GetPinValue+0x5e>
    166e:	3d c0       	rjmp	.+122    	; 0x16ea <DIO_U8GetPinValue+0xd8>
    1670:	50 c0       	rjmp	.+160    	; 0x1712 <DIO_U8GetPinValue+0x100>
	{
		case DIO_PORTA :
			*Copy_U8Value =  GET_BIT( PINA , Copy_U8Pin );
    1672:	e9 e3       	ldi	r30, 0x39	; 57
    1674:	f0 e0       	ldi	r31, 0x00	; 0
    1676:	80 81       	ld	r24, Z
    1678:	28 2f       	mov	r18, r24
    167a:	30 e0       	ldi	r19, 0x00	; 0
    167c:	8b 81       	ldd	r24, Y+3	; 0x03
    167e:	88 2f       	mov	r24, r24
    1680:	90 e0       	ldi	r25, 0x00	; 0
    1682:	a9 01       	movw	r20, r18
    1684:	02 c0       	rjmp	.+4      	; 0x168a <DIO_U8GetPinValue+0x78>
    1686:	55 95       	asr	r21
    1688:	47 95       	ror	r20
    168a:	8a 95       	dec	r24
    168c:	e2 f7       	brpl	.-8      	; 0x1686 <DIO_U8GetPinValue+0x74>
    168e:	ca 01       	movw	r24, r20
    1690:	81 70       	andi	r24, 0x01	; 1
    1692:	ec 81       	ldd	r30, Y+4	; 0x04
    1694:	fd 81       	ldd	r31, Y+5	; 0x05
    1696:	80 83       	st	Z, r24
    1698:	3e c0       	rjmp	.+124    	; 0x1716 <DIO_U8GetPinValue+0x104>
			break;
		case DIO_PORTB :
			*Copy_U8Value = GET_BIT( PINB , Copy_U8Pin );
    169a:	e6 e3       	ldi	r30, 0x36	; 54
    169c:	f0 e0       	ldi	r31, 0x00	; 0
    169e:	80 81       	ld	r24, Z
    16a0:	28 2f       	mov	r18, r24
    16a2:	30 e0       	ldi	r19, 0x00	; 0
    16a4:	8b 81       	ldd	r24, Y+3	; 0x03
    16a6:	88 2f       	mov	r24, r24
    16a8:	90 e0       	ldi	r25, 0x00	; 0
    16aa:	a9 01       	movw	r20, r18
    16ac:	02 c0       	rjmp	.+4      	; 0x16b2 <DIO_U8GetPinValue+0xa0>
    16ae:	55 95       	asr	r21
    16b0:	47 95       	ror	r20
    16b2:	8a 95       	dec	r24
    16b4:	e2 f7       	brpl	.-8      	; 0x16ae <DIO_U8GetPinValue+0x9c>
    16b6:	ca 01       	movw	r24, r20
    16b8:	81 70       	andi	r24, 0x01	; 1
    16ba:	ec 81       	ldd	r30, Y+4	; 0x04
    16bc:	fd 81       	ldd	r31, Y+5	; 0x05
    16be:	80 83       	st	Z, r24
    16c0:	2a c0       	rjmp	.+84     	; 0x1716 <DIO_U8GetPinValue+0x104>
			break;
		case DIO_PORTC :
			*Copy_U8Value = GET_BIT( PINC , Copy_U8Pin );
    16c2:	e3 e3       	ldi	r30, 0x33	; 51
    16c4:	f0 e0       	ldi	r31, 0x00	; 0
    16c6:	80 81       	ld	r24, Z
    16c8:	28 2f       	mov	r18, r24
    16ca:	30 e0       	ldi	r19, 0x00	; 0
    16cc:	8b 81       	ldd	r24, Y+3	; 0x03
    16ce:	88 2f       	mov	r24, r24
    16d0:	90 e0       	ldi	r25, 0x00	; 0
    16d2:	a9 01       	movw	r20, r18
    16d4:	02 c0       	rjmp	.+4      	; 0x16da <DIO_U8GetPinValue+0xc8>
    16d6:	55 95       	asr	r21
    16d8:	47 95       	ror	r20
    16da:	8a 95       	dec	r24
    16dc:	e2 f7       	brpl	.-8      	; 0x16d6 <DIO_U8GetPinValue+0xc4>
    16de:	ca 01       	movw	r24, r20
    16e0:	81 70       	andi	r24, 0x01	; 1
    16e2:	ec 81       	ldd	r30, Y+4	; 0x04
    16e4:	fd 81       	ldd	r31, Y+5	; 0x05
    16e6:	80 83       	st	Z, r24
    16e8:	16 c0       	rjmp	.+44     	; 0x1716 <DIO_U8GetPinValue+0x104>
			break;
		case DIO_PORTD :
			*Copy_U8Value = GET_BIT( PIND , Copy_U8Pin );
    16ea:	e0 e3       	ldi	r30, 0x30	; 48
    16ec:	f0 e0       	ldi	r31, 0x00	; 0
    16ee:	80 81       	ld	r24, Z
    16f0:	28 2f       	mov	r18, r24
    16f2:	30 e0       	ldi	r19, 0x00	; 0
    16f4:	8b 81       	ldd	r24, Y+3	; 0x03
    16f6:	88 2f       	mov	r24, r24
    16f8:	90 e0       	ldi	r25, 0x00	; 0
    16fa:	a9 01       	movw	r20, r18
    16fc:	02 c0       	rjmp	.+4      	; 0x1702 <DIO_U8GetPinValue+0xf0>
    16fe:	55 95       	asr	r21
    1700:	47 95       	ror	r20
    1702:	8a 95       	dec	r24
    1704:	e2 f7       	brpl	.-8      	; 0x16fe <DIO_U8GetPinValue+0xec>
    1706:	ca 01       	movw	r24, r20
    1708:	81 70       	andi	r24, 0x01	; 1
    170a:	ec 81       	ldd	r30, Y+4	; 0x04
    170c:	fd 81       	ldd	r31, Y+5	; 0x05
    170e:	80 83       	st	Z, r24
    1710:	02 c0       	rjmp	.+4      	; 0x1716 <DIO_U8GetPinValue+0x104>
			break;
		default : err_status = E_NOK;
    1712:	81 e0       	ldi	r24, 0x01	; 1
    1714:	89 83       	std	Y+1, r24	; 0x01

	}
	return err_status;
    1716:	89 81       	ldd	r24, Y+1	; 0x01
}
    1718:	27 96       	adiw	r28, 0x07	; 7
    171a:	0f b6       	in	r0, 0x3f	; 63
    171c:	f8 94       	cli
    171e:	de bf       	out	0x3e, r29	; 62
    1720:	0f be       	out	0x3f, r0	; 63
    1722:	cd bf       	out	0x3d, r28	; 61
    1724:	cf 91       	pop	r28
    1726:	df 91       	pop	r29
    1728:	08 95       	ret

0000172a <delay_milliseconds>:
 * Description: Function to make delay in millisecond using NOP assembly instruction
 * Inputs: the required delay in millisecond
 * Output: void
 */
void delay_milliseconds (uint32_t Copy_U32OuterLoopIterations)
{
    172a:	df 93       	push	r29
    172c:	cf 93       	push	r28
    172e:	cd b7       	in	r28, 0x3d	; 61
    1730:	de b7       	in	r29, 0x3e	; 62
    1732:	2c 97       	sbiw	r28, 0x0c	; 12
    1734:	0f b6       	in	r0, 0x3f	; 63
    1736:	f8 94       	cli
    1738:	de bf       	out	0x3e, r29	; 62
    173a:	0f be       	out	0x3f, r0	; 63
    173c:	cd bf       	out	0x3d, r28	; 61
    173e:	69 87       	std	Y+9, r22	; 0x09
    1740:	7a 87       	std	Y+10, r23	; 0x0a
    1742:	8b 87       	std	Y+11, r24	; 0x0b
    1744:	9c 87       	std	Y+12, r25	; 0x0c

	uint32_t U32OuterLoopIndex = 0, U32InnerLoopIndex = 0;
    1746:	1d 82       	std	Y+5, r1	; 0x05
    1748:	1e 82       	std	Y+6, r1	; 0x06
    174a:	1f 82       	std	Y+7, r1	; 0x07
    174c:	18 86       	std	Y+8, r1	; 0x08
    174e:	19 82       	std	Y+1, r1	; 0x01
    1750:	1a 82       	std	Y+2, r1	; 0x02
    1752:	1b 82       	std	Y+3, r1	; 0x03
    1754:	1c 82       	std	Y+4, r1	; 0x04

	for(U32OuterLoopIndex = 0; U32OuterLoopIndex < Copy_U32OuterLoopIterations; U32OuterLoopIndex++)
    1756:	1d 82       	std	Y+5, r1	; 0x05
    1758:	1e 82       	std	Y+6, r1	; 0x06
    175a:	1f 82       	std	Y+7, r1	; 0x07
    175c:	18 86       	std	Y+8, r1	; 0x08
    175e:	28 c0       	rjmp	.+80     	; 0x17b0 <delay_milliseconds+0x86>
	{

		// This loop yields 1 millisecond

		for (U32InnerLoopIndex = 0; U32InnerLoopIndex < INNER_LOOP_ITERATIONS; U32InnerLoopIndex++)
    1760:	19 82       	std	Y+1, r1	; 0x01
    1762:	1a 82       	std	Y+2, r1	; 0x02
    1764:	1b 82       	std	Y+3, r1	; 0x03
    1766:	1c 82       	std	Y+4, r1	; 0x04
    1768:	0f c0       	rjmp	.+30     	; 0x1788 <delay_milliseconds+0x5e>
	...
    1772:	89 81       	ldd	r24, Y+1	; 0x01
    1774:	9a 81       	ldd	r25, Y+2	; 0x02
    1776:	ab 81       	ldd	r26, Y+3	; 0x03
    1778:	bc 81       	ldd	r27, Y+4	; 0x04
    177a:	01 96       	adiw	r24, 0x01	; 1
    177c:	a1 1d       	adc	r26, r1
    177e:	b1 1d       	adc	r27, r1
    1780:	89 83       	std	Y+1, r24	; 0x01
    1782:	9a 83       	std	Y+2, r25	; 0x02
    1784:	ab 83       	std	Y+3, r26	; 0x03
    1786:	bc 83       	std	Y+4, r27	; 0x04
    1788:	89 81       	ldd	r24, Y+1	; 0x01
    178a:	9a 81       	ldd	r25, Y+2	; 0x02
    178c:	ab 81       	ldd	r26, Y+3	; 0x03
    178e:	bc 81       	ldd	r27, Y+4	; 0x04
    1790:	80 3d       	cpi	r24, 0xD0	; 208
    1792:	91 05       	cpc	r25, r1
    1794:	a1 05       	cpc	r26, r1
    1796:	b1 05       	cpc	r27, r1
    1798:	40 f3       	brcs	.-48     	; 0x176a <delay_milliseconds+0x40>
void delay_milliseconds (uint32_t Copy_U32OuterLoopIterations)
{

	uint32_t U32OuterLoopIndex = 0, U32InnerLoopIndex = 0;

	for(U32OuterLoopIndex = 0; U32OuterLoopIndex < Copy_U32OuterLoopIterations; U32OuterLoopIndex++)
    179a:	8d 81       	ldd	r24, Y+5	; 0x05
    179c:	9e 81       	ldd	r25, Y+6	; 0x06
    179e:	af 81       	ldd	r26, Y+7	; 0x07
    17a0:	b8 85       	ldd	r27, Y+8	; 0x08
    17a2:	01 96       	adiw	r24, 0x01	; 1
    17a4:	a1 1d       	adc	r26, r1
    17a6:	b1 1d       	adc	r27, r1
    17a8:	8d 83       	std	Y+5, r24	; 0x05
    17aa:	9e 83       	std	Y+6, r25	; 0x06
    17ac:	af 83       	std	Y+7, r26	; 0x07
    17ae:	b8 87       	std	Y+8, r27	; 0x08
    17b0:	2d 81       	ldd	r18, Y+5	; 0x05
    17b2:	3e 81       	ldd	r19, Y+6	; 0x06
    17b4:	4f 81       	ldd	r20, Y+7	; 0x07
    17b6:	58 85       	ldd	r21, Y+8	; 0x08
    17b8:	89 85       	ldd	r24, Y+9	; 0x09
    17ba:	9a 85       	ldd	r25, Y+10	; 0x0a
    17bc:	ab 85       	ldd	r26, Y+11	; 0x0b
    17be:	bc 85       	ldd	r27, Y+12	; 0x0c
    17c0:	28 17       	cp	r18, r24
    17c2:	39 07       	cpc	r19, r25
    17c4:	4a 07       	cpc	r20, r26
    17c6:	5b 07       	cpc	r21, r27
    17c8:	58 f2       	brcs	.-106    	; 0x1760 <delay_milliseconds+0x36>
			asm("NOP");
			asm("NOP");
		}
	}

}
    17ca:	2c 96       	adiw	r28, 0x0c	; 12
    17cc:	0f b6       	in	r0, 0x3f	; 63
    17ce:	f8 94       	cli
    17d0:	de bf       	out	0x3e, r29	; 62
    17d2:	0f be       	out	0x3f, r0	; 63
    17d4:	cd bf       	out	0x3d, r28	; 61
    17d6:	cf 91       	pop	r28
    17d8:	df 91       	pop	r29
    17da:	08 95       	ret

000017dc <StepperMotor_Init>:


/**
 * @brief Initializes the stepper motor by setting up the control pins.
 */
void StepperMotor_Init(void) {
    17dc:	df 93       	push	r29
    17de:	cf 93       	push	r28
    17e0:	cd b7       	in	r28, 0x3d	; 61
    17e2:	de b7       	in	r29, 0x3e	; 62
    // Set the direction of the control pins to output
    DIO_U8SetPinDirection(STEPPER_PORT, STEP_PIN, DIO_OUTPUT);
    17e4:	83 e0       	ldi	r24, 0x03	; 3
    17e6:	65 e0       	ldi	r22, 0x05	; 5
    17e8:	41 e0       	ldi	r20, 0x01	; 1
    17ea:	0e 94 cf 07 	call	0xf9e	; 0xf9e <DIO_U8SetPinDirection>
    DIO_U8SetPinDirection(STEPPER_PORT, DIR_PIN, DIO_OUTPUT);
    17ee:	83 e0       	ldi	r24, 0x03	; 3
    17f0:	66 e0       	ldi	r22, 0x06	; 6
    17f2:	41 e0       	ldi	r20, 0x01	; 1
    17f4:	0e 94 cf 07 	call	0xf9e	; 0xf9e <DIO_U8SetPinDirection>
    DIO_U8SetPinDirection(STEPPER_PORT, ENABLE_PIN, DIO_OUTPUT);
    17f8:	83 e0       	ldi	r24, 0x03	; 3
    17fa:	67 e0       	ldi	r22, 0x07	; 7
    17fc:	41 e0       	ldi	r20, 0x01	; 1
    17fe:	0e 94 cf 07 	call	0xf9e	; 0xf9e <DIO_U8SetPinDirection>

    // Enable the stepper motor driver
    DIO_U8SetPinValue(STEPPER_PORT, ENABLE_PIN, DIO_LOW);
    1802:	83 e0       	ldi	r24, 0x03	; 3
    1804:	67 e0       	ldi	r22, 0x07	; 7
    1806:	40 e0       	ldi	r20, 0x00	; 0
    1808:	0e 94 e2 08 	call	0x11c4	; 0x11c4 <DIO_U8SetPinValue>
}
    180c:	cf 91       	pop	r28
    180e:	df 91       	pop	r29
    1810:	08 95       	ret

00001812 <StepperMotor_Rotate>:
 * @brief Rotates the stepper motor in the specified direction for a given number of steps.
 *
 * @param direction The direction to rotate (CW or CCW).
 * @param steps The number of steps to rotate.
 */
void StepperMotor_Rotate(uint8_t direction, uint16_t steps) {
    1812:	df 93       	push	r29
    1814:	cf 93       	push	r28
    1816:	00 d0       	rcall	.+0      	; 0x1818 <StepperMotor_Rotate+0x6>
    1818:	00 d0       	rcall	.+0      	; 0x181a <StepperMotor_Rotate+0x8>
    181a:	0f 92       	push	r0
    181c:	cd b7       	in	r28, 0x3d	; 61
    181e:	de b7       	in	r29, 0x3e	; 62
    1820:	8b 83       	std	Y+3, r24	; 0x03
    1822:	7d 83       	std	Y+5, r23	; 0x05
    1824:	6c 83       	std	Y+4, r22	; 0x04
    // Set the direction pin
    DIO_U8SetPinValue(STEPPER_PORT, DIR_PIN, direction);
    1826:	83 e0       	ldi	r24, 0x03	; 3
    1828:	66 e0       	ldi	r22, 0x06	; 6
    182a:	4b 81       	ldd	r20, Y+3	; 0x03
    182c:	0e 94 e2 08 	call	0x11c4	; 0x11c4 <DIO_U8SetPinValue>

    // Rotate the motor by the specified number of steps
    for (uint16_t i = 0; i < steps; i++) {
    1830:	1a 82       	std	Y+2, r1	; 0x02
    1832:	19 82       	std	Y+1, r1	; 0x01
    1834:	1b c0       	rjmp	.+54     	; 0x186c <StepperMotor_Rotate+0x5a>
        // Generate a pulse on the step pin
        DIO_U8SetPinValue(STEPPER_PORT, STEP_PIN, DIO_HIGH);
    1836:	83 e0       	ldi	r24, 0x03	; 3
    1838:	65 e0       	ldi	r22, 0x05	; 5
    183a:	41 e0       	ldi	r20, 0x01	; 1
    183c:	0e 94 e2 08 	call	0x11c4	; 0x11c4 <DIO_U8SetPinValue>
        delay_milliseconds(1); // Adjust delay as per your stepper motor's requirements
    1840:	61 e0       	ldi	r22, 0x01	; 1
    1842:	70 e0       	ldi	r23, 0x00	; 0
    1844:	80 e0       	ldi	r24, 0x00	; 0
    1846:	90 e0       	ldi	r25, 0x00	; 0
    1848:	0e 94 95 0b 	call	0x172a	; 0x172a <delay_milliseconds>
        DIO_U8SetPinValue(STEPPER_PORT, STEP_PIN, DIO_LOW);
    184c:	83 e0       	ldi	r24, 0x03	; 3
    184e:	65 e0       	ldi	r22, 0x05	; 5
    1850:	40 e0       	ldi	r20, 0x00	; 0
    1852:	0e 94 e2 08 	call	0x11c4	; 0x11c4 <DIO_U8SetPinValue>
        delay_milliseconds(1);
    1856:	61 e0       	ldi	r22, 0x01	; 1
    1858:	70 e0       	ldi	r23, 0x00	; 0
    185a:	80 e0       	ldi	r24, 0x00	; 0
    185c:	90 e0       	ldi	r25, 0x00	; 0
    185e:	0e 94 95 0b 	call	0x172a	; 0x172a <delay_milliseconds>
void StepperMotor_Rotate(uint8_t direction, uint16_t steps) {
    // Set the direction pin
    DIO_U8SetPinValue(STEPPER_PORT, DIR_PIN, direction);

    // Rotate the motor by the specified number of steps
    for (uint16_t i = 0; i < steps; i++) {
    1862:	89 81       	ldd	r24, Y+1	; 0x01
    1864:	9a 81       	ldd	r25, Y+2	; 0x02
    1866:	01 96       	adiw	r24, 0x01	; 1
    1868:	9a 83       	std	Y+2, r25	; 0x02
    186a:	89 83       	std	Y+1, r24	; 0x01
    186c:	29 81       	ldd	r18, Y+1	; 0x01
    186e:	3a 81       	ldd	r19, Y+2	; 0x02
    1870:	8c 81       	ldd	r24, Y+4	; 0x04
    1872:	9d 81       	ldd	r25, Y+5	; 0x05
    1874:	28 17       	cp	r18, r24
    1876:	39 07       	cpc	r19, r25
    1878:	f0 f2       	brcs	.-68     	; 0x1836 <StepperMotor_Rotate+0x24>
        DIO_U8SetPinValue(STEPPER_PORT, STEP_PIN, DIO_HIGH);
        delay_milliseconds(1); // Adjust delay as per your stepper motor's requirements
        DIO_U8SetPinValue(STEPPER_PORT, STEP_PIN, DIO_LOW);
        delay_milliseconds(1);
    }
}
    187a:	0f 90       	pop	r0
    187c:	0f 90       	pop	r0
    187e:	0f 90       	pop	r0
    1880:	0f 90       	pop	r0
    1882:	0f 90       	pop	r0
    1884:	cf 91       	pop	r28
    1886:	df 91       	pop	r29
    1888:	08 95       	ret

0000188a <StepperMotor_MoveToSlot>:
/**
 * @brief Moves the stepper motor to the specified slot number.
 *
 * @param slotNumber The target slot number to move to.
 */
void StepperMotor_MoveToSlot(uint8_t *currentSlot, uint8_t slotNumber) {
    188a:	df 93       	push	r29
    188c:	cf 93       	push	r28
    188e:	cd b7       	in	r28, 0x3d	; 61
    1890:	de b7       	in	r29, 0x3e	; 62
    1892:	27 97       	sbiw	r28, 0x07	; 7
    1894:	0f b6       	in	r0, 0x3f	; 63
    1896:	f8 94       	cli
    1898:	de bf       	out	0x3e, r29	; 62
    189a:	0f be       	out	0x3f, r0	; 63
    189c:	cd bf       	out	0x3d, r28	; 61
    189e:	9e 83       	std	Y+6, r25	; 0x06
    18a0:	8d 83       	std	Y+5, r24	; 0x05
    18a2:	6f 83       	std	Y+7, r22	; 0x07
    // Ensure the slot number is within the valid range
    if (slotNumber < TOTAL_SLOTS) {
    18a4:	8f 81       	ldd	r24, Y+7	; 0x07
    18a6:	86 30       	cpi	r24, 0x06	; 6
    18a8:	08 f0       	brcs	.+2      	; 0x18ac <StepperMotor_MoveToSlot+0x22>
    18aa:	58 c0       	rjmp	.+176    	; 0x195c <StepperMotor_MoveToSlot+0xd2>
        // Calculate the number of steps needed to reach the target slot in both directions
        sint16_t stepsCW = (sint16_t)((slotNumber - *currentSlot) * STEPS_PER_SLOT);
    18ac:	8f 81       	ldd	r24, Y+7	; 0x07
    18ae:	28 2f       	mov	r18, r24
    18b0:	30 e0       	ldi	r19, 0x00	; 0
    18b2:	ed 81       	ldd	r30, Y+5	; 0x05
    18b4:	fe 81       	ldd	r31, Y+6	; 0x06
    18b6:	80 81       	ld	r24, Z
    18b8:	88 2f       	mov	r24, r24
    18ba:	90 e0       	ldi	r25, 0x00	; 0
    18bc:	28 1b       	sub	r18, r24
    18be:	39 0b       	sbc	r19, r25
    18c0:	88 ee       	ldi	r24, 0xE8	; 232
    18c2:	93 e0       	ldi	r25, 0x03	; 3
    18c4:	ac 01       	movw	r20, r24
    18c6:	24 9f       	mul	r18, r20
    18c8:	c0 01       	movw	r24, r0
    18ca:	25 9f       	mul	r18, r21
    18cc:	90 0d       	add	r25, r0
    18ce:	34 9f       	mul	r19, r20
    18d0:	90 0d       	add	r25, r0
    18d2:	11 24       	eor	r1, r1
    18d4:	9c 83       	std	Y+4, r25	; 0x04
    18d6:	8b 83       	std	Y+3, r24	; 0x03
        sint16_t stepsCCW = (sint16_t)((*currentSlot - slotNumber) * STEPS_PER_SLOT);
    18d8:	ed 81       	ldd	r30, Y+5	; 0x05
    18da:	fe 81       	ldd	r31, Y+6	; 0x06
    18dc:	80 81       	ld	r24, Z
    18de:	28 2f       	mov	r18, r24
    18e0:	30 e0       	ldi	r19, 0x00	; 0
    18e2:	8f 81       	ldd	r24, Y+7	; 0x07
    18e4:	88 2f       	mov	r24, r24
    18e6:	90 e0       	ldi	r25, 0x00	; 0
    18e8:	28 1b       	sub	r18, r24
    18ea:	39 0b       	sbc	r19, r25
    18ec:	88 ee       	ldi	r24, 0xE8	; 232
    18ee:	93 e0       	ldi	r25, 0x03	; 3
    18f0:	ac 01       	movw	r20, r24
    18f2:	24 9f       	mul	r18, r20
    18f4:	c0 01       	movw	r24, r0
    18f6:	25 9f       	mul	r18, r21
    18f8:	90 0d       	add	r25, r0
    18fa:	34 9f       	mul	r19, r20
    18fc:	90 0d       	add	r25, r0
    18fe:	11 24       	eor	r1, r1
    1900:	9a 83       	std	Y+2, r25	; 0x02
    1902:	89 83       	std	Y+1, r24	; 0x01

        // Ensure steps are positive for comparison
        if (stepsCW < 0) stepsCW += TOTAL_SLOTS * STEPS_PER_SLOT;
    1904:	8b 81       	ldd	r24, Y+3	; 0x03
    1906:	9c 81       	ldd	r25, Y+4	; 0x04
    1908:	99 23       	and	r25, r25
    190a:	34 f4       	brge	.+12     	; 0x1918 <StepperMotor_MoveToSlot+0x8e>
    190c:	8b 81       	ldd	r24, Y+3	; 0x03
    190e:	9c 81       	ldd	r25, Y+4	; 0x04
    1910:	80 59       	subi	r24, 0x90	; 144
    1912:	98 4e       	sbci	r25, 0xE8	; 232
    1914:	9c 83       	std	Y+4, r25	; 0x04
    1916:	8b 83       	std	Y+3, r24	; 0x03
        if (stepsCCW < 0) stepsCCW += TOTAL_SLOTS * STEPS_PER_SLOT;
    1918:	89 81       	ldd	r24, Y+1	; 0x01
    191a:	9a 81       	ldd	r25, Y+2	; 0x02
    191c:	99 23       	and	r25, r25
    191e:	34 f4       	brge	.+12     	; 0x192c <StepperMotor_MoveToSlot+0xa2>
    1920:	89 81       	ldd	r24, Y+1	; 0x01
    1922:	9a 81       	ldd	r25, Y+2	; 0x02
    1924:	80 59       	subi	r24, 0x90	; 144
    1926:	98 4e       	sbci	r25, 0xE8	; 232
    1928:	9a 83       	std	Y+2, r25	; 0x02
    192a:	89 83       	std	Y+1, r24	; 0x01

        // Choose the shortest path
        if (stepsCW <= stepsCCW) {
    192c:	2b 81       	ldd	r18, Y+3	; 0x03
    192e:	3c 81       	ldd	r19, Y+4	; 0x04
    1930:	89 81       	ldd	r24, Y+1	; 0x01
    1932:	9a 81       	ldd	r25, Y+2	; 0x02
    1934:	82 17       	cp	r24, r18
    1936:	93 07       	cpc	r25, r19
    1938:	3c f0       	brlt	.+14     	; 0x1948 <StepperMotor_MoveToSlot+0xbe>
            StepperMotor_Rotate(CW, stepsCW);
    193a:	2b 81       	ldd	r18, Y+3	; 0x03
    193c:	3c 81       	ldd	r19, Y+4	; 0x04
    193e:	81 e0       	ldi	r24, 0x01	; 1
    1940:	b9 01       	movw	r22, r18
    1942:	0e 94 09 0c 	call	0x1812	; 0x1812 <StepperMotor_Rotate>
    1946:	06 c0       	rjmp	.+12     	; 0x1954 <StepperMotor_MoveToSlot+0xca>
        } else {
            StepperMotor_Rotate(CCW, stepsCCW);
    1948:	29 81       	ldd	r18, Y+1	; 0x01
    194a:	3a 81       	ldd	r19, Y+2	; 0x02
    194c:	80 e0       	ldi	r24, 0x00	; 0
    194e:	b9 01       	movw	r22, r18
    1950:	0e 94 09 0c 	call	0x1812	; 0x1812 <StepperMotor_Rotate>
        }

        // Update the current slot
        *currentSlot = slotNumber;
    1954:	ed 81       	ldd	r30, Y+5	; 0x05
    1956:	fe 81       	ldd	r31, Y+6	; 0x06
    1958:	8f 81       	ldd	r24, Y+7	; 0x07
    195a:	80 83       	st	Z, r24
    }
}
    195c:	27 96       	adiw	r28, 0x07	; 7
    195e:	0f b6       	in	r0, 0x3f	; 63
    1960:	f8 94       	cli
    1962:	de bf       	out	0x3e, r29	; 62
    1964:	0f be       	out	0x3f, r0	; 63
    1966:	cd bf       	out	0x3d, r28	; 61
    1968:	cf 91       	pop	r28
    196a:	df 91       	pop	r29
    196c:	08 95       	ret

0000196e <SEV_SEG_VidInit>:
#include"SEV_SEG.h"
#include"..\..\MCAL\DIO\DIO_int.h"
void SEV_SEG_VidInit(void)
{
    196e:	df 93       	push	r29
    1970:	cf 93       	push	r28
    1972:	cd b7       	in	r28, 0x3d	; 61
    1974:	de b7       	in	r29, 0x3e	; 62
	//Set Direction
	DIO_U8SetPortDirection( SEV_SEG_PORT , DIO_PORT_OUT );
    1976:	80 e0       	ldi	r24, 0x00	; 0
    1978:	6f ef       	ldi	r22, 0xFF	; 255
    197a:	0e 94 f5 09 	call	0x13ea	; 0x13ea <DIO_U8SetPortDirection>
	//common anode
	DIO_U8SetPortValue( SEV_SEG_PORT , DIO_PORT_HIGH );
    197e:	80 e0       	ldi	r24, 0x00	; 0
    1980:	6f ef       	ldi	r22, 0xFF	; 255
    1982:	0e 94 3d 0a 	call	0x147a	; 0x147a <DIO_U8SetPortValue>

}
    1986:	cf 91       	pop	r28
    1988:	df 91       	pop	r29
    198a:	08 95       	ret

0000198c <SEV_SEG_VidSetNumber>:


void SEV_SEG_VidSetNumber(uint8_t Copy_U8Number) {
    198c:	df 93       	push	r29
    198e:	cf 93       	push	r28
    1990:	00 d0       	rcall	.+0      	; 0x1992 <SEV_SEG_VidSetNumber+0x6>
    1992:	0f 92       	push	r0
    1994:	cd b7       	in	r28, 0x3d	; 61
    1996:	de b7       	in	r29, 0x3e	; 62
    1998:	89 83       	std	Y+1, r24	; 0x01
    switch (Copy_U8Number) {
    199a:	89 81       	ldd	r24, Y+1	; 0x01
    199c:	28 2f       	mov	r18, r24
    199e:	30 e0       	ldi	r19, 0x00	; 0
    19a0:	3b 83       	std	Y+3, r19	; 0x03
    19a2:	2a 83       	std	Y+2, r18	; 0x02
    19a4:	8a 81       	ldd	r24, Y+2	; 0x02
    19a6:	9b 81       	ldd	r25, Y+3	; 0x03
    19a8:	84 30       	cpi	r24, 0x04	; 4
    19aa:	91 05       	cpc	r25, r1
    19ac:	09 f4       	brne	.+2      	; 0x19b0 <SEV_SEG_VidSetNumber+0x24>
    19ae:	55 c0       	rjmp	.+170    	; 0x1a5a <SEV_SEG_VidSetNumber+0xce>
    19b0:	2a 81       	ldd	r18, Y+2	; 0x02
    19b2:	3b 81       	ldd	r19, Y+3	; 0x03
    19b4:	25 30       	cpi	r18, 0x05	; 5
    19b6:	31 05       	cpc	r19, r1
    19b8:	dc f4       	brge	.+54     	; 0x19f0 <SEV_SEG_VidSetNumber+0x64>
    19ba:	8a 81       	ldd	r24, Y+2	; 0x02
    19bc:	9b 81       	ldd	r25, Y+3	; 0x03
    19be:	81 30       	cpi	r24, 0x01	; 1
    19c0:	91 05       	cpc	r25, r1
    19c2:	09 f4       	brne	.+2      	; 0x19c6 <SEV_SEG_VidSetNumber+0x3a>
    19c4:	3b c0       	rjmp	.+118    	; 0x1a3c <SEV_SEG_VidSetNumber+0xb0>
    19c6:	2a 81       	ldd	r18, Y+2	; 0x02
    19c8:	3b 81       	ldd	r19, Y+3	; 0x03
    19ca:	22 30       	cpi	r18, 0x02	; 2
    19cc:	31 05       	cpc	r19, r1
    19ce:	2c f4       	brge	.+10     	; 0x19da <SEV_SEG_VidSetNumber+0x4e>
    19d0:	8a 81       	ldd	r24, Y+2	; 0x02
    19d2:	9b 81       	ldd	r25, Y+3	; 0x03
    19d4:	00 97       	sbiw	r24, 0x00	; 0
    19d6:	69 f1       	breq	.+90     	; 0x1a32 <SEV_SEG_VidSetNumber+0xa6>
    19d8:	5d c0       	rjmp	.+186    	; 0x1a94 <SEV_SEG_VidSetNumber+0x108>
    19da:	2a 81       	ldd	r18, Y+2	; 0x02
    19dc:	3b 81       	ldd	r19, Y+3	; 0x03
    19de:	22 30       	cpi	r18, 0x02	; 2
    19e0:	31 05       	cpc	r19, r1
    19e2:	89 f1       	breq	.+98     	; 0x1a46 <SEV_SEG_VidSetNumber+0xba>
    19e4:	8a 81       	ldd	r24, Y+2	; 0x02
    19e6:	9b 81       	ldd	r25, Y+3	; 0x03
    19e8:	83 30       	cpi	r24, 0x03	; 3
    19ea:	91 05       	cpc	r25, r1
    19ec:	89 f1       	breq	.+98     	; 0x1a50 <SEV_SEG_VidSetNumber+0xc4>
    19ee:	52 c0       	rjmp	.+164    	; 0x1a94 <SEV_SEG_VidSetNumber+0x108>
    19f0:	2a 81       	ldd	r18, Y+2	; 0x02
    19f2:	3b 81       	ldd	r19, Y+3	; 0x03
    19f4:	27 30       	cpi	r18, 0x07	; 7
    19f6:	31 05       	cpc	r19, r1
    19f8:	09 f4       	brne	.+2      	; 0x19fc <SEV_SEG_VidSetNumber+0x70>
    19fa:	3e c0       	rjmp	.+124    	; 0x1a78 <SEV_SEG_VidSetNumber+0xec>
    19fc:	8a 81       	ldd	r24, Y+2	; 0x02
    19fe:	9b 81       	ldd	r25, Y+3	; 0x03
    1a00:	88 30       	cpi	r24, 0x08	; 8
    1a02:	91 05       	cpc	r25, r1
    1a04:	5c f4       	brge	.+22     	; 0x1a1c <SEV_SEG_VidSetNumber+0x90>
    1a06:	2a 81       	ldd	r18, Y+2	; 0x02
    1a08:	3b 81       	ldd	r19, Y+3	; 0x03
    1a0a:	25 30       	cpi	r18, 0x05	; 5
    1a0c:	31 05       	cpc	r19, r1
    1a0e:	51 f1       	breq	.+84     	; 0x1a64 <SEV_SEG_VidSetNumber+0xd8>
    1a10:	8a 81       	ldd	r24, Y+2	; 0x02
    1a12:	9b 81       	ldd	r25, Y+3	; 0x03
    1a14:	86 30       	cpi	r24, 0x06	; 6
    1a16:	91 05       	cpc	r25, r1
    1a18:	51 f1       	breq	.+84     	; 0x1a6e <SEV_SEG_VidSetNumber+0xe2>
    1a1a:	3c c0       	rjmp	.+120    	; 0x1a94 <SEV_SEG_VidSetNumber+0x108>
    1a1c:	2a 81       	ldd	r18, Y+2	; 0x02
    1a1e:	3b 81       	ldd	r19, Y+3	; 0x03
    1a20:	28 30       	cpi	r18, 0x08	; 8
    1a22:	31 05       	cpc	r19, r1
    1a24:	71 f1       	breq	.+92     	; 0x1a82 <SEV_SEG_VidSetNumber+0xf6>
    1a26:	8a 81       	ldd	r24, Y+2	; 0x02
    1a28:	9b 81       	ldd	r25, Y+3	; 0x03
    1a2a:	89 30       	cpi	r24, 0x09	; 9
    1a2c:	91 05       	cpc	r25, r1
    1a2e:	71 f1       	breq	.+92     	; 0x1a8c <SEV_SEG_VidSetNumber+0x100>
    1a30:	31 c0       	rjmp	.+98     	; 0x1a94 <SEV_SEG_VidSetNumber+0x108>
        case 0: DIO_U8SetPortValue(SEV_SEG_PORT, SEV_SEG_ZERO); break;
    1a32:	80 e0       	ldi	r24, 0x00	; 0
    1a34:	60 ec       	ldi	r22, 0xC0	; 192
    1a36:	0e 94 3d 0a 	call	0x147a	; 0x147a <DIO_U8SetPortValue>
    1a3a:	2c c0       	rjmp	.+88     	; 0x1a94 <SEV_SEG_VidSetNumber+0x108>
        case 1: DIO_U8SetPortValue(SEV_SEG_PORT, SEV_SEG_ONE); break;
    1a3c:	80 e0       	ldi	r24, 0x00	; 0
    1a3e:	69 ef       	ldi	r22, 0xF9	; 249
    1a40:	0e 94 3d 0a 	call	0x147a	; 0x147a <DIO_U8SetPortValue>
    1a44:	27 c0       	rjmp	.+78     	; 0x1a94 <SEV_SEG_VidSetNumber+0x108>
        case 2: DIO_U8SetPortValue(SEV_SEG_PORT, SEV_SEG_TWO); break;
    1a46:	80 e0       	ldi	r24, 0x00	; 0
    1a48:	64 ea       	ldi	r22, 0xA4	; 164
    1a4a:	0e 94 3d 0a 	call	0x147a	; 0x147a <DIO_U8SetPortValue>
    1a4e:	22 c0       	rjmp	.+68     	; 0x1a94 <SEV_SEG_VidSetNumber+0x108>
        case 3: DIO_U8SetPortValue(SEV_SEG_PORT, SEV_SEG_THREE); break;
    1a50:	80 e0       	ldi	r24, 0x00	; 0
    1a52:	60 eb       	ldi	r22, 0xB0	; 176
    1a54:	0e 94 3d 0a 	call	0x147a	; 0x147a <DIO_U8SetPortValue>
    1a58:	1d c0       	rjmp	.+58     	; 0x1a94 <SEV_SEG_VidSetNumber+0x108>
        case 4: DIO_U8SetPortValue(SEV_SEG_PORT, SEV_SEG_FOUR); break;
    1a5a:	80 e0       	ldi	r24, 0x00	; 0
    1a5c:	69 e9       	ldi	r22, 0x99	; 153
    1a5e:	0e 94 3d 0a 	call	0x147a	; 0x147a <DIO_U8SetPortValue>
    1a62:	18 c0       	rjmp	.+48     	; 0x1a94 <SEV_SEG_VidSetNumber+0x108>
        case 5: DIO_U8SetPortValue(SEV_SEG_PORT, SEV_SEG_FIVE); break;
    1a64:	80 e0       	ldi	r24, 0x00	; 0
    1a66:	62 e9       	ldi	r22, 0x92	; 146
    1a68:	0e 94 3d 0a 	call	0x147a	; 0x147a <DIO_U8SetPortValue>
    1a6c:	13 c0       	rjmp	.+38     	; 0x1a94 <SEV_SEG_VidSetNumber+0x108>
        case 6: DIO_U8SetPortValue(SEV_SEG_PORT, SEV_SEG_SIX); break;
    1a6e:	80 e0       	ldi	r24, 0x00	; 0
    1a70:	62 e8       	ldi	r22, 0x82	; 130
    1a72:	0e 94 3d 0a 	call	0x147a	; 0x147a <DIO_U8SetPortValue>
    1a76:	0e c0       	rjmp	.+28     	; 0x1a94 <SEV_SEG_VidSetNumber+0x108>
        case 7: DIO_U8SetPortValue(SEV_SEG_PORT, SEV_SEG_SEVEN); break;
    1a78:	80 e0       	ldi	r24, 0x00	; 0
    1a7a:	68 ef       	ldi	r22, 0xF8	; 248
    1a7c:	0e 94 3d 0a 	call	0x147a	; 0x147a <DIO_U8SetPortValue>
    1a80:	09 c0       	rjmp	.+18     	; 0x1a94 <SEV_SEG_VidSetNumber+0x108>
        case 8: DIO_U8SetPortValue(SEV_SEG_PORT, SEV_SEG_EIGHT); break;
    1a82:	80 e0       	ldi	r24, 0x00	; 0
    1a84:	60 e8       	ldi	r22, 0x80	; 128
    1a86:	0e 94 3d 0a 	call	0x147a	; 0x147a <DIO_U8SetPortValue>
    1a8a:	04 c0       	rjmp	.+8      	; 0x1a94 <SEV_SEG_VidSetNumber+0x108>
        case 9: DIO_U8SetPortValue(SEV_SEG_PORT, SEV_SEG_NINE); break;
    1a8c:	80 e0       	ldi	r24, 0x00	; 0
    1a8e:	60 e9       	ldi	r22, 0x90	; 144
    1a90:	0e 94 3d 0a 	call	0x147a	; 0x147a <DIO_U8SetPortValue>
        default: /* Handle invalid input */ break;
    }
}
    1a94:	0f 90       	pop	r0
    1a96:	0f 90       	pop	r0
    1a98:	0f 90       	pop	r0
    1a9a:	cf 91       	pop	r28
    1a9c:	df 91       	pop	r29
    1a9e:	08 95       	ret

00001aa0 <LED_Init>:

#include "led.h"

#include "..\..\MCAL\DIO\DIO_int.h"

void LED_Init() {
    1aa0:	df 93       	push	r29
    1aa2:	cf 93       	push	r28
    1aa4:	cd b7       	in	r28, 0x3d	; 61
    1aa6:	de b7       	in	r29, 0x3e	; 62
    DIO_U8SetPinDirection(LED_CAR_PARKED, DIO_OUTPUT);
    1aa8:	82 e0       	ldi	r24, 0x02	; 2
    1aaa:	65 e0       	ldi	r22, 0x05	; 5
    1aac:	41 e0       	ldi	r20, 0x01	; 1
    1aae:	0e 94 cf 07 	call	0xf9e	; 0xf9e <DIO_U8SetPinDirection>
    DIO_U8SetPinDirection(LED_STEPPER_ON, DIO_OUTPUT);
    1ab2:	82 e0       	ldi	r24, 0x02	; 2
    1ab4:	66 e0       	ldi	r22, 0x06	; 6
    1ab6:	41 e0       	ldi	r20, 0x01	; 1
    1ab8:	0e 94 cf 07 	call	0xf9e	; 0xf9e <DIO_U8SetPinDirection>

    DIO_U8SetPinDirection(LED_WIFI_CONNECTED, DIO_OUTPUT);
    1abc:	82 e0       	ldi	r24, 0x02	; 2
    1abe:	63 e0       	ldi	r22, 0x03	; 3
    1ac0:	41 e0       	ldi	r20, 0x01	; 1
    1ac2:	0e 94 cf 07 	call	0xf9e	; 0xf9e <DIO_U8SetPinDirection>
    DIO_U8SetPinDirection(LED_WIFI_ON, DIO_OUTPUT);
    1ac6:	82 e0       	ldi	r24, 0x02	; 2
    1ac8:	62 e0       	ldi	r22, 0x02	; 2
    1aca:	41 e0       	ldi	r20, 0x01	; 1
    1acc:	0e 94 cf 07 	call	0xf9e	; 0xf9e <DIO_U8SetPinDirection>
    DIO_U8SetPinDirection(LED_DATA_TRANSFERE, DIO_OUTPUT);
    1ad0:	82 e0       	ldi	r24, 0x02	; 2
    1ad2:	64 e0       	ldi	r22, 0x04	; 4
    1ad4:	41 e0       	ldi	r20, 0x01	; 1
    1ad6:	0e 94 cf 07 	call	0xf9e	; 0xf9e <DIO_U8SetPinDirection>
}
    1ada:	cf 91       	pop	r28
    1adc:	df 91       	pop	r29
    1ade:	08 95       	ret

00001ae0 <LED_On>:

void LED_On(uint8_t port, uint8_t pin) {
    1ae0:	df 93       	push	r29
    1ae2:	cf 93       	push	r28
    1ae4:	00 d0       	rcall	.+0      	; 0x1ae6 <LED_On+0x6>
    1ae6:	cd b7       	in	r28, 0x3d	; 61
    1ae8:	de b7       	in	r29, 0x3e	; 62
    1aea:	89 83       	std	Y+1, r24	; 0x01
    1aec:	6a 83       	std	Y+2, r22	; 0x02
    DIO_U8SetPinValue(port, pin, DIO_HIGH);
    1aee:	89 81       	ldd	r24, Y+1	; 0x01
    1af0:	6a 81       	ldd	r22, Y+2	; 0x02
    1af2:	41 e0       	ldi	r20, 0x01	; 1
    1af4:	0e 94 e2 08 	call	0x11c4	; 0x11c4 <DIO_U8SetPinValue>
}
    1af8:	0f 90       	pop	r0
    1afa:	0f 90       	pop	r0
    1afc:	cf 91       	pop	r28
    1afe:	df 91       	pop	r29
    1b00:	08 95       	ret

00001b02 <LED_Off>:

void LED_Off(uint8_t port, uint8_t pin) {
    1b02:	df 93       	push	r29
    1b04:	cf 93       	push	r28
    1b06:	00 d0       	rcall	.+0      	; 0x1b08 <LED_Off+0x6>
    1b08:	cd b7       	in	r28, 0x3d	; 61
    1b0a:	de b7       	in	r29, 0x3e	; 62
    1b0c:	89 83       	std	Y+1, r24	; 0x01
    1b0e:	6a 83       	std	Y+2, r22	; 0x02
    DIO_U8SetPinValue(port, pin, DIO_LOW);
    1b10:	89 81       	ldd	r24, Y+1	; 0x01
    1b12:	6a 81       	ldd	r22, Y+2	; 0x02
    1b14:	40 e0       	ldi	r20, 0x00	; 0
    1b16:	0e 94 e2 08 	call	0x11c4	; 0x11c4 <DIO_U8SetPinValue>
}
    1b1a:	0f 90       	pop	r0
    1b1c:	0f 90       	pop	r0
    1b1e:	cf 91       	pop	r28
    1b20:	df 91       	pop	r29
    1b22:	08 95       	ret

00001b24 <LED_Toggle>:

void LED_Toggle(uint8_t port, uint8_t pin) {
    1b24:	df 93       	push	r29
    1b26:	cf 93       	push	r28
    1b28:	00 d0       	rcall	.+0      	; 0x1b2a <LED_Toggle+0x6>
    1b2a:	cd b7       	in	r28, 0x3d	; 61
    1b2c:	de b7       	in	r29, 0x3e	; 62
    1b2e:	89 83       	std	Y+1, r24	; 0x01
    1b30:	6a 83       	std	Y+2, r22	; 0x02
    DIO_U8TogglePinValue(port, pin);
    1b32:	89 81       	ldd	r24, Y+1	; 0x01
    1b34:	6a 81       	ldd	r22, Y+2	; 0x02
    1b36:	0e 94 85 0a 	call	0x150a	; 0x150a <DIO_U8TogglePinValue>
}
    1b3a:	0f 90       	pop	r0
    1b3c:	0f 90       	pop	r0
    1b3e:	cf 91       	pop	r28
    1b40:	df 91       	pop	r29
    1b42:	08 95       	ret

00001b44 <IR_Init>:
#include "..\..\MCAL\EX_INT\EX_INT_int.h"

/**
 * @brief Initializes the IR sensor module and sets up the external interrupt.
 */
void IR_Init(void) {
    1b44:	df 93       	push	r29
    1b46:	cf 93       	push	r28
    1b48:	cd b7       	in	r28, 0x3d	; 61
    1b4a:	de b7       	in	r29, 0x3e	; 62
    // Set the IR sensor pin as input
    DIO_U8SetPinDirection(IR_SENSOR_PORT, IR_SENSOR_PIN, DIO_INPUT);
    1b4c:	83 e0       	ldi	r24, 0x03	; 3
    1b4e:	62 e0       	ldi	r22, 0x02	; 2
    1b50:	40 e0       	ldi	r20, 0x00	; 0
    1b52:	0e 94 cf 07 	call	0xf9e	; 0xf9e <DIO_U8SetPinDirection>
    DIO_U8SetPinValue(IR_SENSOR_PORT, IR_SENSOR_PIN, DIO_HIGH);
    1b56:	83 e0       	ldi	r24, 0x03	; 3
    1b58:	62 e0       	ldi	r22, 0x02	; 2
    1b5a:	41 e0       	ldi	r20, 0x01	; 1
    1b5c:	0e 94 e2 08 	call	0x11c4	; 0x11c4 <DIO_U8SetPinValue>
    // Initialize the external interrupt
    EXTI0_VoidInit();
    1b60:	0e 94 75 05 	call	0xaea	; 0xaea <EXTI0_VoidInit>
    //EXTI0_voidSetSenseControl(FAILING_EDGE);
    EXTI0_voidEnable();
    1b64:	0e 94 be 06 	call	0xd7c	; 0xd7c <EXTI0_voidEnable>

}
    1b68:	cf 91       	pop	r28
    1b6a:	df 91       	pop	r29
    1b6c:	08 95       	ret

00001b6e <IR_Disable>:
void IR_Disable(){
    1b6e:	df 93       	push	r29
    1b70:	cf 93       	push	r28
    1b72:	cd b7       	in	r28, 0x3d	; 61
    1b74:	de b7       	in	r29, 0x3e	; 62

	EXTI0_voidDisable();
    1b76:	0e 94 cc 06 	call	0xd98	; 0xd98 <EXTI0_voidDisable>
}
    1b7a:	cf 91       	pop	r28
    1b7c:	df 91       	pop	r29
    1b7e:	08 95       	ret

00001b80 <IR_Enable>:

void IR_Enable(){
    1b80:	df 93       	push	r29
    1b82:	cf 93       	push	r28
    1b84:	cd b7       	in	r28, 0x3d	; 61
    1b86:	de b7       	in	r29, 0x3e	; 62

	EXTI0_voidEnable();
    1b88:	0e 94 be 06 	call	0xd7c	; 0xd7c <EXTI0_voidEnable>
}
    1b8c:	cf 91       	pop	r28
    1b8e:	df 91       	pop	r29
    1b90:	08 95       	ret

00001b92 <IR_SetCallback>:
/**
 * @brief Sets a callback function to be called when the IR sensor detects a car parked correctly.
 *
 * @param callback The callback function to set.
 */
void IR_SetCallback(void (*callback)(void)) {
    1b92:	df 93       	push	r29
    1b94:	cf 93       	push	r28
    1b96:	00 d0       	rcall	.+0      	; 0x1b98 <IR_SetCallback+0x6>
    1b98:	cd b7       	in	r28, 0x3d	; 61
    1b9a:	de b7       	in	r29, 0x3e	; 62
    1b9c:	9a 83       	std	Y+2, r25	; 0x02
    1b9e:	89 83       	std	Y+1, r24	; 0x01
    EXTI0_voidSetCallBack(callback);
    1ba0:	89 81       	ldd	r24, Y+1	; 0x01
    1ba2:	9a 81       	ldd	r25, Y+2	; 0x02
    1ba4:	0e 94 12 07 	call	0xe24	; 0xe24 <EXTI0_voidSetCallBack>
}
    1ba8:	0f 90       	pop	r0
    1baa:	0f 90       	pop	r0
    1bac:	cf 91       	pop	r28
    1bae:	df 91       	pop	r29
    1bb0:	08 95       	ret

00001bb2 <ESP8266_Init>:
#include "ESP8266_private.h"
#include "ESP8266_config.h"

#include <string.h>

void ESP8266_Init(void) {
    1bb2:	df 93       	push	r29
    1bb4:	cf 93       	push	r28
    1bb6:	cd b7       	in	r28, 0x3d	; 61
    1bb8:	de b7       	in	r29, 0x3e	; 62
    UART_vInit();
    1bba:	0e 94 49 00 	call	0x92	; 0x92 <UART_vInit>
    DIO_U8SetPinDirection(WIFI_POWER_LED_PORT, WIFI_POWER_LED_PIN, DIO_OUTPUT);
    1bbe:	82 e0       	ldi	r24, 0x02	; 2
    1bc0:	60 e0       	ldi	r22, 0x00	; 0
    1bc2:	41 e0       	ldi	r20, 0x01	; 1
    1bc4:	0e 94 cf 07 	call	0xf9e	; 0xf9e <DIO_U8SetPinDirection>
    DIO_U8SetPinDirection(WIFI_CONNECTED_LED_PORT, WIFI_CONNECTED_LED_PIN, DIO_OUTPUT);
    1bc8:	82 e0       	ldi	r24, 0x02	; 2
    1bca:	61 e0       	ldi	r22, 0x01	; 1
    1bcc:	41 e0       	ldi	r20, 0x01	; 1
    1bce:	0e 94 cf 07 	call	0xf9e	; 0xf9e <DIO_U8SetPinDirection>
    DIO_U8SetPinDirection(WIFI_SENDING_LED_PORT, WIFI_SENDING_LED_PIN, DIO_OUTPUT);
    1bd2:	82 e0       	ldi	r24, 0x02	; 2
    1bd4:	62 e0       	ldi	r22, 0x02	; 2
    1bd6:	41 e0       	ldi	r20, 0x01	; 1
    1bd8:	0e 94 cf 07 	call	0xf9e	; 0xf9e <DIO_U8SetPinDirection>

    DIO_U8SetPinValue(WIFI_POWER_LED_PORT, WIFI_POWER_LED_PIN, DIO_HIGH); // Turn on power LED
    1bdc:	82 e0       	ldi	r24, 0x02	; 2
    1bde:	60 e0       	ldi	r22, 0x00	; 0
    1be0:	41 e0       	ldi	r20, 0x01	; 1
    1be2:	0e 94 e2 08 	call	0x11c4	; 0x11c4 <DIO_U8SetPinValue>

    delay_milliseconds(200); // Wait for the ESP8266 to initialize
    1be6:	68 ec       	ldi	r22, 0xC8	; 200
    1be8:	70 e0       	ldi	r23, 0x00	; 0
    1bea:	80 e0       	ldi	r24, 0x00	; 0
    1bec:	90 e0       	ldi	r25, 0x00	; 0
    1bee:	0e 94 95 0b 	call	0x172a	; 0x172a <delay_milliseconds>

    UART_u8SendStringSynch((const uint8_t*)"AT\r\n");
    1bf2:	80 e6       	ldi	r24, 0x60	; 96
    1bf4:	90 e0       	ldi	r25, 0x00	; 0
    1bf6:	0e 94 ad 00 	call	0x15a	; 0x15a <UART_u8SendStringSynch>
    delay_milliseconds(1000); // Small delay before next command
    1bfa:	68 ee       	ldi	r22, 0xE8	; 232
    1bfc:	73 e0       	ldi	r23, 0x03	; 3
    1bfe:	80 e0       	ldi	r24, 0x00	; 0
    1c00:	90 e0       	ldi	r25, 0x00	; 0
    1c02:	0e 94 95 0b 	call	0x172a	; 0x172a <delay_milliseconds>

    UART_u8SendStringSynch((const uint8_t*)"AT+RST\r\n");
    1c06:	85 e6       	ldi	r24, 0x65	; 101
    1c08:	90 e0       	ldi	r25, 0x00	; 0
    1c0a:	0e 94 ad 00 	call	0x15a	; 0x15a <UART_u8SendStringSynch>
    delay_milliseconds(10000); // Wait for the ESP8266 to reset
    1c0e:	60 e1       	ldi	r22, 0x10	; 16
    1c10:	77 e2       	ldi	r23, 0x27	; 39
    1c12:	80 e0       	ldi	r24, 0x00	; 0
    1c14:	90 e0       	ldi	r25, 0x00	; 0
    1c16:	0e 94 95 0b 	call	0x172a	; 0x172a <delay_milliseconds>

    UART_u8SendStringSynch((const uint8_t*)"AT+CWMODE=1\r\n");
    1c1a:	8e e6       	ldi	r24, 0x6E	; 110
    1c1c:	90 e0       	ldi	r25, 0x00	; 0
    1c1e:	0e 94 ad 00 	call	0x15a	; 0x15a <UART_u8SendStringSynch>
    delay_milliseconds(1000); // Small delay before next command
    1c22:	68 ee       	ldi	r22, 0xE8	; 232
    1c24:	73 e0       	ldi	r23, 0x03	; 3
    1c26:	80 e0       	ldi	r24, 0x00	; 0
    1c28:	90 e0       	ldi	r25, 0x00	; 0
    1c2a:	0e 94 95 0b 	call	0x172a	; 0x172a <delay_milliseconds>
}
    1c2e:	cf 91       	pop	r28
    1c30:	df 91       	pop	r29
    1c32:	08 95       	ret

00001c34 <ESP8266_ConnectToWiFi>:

void ESP8266_ConnectToWiFi(void) {
    1c34:	df 93       	push	r29
    1c36:	cf 93       	push	r28
    1c38:	cd b7       	in	r28, 0x3d	; 61
    1c3a:	de b7       	in	r29, 0x3e	; 62
    1c3c:	c4 56       	subi	r28, 0x64	; 100
    1c3e:	d0 40       	sbci	r29, 0x00	; 0
    1c40:	0f b6       	in	r0, 0x3f	; 63
    1c42:	f8 94       	cli
    1c44:	de bf       	out	0x3e, r29	; 62
    1c46:	0f be       	out	0x3f, r0	; 63
    1c48:	cd bf       	out	0x3d, r28	; 61
    char command[100];
    snprintf(command, sizeof(command), "AT+CWJAP=\"%s\",\"%s\"\r\n", ESP8266_WIFI_SSID, ESP8266_WIFI_PASSWORD);
    1c4a:	8d b7       	in	r24, 0x3d	; 61
    1c4c:	9e b7       	in	r25, 0x3e	; 62
    1c4e:	0a 97       	sbiw	r24, 0x0a	; 10
    1c50:	0f b6       	in	r0, 0x3f	; 63
    1c52:	f8 94       	cli
    1c54:	9e bf       	out	0x3e, r25	; 62
    1c56:	0f be       	out	0x3f, r0	; 63
    1c58:	8d bf       	out	0x3d, r24	; 61
    1c5a:	ed b7       	in	r30, 0x3d	; 61
    1c5c:	fe b7       	in	r31, 0x3e	; 62
    1c5e:	31 96       	adiw	r30, 0x01	; 1
    1c60:	ce 01       	movw	r24, r28
    1c62:	01 96       	adiw	r24, 0x01	; 1
    1c64:	91 83       	std	Z+1, r25	; 0x01
    1c66:	80 83       	st	Z, r24
    1c68:	84 e6       	ldi	r24, 0x64	; 100
    1c6a:	90 e0       	ldi	r25, 0x00	; 0
    1c6c:	93 83       	std	Z+3, r25	; 0x03
    1c6e:	82 83       	std	Z+2, r24	; 0x02
    1c70:	8c e7       	ldi	r24, 0x7C	; 124
    1c72:	90 e0       	ldi	r25, 0x00	; 0
    1c74:	95 83       	std	Z+5, r25	; 0x05
    1c76:	84 83       	std	Z+4, r24	; 0x04
    1c78:	81 e9       	ldi	r24, 0x91	; 145
    1c7a:	90 e0       	ldi	r25, 0x00	; 0
    1c7c:	97 83       	std	Z+7, r25	; 0x07
    1c7e:	86 83       	std	Z+6, r24	; 0x06
    1c80:	88 e9       	ldi	r24, 0x98	; 152
    1c82:	90 e0       	ldi	r25, 0x00	; 0
    1c84:	91 87       	std	Z+9, r25	; 0x09
    1c86:	80 87       	std	Z+8, r24	; 0x08
    1c88:	0e 94 fe 13 	call	0x27fc	; 0x27fc <snprintf>
    1c8c:	8d b7       	in	r24, 0x3d	; 61
    1c8e:	9e b7       	in	r25, 0x3e	; 62
    1c90:	0a 96       	adiw	r24, 0x0a	; 10
    1c92:	0f b6       	in	r0, 0x3f	; 63
    1c94:	f8 94       	cli
    1c96:	9e bf       	out	0x3e, r25	; 62
    1c98:	0f be       	out	0x3f, r0	; 63
    1c9a:	8d bf       	out	0x3d, r24	; 61
    UART_u8SendStringSynch((const uint8_t*)command);
    1c9c:	ce 01       	movw	r24, r28
    1c9e:	01 96       	adiw	r24, 0x01	; 1
    1ca0:	0e 94 ad 00 	call	0x15a	; 0x15a <UART_u8SendStringSynch>

    delay_milliseconds(10000); // Wait for the ESP8266 to connect to Wi-Fi
    1ca4:	60 e1       	ldi	r22, 0x10	; 16
    1ca6:	77 e2       	ldi	r23, 0x27	; 39
    1ca8:	80 e0       	ldi	r24, 0x00	; 0
    1caa:	90 e0       	ldi	r25, 0x00	; 0
    1cac:	0e 94 95 0b 	call	0x172a	; 0x172a <delay_milliseconds>

    DIO_U8SetPinValue(WIFI_CONNECTED_LED_PORT, WIFI_CONNECTED_LED_PIN, DIO_HIGH); // Turn on connected LED
    1cb0:	82 e0       	ldi	r24, 0x02	; 2
    1cb2:	61 e0       	ldi	r22, 0x01	; 1
    1cb4:	41 e0       	ldi	r20, 0x01	; 1
    1cb6:	0e 94 e2 08 	call	0x11c4	; 0x11c4 <DIO_U8SetPinValue>
}
    1cba:	cc 59       	subi	r28, 0x9C	; 156
    1cbc:	df 4f       	sbci	r29, 0xFF	; 255
    1cbe:	0f b6       	in	r0, 0x3f	; 63
    1cc0:	f8 94       	cli
    1cc2:	de bf       	out	0x3e, r29	; 62
    1cc4:	0f be       	out	0x3f, r0	; 63
    1cc6:	cd bf       	out	0x3d, r28	; 61
    1cc8:	cf 91       	pop	r28
    1cca:	df 91       	pop	r29
    1ccc:	08 95       	ret

00001cce <ESP8266_SendData>:

void ESP8266_SendData(const char *data) {
    1cce:	df 93       	push	r29
    1cd0:	cf 93       	push	r28
    1cd2:	cd b7       	in	r28, 0x3d	; 61
    1cd4:	de b7       	in	r29, 0x3e	; 62
    1cd6:	c6 56       	subi	r28, 0x66	; 102
    1cd8:	d0 40       	sbci	r29, 0x00	; 0
    1cda:	0f b6       	in	r0, 0x3f	; 63
    1cdc:	f8 94       	cli
    1cde:	de bf       	out	0x3e, r29	; 62
    1ce0:	0f be       	out	0x3f, r0	; 63
    1ce2:	cd bf       	out	0x3d, r28	; 61
    1ce4:	fe 01       	movw	r30, r28
    1ce6:	eb 59       	subi	r30, 0x9B	; 155
    1ce8:	ff 4f       	sbci	r31, 0xFF	; 255
    1cea:	91 83       	std	Z+1, r25	; 0x01
    1cec:	80 83       	st	Z, r24
    char command[100];

    DIO_U8SetPinValue(WIFI_SENDING_LED_PORT, WIFI_SENDING_LED_PIN, DIO_HIGH); // Turn on sending LED
    1cee:	82 e0       	ldi	r24, 0x02	; 2
    1cf0:	62 e0       	ldi	r22, 0x02	; 2
    1cf2:	41 e0       	ldi	r20, 0x01	; 1
    1cf4:	0e 94 e2 08 	call	0x11c4	; 0x11c4 <DIO_U8SetPinValue>

    snprintf(command, sizeof(command), "AT+CIPSTART=\"TCP\",\"%s\",%s\r\n", ESP8266_SERVER_URL, ESP8266_SERVER_PORT);
    1cf8:	8d b7       	in	r24, 0x3d	; 61
    1cfa:	9e b7       	in	r25, 0x3e	; 62
    1cfc:	0a 97       	sbiw	r24, 0x0a	; 10
    1cfe:	0f b6       	in	r0, 0x3f	; 63
    1d00:	f8 94       	cli
    1d02:	9e bf       	out	0x3e, r25	; 62
    1d04:	0f be       	out	0x3f, r0	; 63
    1d06:	8d bf       	out	0x3d, r24	; 61
    1d08:	ed b7       	in	r30, 0x3d	; 61
    1d0a:	fe b7       	in	r31, 0x3e	; 62
    1d0c:	31 96       	adiw	r30, 0x01	; 1
    1d0e:	ce 01       	movw	r24, r28
    1d10:	01 96       	adiw	r24, 0x01	; 1
    1d12:	91 83       	std	Z+1, r25	; 0x01
    1d14:	80 83       	st	Z, r24
    1d16:	84 e6       	ldi	r24, 0x64	; 100
    1d18:	90 e0       	ldi	r25, 0x00	; 0
    1d1a:	93 83       	std	Z+3, r25	; 0x03
    1d1c:	82 83       	std	Z+2, r24	; 0x02
    1d1e:	81 ea       	ldi	r24, 0xA1	; 161
    1d20:	90 e0       	ldi	r25, 0x00	; 0
    1d22:	95 83       	std	Z+5, r25	; 0x05
    1d24:	84 83       	std	Z+4, r24	; 0x04
    1d26:	8d eb       	ldi	r24, 0xBD	; 189
    1d28:	90 e0       	ldi	r25, 0x00	; 0
    1d2a:	97 83       	std	Z+7, r25	; 0x07
    1d2c:	86 83       	std	Z+6, r24	; 0x06
    1d2e:	83 ed       	ldi	r24, 0xD3	; 211
    1d30:	90 e0       	ldi	r25, 0x00	; 0
    1d32:	91 87       	std	Z+9, r25	; 0x09
    1d34:	80 87       	std	Z+8, r24	; 0x08
    1d36:	0e 94 fe 13 	call	0x27fc	; 0x27fc <snprintf>
    1d3a:	8d b7       	in	r24, 0x3d	; 61
    1d3c:	9e b7       	in	r25, 0x3e	; 62
    1d3e:	0a 96       	adiw	r24, 0x0a	; 10
    1d40:	0f b6       	in	r0, 0x3f	; 63
    1d42:	f8 94       	cli
    1d44:	9e bf       	out	0x3e, r25	; 62
    1d46:	0f be       	out	0x3f, r0	; 63
    1d48:	8d bf       	out	0x3d, r24	; 61
    UART_u8SendStringSynch((const uint8_t*)command);
    1d4a:	ce 01       	movw	r24, r28
    1d4c:	01 96       	adiw	r24, 0x01	; 1
    1d4e:	0e 94 ad 00 	call	0x15a	; 0x15a <UART_u8SendStringSynch>
    delay_milliseconds(2000); // Wait for the connection to establish
    1d52:	60 ed       	ldi	r22, 0xD0	; 208
    1d54:	77 e0       	ldi	r23, 0x07	; 7
    1d56:	80 e0       	ldi	r24, 0x00	; 0
    1d58:	90 e0       	ldi	r25, 0x00	; 0
    1d5a:	0e 94 95 0b 	call	0x172a	; 0x172a <delay_milliseconds>

    snprintf(command, sizeof(command), "AT+CIPSEND=%d\r\n", strlen(data));
    1d5e:	fe 01       	movw	r30, r28
    1d60:	eb 59       	subi	r30, 0x9B	; 155
    1d62:	ff 4f       	sbci	r31, 0xFF	; 255
    1d64:	80 81       	ld	r24, Z
    1d66:	91 81       	ldd	r25, Z+1	; 0x01
    1d68:	0e 94 f5 13 	call	0x27ea	; 0x27ea <strlen>
    1d6c:	9c 01       	movw	r18, r24
    1d6e:	8d b7       	in	r24, 0x3d	; 61
    1d70:	9e b7       	in	r25, 0x3e	; 62
    1d72:	08 97       	sbiw	r24, 0x08	; 8
    1d74:	0f b6       	in	r0, 0x3f	; 63
    1d76:	f8 94       	cli
    1d78:	9e bf       	out	0x3e, r25	; 62
    1d7a:	0f be       	out	0x3f, r0	; 63
    1d7c:	8d bf       	out	0x3d, r24	; 61
    1d7e:	ed b7       	in	r30, 0x3d	; 61
    1d80:	fe b7       	in	r31, 0x3e	; 62
    1d82:	31 96       	adiw	r30, 0x01	; 1
    1d84:	ce 01       	movw	r24, r28
    1d86:	01 96       	adiw	r24, 0x01	; 1
    1d88:	91 83       	std	Z+1, r25	; 0x01
    1d8a:	80 83       	st	Z, r24
    1d8c:	84 e6       	ldi	r24, 0x64	; 100
    1d8e:	90 e0       	ldi	r25, 0x00	; 0
    1d90:	93 83       	std	Z+3, r25	; 0x03
    1d92:	82 83       	std	Z+2, r24	; 0x02
    1d94:	86 ed       	ldi	r24, 0xD6	; 214
    1d96:	90 e0       	ldi	r25, 0x00	; 0
    1d98:	95 83       	std	Z+5, r25	; 0x05
    1d9a:	84 83       	std	Z+4, r24	; 0x04
    1d9c:	37 83       	std	Z+7, r19	; 0x07
    1d9e:	26 83       	std	Z+6, r18	; 0x06
    1da0:	0e 94 fe 13 	call	0x27fc	; 0x27fc <snprintf>
    1da4:	8d b7       	in	r24, 0x3d	; 61
    1da6:	9e b7       	in	r25, 0x3e	; 62
    1da8:	08 96       	adiw	r24, 0x08	; 8
    1daa:	0f b6       	in	r0, 0x3f	; 63
    1dac:	f8 94       	cli
    1dae:	9e bf       	out	0x3e, r25	; 62
    1db0:	0f be       	out	0x3f, r0	; 63
    1db2:	8d bf       	out	0x3d, r24	; 61
    UART_u8SendStringSynch((const uint8_t*)command);
    1db4:	ce 01       	movw	r24, r28
    1db6:	01 96       	adiw	r24, 0x01	; 1
    1db8:	0e 94 ad 00 	call	0x15a	; 0x15a <UART_u8SendStringSynch>
    delay_milliseconds(200); // Wait for the prompt
    1dbc:	68 ec       	ldi	r22, 0xC8	; 200
    1dbe:	70 e0       	ldi	r23, 0x00	; 0
    1dc0:	80 e0       	ldi	r24, 0x00	; 0
    1dc2:	90 e0       	ldi	r25, 0x00	; 0
    1dc4:	0e 94 95 0b 	call	0x172a	; 0x172a <delay_milliseconds>

    UART_u8SendStringSynch((const uint8_t*)data);
    1dc8:	fe 01       	movw	r30, r28
    1dca:	eb 59       	subi	r30, 0x9B	; 155
    1dcc:	ff 4f       	sbci	r31, 0xFF	; 255
    1dce:	80 81       	ld	r24, Z
    1dd0:	91 81       	ldd	r25, Z+1	; 0x01
    1dd2:	0e 94 ad 00 	call	0x15a	; 0x15a <UART_u8SendStringSynch>
    delay_milliseconds(2000); // Wait for the data to be sent
    1dd6:	60 ed       	ldi	r22, 0xD0	; 208
    1dd8:	77 e0       	ldi	r23, 0x07	; 7
    1dda:	80 e0       	ldi	r24, 0x00	; 0
    1ddc:	90 e0       	ldi	r25, 0x00	; 0
    1dde:	0e 94 95 0b 	call	0x172a	; 0x172a <delay_milliseconds>

    DIO_U8SetPinValue(WIFI_SENDING_LED_PORT, WIFI_SENDING_LED_PIN, DIO_LOW); // Turn off sending LED
    1de2:	82 e0       	ldi	r24, 0x02	; 2
    1de4:	62 e0       	ldi	r22, 0x02	; 2
    1de6:	40 e0       	ldi	r20, 0x00	; 0
    1de8:	0e 94 e2 08 	call	0x11c4	; 0x11c4 <DIO_U8SetPinValue>
}
    1dec:	ca 59       	subi	r28, 0x9A	; 154
    1dee:	df 4f       	sbci	r29, 0xFF	; 255
    1df0:	0f b6       	in	r0, 0x3f	; 63
    1df2:	f8 94       	cli
    1df4:	de bf       	out	0x3e, r29	; 62
    1df6:	0f be       	out	0x3f, r0	; 63
    1df8:	cd bf       	out	0x3d, r28	; 61
    1dfa:	cf 91       	pop	r28
    1dfc:	df 91       	pop	r29
    1dfe:	08 95       	ret

00001e00 <eeprom_init>:
#include "../../LIB/DELAY/DELAY_interface.h"
#include "eeprom.h"


void eeprom_init(void)
{
    1e00:	df 93       	push	r29
    1e02:	cf 93       	push	r28
    1e04:	cd b7       	in	r28, 0x3d	; 61
    1e06:	de b7       	in	r29, 0x3e	; 62
    i2c_init_master();
    1e08:	0e 94 f9 03 	call	0x7f2	; 0x7f2 <i2c_init_master>
}
    1e0c:	cf 91       	pop	r28
    1e0e:	df 91       	pop	r29
    1e10:	08 95       	ret

00001e12 <eeprom_write_byte>:

void eeprom_write_byte(unsigned short address, unsigned char data)
{
    1e12:	df 93       	push	r29
    1e14:	cf 93       	push	r28
    1e16:	00 d0       	rcall	.+0      	; 0x1e18 <eeprom_write_byte+0x6>
    1e18:	0f 92       	push	r0
    1e1a:	cd b7       	in	r28, 0x3d	; 61
    1e1c:	de b7       	in	r29, 0x3e	; 62
    1e1e:	9a 83       	std	Y+2, r25	; 0x02
    1e20:	89 83       	std	Y+1, r24	; 0x01
    1e22:	6b 83       	std	Y+3, r22	; 0x03
    i2c_start();
    1e24:	0e 94 22 04 	call	0x844	; 0x844 <i2c_start>

    i2c_send_slave_address_with_write_req(0x50 | ((address & 0x0700) >> 8));
    1e28:	89 81       	ldd	r24, Y+1	; 0x01
    1e2a:	9a 81       	ldd	r25, Y+2	; 0x02
    1e2c:	80 70       	andi	r24, 0x00	; 0
    1e2e:	97 70       	andi	r25, 0x07	; 7
    1e30:	89 2f       	mov	r24, r25
    1e32:	99 27       	eor	r25, r25
    1e34:	80 65       	ori	r24, 0x50	; 80
    1e36:	0e 94 56 04 	call	0x8ac	; 0x8ac <i2c_send_slave_address_with_write_req>

    i2c_write_byte((unsigned char)address);
    1e3a:	89 81       	ldd	r24, Y+1	; 0x01
    1e3c:	0e 94 9e 04 	call	0x93c	; 0x93c <i2c_write_byte>

    i2c_write_byte(data);
    1e40:	8b 81       	ldd	r24, Y+3	; 0x03
    1e42:	0e 94 9e 04 	call	0x93c	; 0x93c <i2c_write_byte>

    i2c_stop();
    1e46:	0e 94 dc 04 	call	0x9b8	; 0x9b8 <i2c_stop>
    delay_milliseconds(4);
    1e4a:	64 e0       	ldi	r22, 0x04	; 4
    1e4c:	70 e0       	ldi	r23, 0x00	; 0
    1e4e:	80 e0       	ldi	r24, 0x00	; 0
    1e50:	90 e0       	ldi	r25, 0x00	; 0
    1e52:	0e 94 95 0b 	call	0x172a	; 0x172a <delay_milliseconds>
    return;
}
    1e56:	0f 90       	pop	r0
    1e58:	0f 90       	pop	r0
    1e5a:	0f 90       	pop	r0
    1e5c:	cf 91       	pop	r28
    1e5e:	df 91       	pop	r29
    1e60:	08 95       	ret

00001e62 <eeprom_read_byte>:

unsigned char eeprom_read_byte(unsigned short address)
{
    1e62:	df 93       	push	r29
    1e64:	cf 93       	push	r28
    1e66:	00 d0       	rcall	.+0      	; 0x1e68 <eeprom_read_byte+0x6>
    1e68:	0f 92       	push	r0
    1e6a:	cd b7       	in	r28, 0x3d	; 61
    1e6c:	de b7       	in	r29, 0x3e	; 62
    1e6e:	9b 83       	std	Y+3, r25	; 0x03
    1e70:	8a 83       	std	Y+2, r24	; 0x02
    unsigned char data;
    i2c_start();
    1e72:	0e 94 22 04 	call	0x844	; 0x844 <i2c_start>

    i2c_send_slave_address_with_write_req(0x50 | ((address & 0x0700) >> 8));
    1e76:	8a 81       	ldd	r24, Y+2	; 0x02
    1e78:	9b 81       	ldd	r25, Y+3	; 0x03
    1e7a:	80 70       	andi	r24, 0x00	; 0
    1e7c:	97 70       	andi	r25, 0x07	; 7
    1e7e:	89 2f       	mov	r24, r25
    1e80:	99 27       	eor	r25, r25
    1e82:	80 65       	ori	r24, 0x50	; 80
    1e84:	0e 94 56 04 	call	0x8ac	; 0x8ac <i2c_send_slave_address_with_write_req>

    i2c_write_byte((unsigned char)address);
    1e88:	8a 81       	ldd	r24, Y+2	; 0x02
    1e8a:	0e 94 9e 04 	call	0x93c	; 0x93c <i2c_write_byte>

    i2c_repeated_start();
    1e8e:	0e 94 3c 04 	call	0x878	; 0x878 <i2c_repeated_start>

    i2c_send_slave_address_with_read_req(0x50 | ((address & 0x0700) >> 8));
    1e92:	8a 81       	ldd	r24, Y+2	; 0x02
    1e94:	9b 81       	ldd	r25, Y+3	; 0x03
    1e96:	80 70       	andi	r24, 0x00	; 0
    1e98:	97 70       	andi	r25, 0x07	; 7
    1e9a:	89 2f       	mov	r24, r25
    1e9c:	99 27       	eor	r25, r25
    1e9e:	80 65       	ori	r24, 0x50	; 80
    1ea0:	0e 94 78 04 	call	0x8f0	; 0x8f0 <i2c_send_slave_address_with_read_req>

    data = i2c_read_byte();
    1ea4:	0e 94 bf 04 	call	0x97e	; 0x97e <i2c_read_byte>
    1ea8:	89 83       	std	Y+1, r24	; 0x01

    i2c_stop();
    1eaa:	0e 94 dc 04 	call	0x9b8	; 0x9b8 <i2c_stop>
    delay_milliseconds(4);
    1eae:	64 e0       	ldi	r22, 0x04	; 4
    1eb0:	70 e0       	ldi	r23, 0x00	; 0
    1eb2:	80 e0       	ldi	r24, 0x00	; 0
    1eb4:	90 e0       	ldi	r25, 0x00	; 0
    1eb6:	0e 94 95 0b 	call	0x172a	; 0x172a <delay_milliseconds>
    return data;
    1eba:	89 81       	ldd	r24, Y+1	; 0x01
}
    1ebc:	0f 90       	pop	r0
    1ebe:	0f 90       	pop	r0
    1ec0:	0f 90       	pop	r0
    1ec2:	cf 91       	pop	r28
    1ec4:	df 91       	pop	r29
    1ec6:	08 95       	ret

00001ec8 <eeprom_write_block>:

void eeprom_write_block(unsigned short address, const unsigned char* data, unsigned short length)
{
    1ec8:	df 93       	push	r29
    1eca:	cf 93       	push	r28
    1ecc:	cd b7       	in	r28, 0x3d	; 61
    1ece:	de b7       	in	r29, 0x3e	; 62
    1ed0:	28 97       	sbiw	r28, 0x08	; 8
    1ed2:	0f b6       	in	r0, 0x3f	; 63
    1ed4:	f8 94       	cli
    1ed6:	de bf       	out	0x3e, r29	; 62
    1ed8:	0f be       	out	0x3f, r0	; 63
    1eda:	cd bf       	out	0x3d, r28	; 61
    1edc:	9c 83       	std	Y+4, r25	; 0x04
    1ede:	8b 83       	std	Y+3, r24	; 0x03
    1ee0:	7e 83       	std	Y+6, r23	; 0x06
    1ee2:	6d 83       	std	Y+5, r22	; 0x05
    1ee4:	58 87       	std	Y+8, r21	; 0x08
    1ee6:	4f 83       	std	Y+7, r20	; 0x07
    unsigned short i;
    for (i = 0; i < length; i++)
    1ee8:	1a 82       	std	Y+2, r1	; 0x02
    1eea:	19 82       	std	Y+1, r1	; 0x01
    1eec:	1e c0       	rjmp	.+60     	; 0x1f2a <eeprom_write_block+0x62>
    {
        eeprom_write_byte(address + i, data[i]);
    1eee:	2b 81       	ldd	r18, Y+3	; 0x03
    1ef0:	3c 81       	ldd	r19, Y+4	; 0x04
    1ef2:	89 81       	ldd	r24, Y+1	; 0x01
    1ef4:	9a 81       	ldd	r25, Y+2	; 0x02
    1ef6:	a9 01       	movw	r20, r18
    1ef8:	48 0f       	add	r20, r24
    1efa:	59 1f       	adc	r21, r25
    1efc:	2d 81       	ldd	r18, Y+5	; 0x05
    1efe:	3e 81       	ldd	r19, Y+6	; 0x06
    1f00:	89 81       	ldd	r24, Y+1	; 0x01
    1f02:	9a 81       	ldd	r25, Y+2	; 0x02
    1f04:	f9 01       	movw	r30, r18
    1f06:	e8 0f       	add	r30, r24
    1f08:	f9 1f       	adc	r31, r25
    1f0a:	20 81       	ld	r18, Z
    1f0c:	ca 01       	movw	r24, r20
    1f0e:	62 2f       	mov	r22, r18
    1f10:	0e 94 09 0f 	call	0x1e12	; 0x1e12 <eeprom_write_byte>
        delay_milliseconds(5); // Small delay to ensure EEPROM write is complete
    1f14:	65 e0       	ldi	r22, 0x05	; 5
    1f16:	70 e0       	ldi	r23, 0x00	; 0
    1f18:	80 e0       	ldi	r24, 0x00	; 0
    1f1a:	90 e0       	ldi	r25, 0x00	; 0
    1f1c:	0e 94 95 0b 	call	0x172a	; 0x172a <delay_milliseconds>
}

void eeprom_write_block(unsigned short address, const unsigned char* data, unsigned short length)
{
    unsigned short i;
    for (i = 0; i < length; i++)
    1f20:	89 81       	ldd	r24, Y+1	; 0x01
    1f22:	9a 81       	ldd	r25, Y+2	; 0x02
    1f24:	01 96       	adiw	r24, 0x01	; 1
    1f26:	9a 83       	std	Y+2, r25	; 0x02
    1f28:	89 83       	std	Y+1, r24	; 0x01
    1f2a:	29 81       	ldd	r18, Y+1	; 0x01
    1f2c:	3a 81       	ldd	r19, Y+2	; 0x02
    1f2e:	8f 81       	ldd	r24, Y+7	; 0x07
    1f30:	98 85       	ldd	r25, Y+8	; 0x08
    1f32:	28 17       	cp	r18, r24
    1f34:	39 07       	cpc	r19, r25
    1f36:	d8 f2       	brcs	.-74     	; 0x1eee <eeprom_write_block+0x26>
    {
        eeprom_write_byte(address + i, data[i]);
        delay_milliseconds(5); // Small delay to ensure EEPROM write is complete
    }
}
    1f38:	28 96       	adiw	r28, 0x08	; 8
    1f3a:	0f b6       	in	r0, 0x3f	; 63
    1f3c:	f8 94       	cli
    1f3e:	de bf       	out	0x3e, r29	; 62
    1f40:	0f be       	out	0x3f, r0	; 63
    1f42:	cd bf       	out	0x3d, r28	; 61
    1f44:	cf 91       	pop	r28
    1f46:	df 91       	pop	r29
    1f48:	08 95       	ret

00001f4a <eeprom_read_block>:

void eeprom_read_block(unsigned short address, unsigned char* data, unsigned short length)
{
    1f4a:	0f 93       	push	r16
    1f4c:	1f 93       	push	r17
    1f4e:	df 93       	push	r29
    1f50:	cf 93       	push	r28
    1f52:	cd b7       	in	r28, 0x3d	; 61
    1f54:	de b7       	in	r29, 0x3e	; 62
    1f56:	28 97       	sbiw	r28, 0x08	; 8
    1f58:	0f b6       	in	r0, 0x3f	; 63
    1f5a:	f8 94       	cli
    1f5c:	de bf       	out	0x3e, r29	; 62
    1f5e:	0f be       	out	0x3f, r0	; 63
    1f60:	cd bf       	out	0x3d, r28	; 61
    1f62:	9c 83       	std	Y+4, r25	; 0x04
    1f64:	8b 83       	std	Y+3, r24	; 0x03
    1f66:	7e 83       	std	Y+6, r23	; 0x06
    1f68:	6d 83       	std	Y+5, r22	; 0x05
    1f6a:	58 87       	std	Y+8, r21	; 0x08
    1f6c:	4f 83       	std	Y+7, r20	; 0x07
    unsigned short i;
    for (i = 0; i < length; i++)
    1f6e:	1a 82       	std	Y+2, r1	; 0x02
    1f70:	19 82       	std	Y+1, r1	; 0x01
    1f72:	1c c0       	rjmp	.+56     	; 0x1fac <eeprom_read_block+0x62>
    {
        data[i] = eeprom_read_byte(address + i);
    1f74:	2d 81       	ldd	r18, Y+5	; 0x05
    1f76:	3e 81       	ldd	r19, Y+6	; 0x06
    1f78:	89 81       	ldd	r24, Y+1	; 0x01
    1f7a:	9a 81       	ldd	r25, Y+2	; 0x02
    1f7c:	89 01       	movw	r16, r18
    1f7e:	08 0f       	add	r16, r24
    1f80:	19 1f       	adc	r17, r25
    1f82:	2b 81       	ldd	r18, Y+3	; 0x03
    1f84:	3c 81       	ldd	r19, Y+4	; 0x04
    1f86:	89 81       	ldd	r24, Y+1	; 0x01
    1f88:	9a 81       	ldd	r25, Y+2	; 0x02
    1f8a:	82 0f       	add	r24, r18
    1f8c:	93 1f       	adc	r25, r19
    1f8e:	0e 94 31 0f 	call	0x1e62	; 0x1e62 <eeprom_read_byte>
    1f92:	f8 01       	movw	r30, r16
    1f94:	80 83       	st	Z, r24
        delay_milliseconds(5); // Small delay to ensure EEPROM read is complete
    1f96:	65 e0       	ldi	r22, 0x05	; 5
    1f98:	70 e0       	ldi	r23, 0x00	; 0
    1f9a:	80 e0       	ldi	r24, 0x00	; 0
    1f9c:	90 e0       	ldi	r25, 0x00	; 0
    1f9e:	0e 94 95 0b 	call	0x172a	; 0x172a <delay_milliseconds>
}

void eeprom_read_block(unsigned short address, unsigned char* data, unsigned short length)
{
    unsigned short i;
    for (i = 0; i < length; i++)
    1fa2:	89 81       	ldd	r24, Y+1	; 0x01
    1fa4:	9a 81       	ldd	r25, Y+2	; 0x02
    1fa6:	01 96       	adiw	r24, 0x01	; 1
    1fa8:	9a 83       	std	Y+2, r25	; 0x02
    1faa:	89 83       	std	Y+1, r24	; 0x01
    1fac:	29 81       	ldd	r18, Y+1	; 0x01
    1fae:	3a 81       	ldd	r19, Y+2	; 0x02
    1fb0:	8f 81       	ldd	r24, Y+7	; 0x07
    1fb2:	98 85       	ldd	r25, Y+8	; 0x08
    1fb4:	28 17       	cp	r18, r24
    1fb6:	39 07       	cpc	r19, r25
    1fb8:	e8 f2       	brcs	.-70     	; 0x1f74 <eeprom_read_block+0x2a>
    {
        data[i] = eeprom_read_byte(address + i);
        delay_milliseconds(5); // Small delay to ensure EEPROM read is complete
    }
}
    1fba:	28 96       	adiw	r28, 0x08	; 8
    1fbc:	0f b6       	in	r0, 0x3f	; 63
    1fbe:	f8 94       	cli
    1fc0:	de bf       	out	0x3e, r29	; 62
    1fc2:	0f be       	out	0x3f, r0	; 63
    1fc4:	cd bf       	out	0x3d, r28	; 61
    1fc6:	cf 91       	pop	r28
    1fc8:	df 91       	pop	r29
    1fca:	1f 91       	pop	r17
    1fcc:	0f 91       	pop	r16
    1fce:	08 95       	ret

00001fd0 <WIFI_Init>:
#include "WIFI_service.h"
#include "..\..\HAL\ESP8266\ESP8266_interface.h"
#include "..\..\HAL\ESP8266\ESP8266_config.h"

uint8_t WIFI_Init(void) {
    1fd0:	df 93       	push	r29
    1fd2:	cf 93       	push	r28
    1fd4:	cd b7       	in	r28, 0x3d	; 61
    1fd6:	de b7       	in	r29, 0x3e	; 62
    ESP8266_Init();
    1fd8:	0e 94 d9 0d 	call	0x1bb2	; 0x1bb2 <ESP8266_Init>
    ESP8266_ConnectToWiFi();
    1fdc:	0e 94 1a 0e 	call	0x1c34	; 0x1c34 <ESP8266_ConnectToWiFi>
    return 0; // Return 0 to indicate success
    1fe0:	80 e0       	ldi	r24, 0x00	; 0
}
    1fe2:	cf 91       	pop	r28
    1fe4:	df 91       	pop	r29
    1fe6:	08 95       	ret

00001fe8 <WIFI_SendEmptySlots>:

uint8_t WIFI_SendEmptySlots(uint8_t emptySlots) {
    1fe8:	df 93       	push	r29
    1fea:	cf 93       	push	r28
    1fec:	cd b7       	in	r28, 0x3d	; 61
    1fee:	de b7       	in	r29, 0x3e	; 62
    1ff0:	c3 53       	subi	r28, 0x33	; 51
    1ff2:	d1 40       	sbci	r29, 0x01	; 1
    1ff4:	0f b6       	in	r0, 0x3f	; 63
    1ff6:	f8 94       	cli
    1ff8:	de bf       	out	0x3e, r29	; 62
    1ffa:	0f be       	out	0x3f, r0	; 63
    1ffc:	cd bf       	out	0x3d, r28	; 61
    1ffe:	fe 01       	movw	r30, r28
    2000:	ed 5c       	subi	r30, 0xCD	; 205
    2002:	fe 4f       	sbci	r31, 0xFE	; 254
    2004:	80 83       	st	Z, r24
    char json_data[50];
    char request[256];

    snprintf(json_data, sizeof(json_data), "{\"slots\":%d}", emptySlots);
    2006:	fe 01       	movw	r30, r28
    2008:	ed 5c       	subi	r30, 0xCD	; 205
    200a:	fe 4f       	sbci	r31, 0xFE	; 254
    200c:	80 81       	ld	r24, Z
    200e:	28 2f       	mov	r18, r24
    2010:	30 e0       	ldi	r19, 0x00	; 0
    2012:	8d b7       	in	r24, 0x3d	; 61
    2014:	9e b7       	in	r25, 0x3e	; 62
    2016:	08 97       	sbiw	r24, 0x08	; 8
    2018:	0f b6       	in	r0, 0x3f	; 63
    201a:	f8 94       	cli
    201c:	9e bf       	out	0x3e, r25	; 62
    201e:	0f be       	out	0x3f, r0	; 63
    2020:	8d bf       	out	0x3d, r24	; 61
    2022:	ed b7       	in	r30, 0x3d	; 61
    2024:	fe b7       	in	r31, 0x3e	; 62
    2026:	31 96       	adiw	r30, 0x01	; 1
    2028:	ce 01       	movw	r24, r28
    202a:	01 96       	adiw	r24, 0x01	; 1
    202c:	91 83       	std	Z+1, r25	; 0x01
    202e:	80 83       	st	Z, r24
    2030:	82 e3       	ldi	r24, 0x32	; 50
    2032:	90 e0       	ldi	r25, 0x00	; 0
    2034:	93 83       	std	Z+3, r25	; 0x03
    2036:	82 83       	std	Z+2, r24	; 0x02
    2038:	86 ee       	ldi	r24, 0xE6	; 230
    203a:	90 e0       	ldi	r25, 0x00	; 0
    203c:	95 83       	std	Z+5, r25	; 0x05
    203e:	84 83       	std	Z+4, r24	; 0x04
    2040:	37 83       	std	Z+7, r19	; 0x07
    2042:	26 83       	std	Z+6, r18	; 0x06
    2044:	0e 94 fe 13 	call	0x27fc	; 0x27fc <snprintf>
    2048:	8d b7       	in	r24, 0x3d	; 61
    204a:	9e b7       	in	r25, 0x3e	; 62
    204c:	08 96       	adiw	r24, 0x08	; 8
    204e:	0f b6       	in	r0, 0x3f	; 63
    2050:	f8 94       	cli
    2052:	9e bf       	out	0x3e, r25	; 62
    2054:	0f be       	out	0x3f, r0	; 63
    2056:	8d bf       	out	0x3d, r24	; 61
    snprintf(request, sizeof(request),
    2058:	ce 01       	movw	r24, r28
    205a:	01 96       	adiw	r24, 0x01	; 1
    205c:	0e 94 f5 13 	call	0x27ea	; 0x27ea <strlen>
    2060:	9c 01       	movw	r18, r24
    2062:	8d b7       	in	r24, 0x3d	; 61
    2064:	9e b7       	in	r25, 0x3e	; 62
    2066:	0e 97       	sbiw	r24, 0x0e	; 14
    2068:	0f b6       	in	r0, 0x3f	; 63
    206a:	f8 94       	cli
    206c:	9e bf       	out	0x3e, r25	; 62
    206e:	0f be       	out	0x3f, r0	; 63
    2070:	8d bf       	out	0x3d, r24	; 61
    2072:	ed b7       	in	r30, 0x3d	; 61
    2074:	fe b7       	in	r31, 0x3e	; 62
    2076:	31 96       	adiw	r30, 0x01	; 1
    2078:	ce 01       	movw	r24, r28
    207a:	c3 96       	adiw	r24, 0x33	; 51
    207c:	91 83       	std	Z+1, r25	; 0x01
    207e:	80 83       	st	Z, r24
    2080:	80 e0       	ldi	r24, 0x00	; 0
    2082:	91 e0       	ldi	r25, 0x01	; 1
    2084:	93 83       	std	Z+3, r25	; 0x03
    2086:	82 83       	std	Z+2, r24	; 0x02
    2088:	83 ef       	ldi	r24, 0xF3	; 243
    208a:	90 e0       	ldi	r25, 0x00	; 0
    208c:	95 83       	std	Z+5, r25	; 0x05
    208e:	84 83       	std	Z+4, r24	; 0x04
    2090:	88 e4       	ldi	r24, 0x48	; 72
    2092:	91 e0       	ldi	r25, 0x01	; 1
    2094:	97 83       	std	Z+7, r25	; 0x07
    2096:	86 83       	std	Z+6, r24	; 0x06
    2098:	88 e5       	ldi	r24, 0x58	; 88
    209a:	91 e0       	ldi	r25, 0x01	; 1
    209c:	91 87       	std	Z+9, r25	; 0x09
    209e:	80 87       	std	Z+8, r24	; 0x08
    20a0:	33 87       	std	Z+11, r19	; 0x0b
    20a2:	22 87       	std	Z+10, r18	; 0x0a
    20a4:	ce 01       	movw	r24, r28
    20a6:	01 96       	adiw	r24, 0x01	; 1
    20a8:	95 87       	std	Z+13, r25	; 0x0d
    20aa:	84 87       	std	Z+12, r24	; 0x0c
    20ac:	0e 94 fe 13 	call	0x27fc	; 0x27fc <snprintf>
    20b0:	8d b7       	in	r24, 0x3d	; 61
    20b2:	9e b7       	in	r25, 0x3e	; 62
    20b4:	0e 96       	adiw	r24, 0x0e	; 14
    20b6:	0f b6       	in	r0, 0x3f	; 63
    20b8:	f8 94       	cli
    20ba:	9e bf       	out	0x3e, r25	; 62
    20bc:	0f be       	out	0x3f, r0	; 63
    20be:	8d bf       	out	0x3d, r24	; 61
             "Content-Type: application/json\r\n"
             "Content-Length: %d\r\n\r\n"
             "%s",
             ESP8266_UPDATE_ENDPOINT, ESP8266_SERVER_URL, strlen(json_data), json_data);

    ESP8266_SendData(request);
    20c0:	ce 01       	movw	r24, r28
    20c2:	c3 96       	adiw	r24, 0x33	; 51
    20c4:	0e 94 67 0e 	call	0x1cce	; 0x1cce <ESP8266_SendData>
    return 0; // Return 0 to indicate success
    20c8:	80 e0       	ldi	r24, 0x00	; 0
}
    20ca:	cd 5c       	subi	r28, 0xCD	; 205
    20cc:	de 4f       	sbci	r29, 0xFE	; 254
    20ce:	0f b6       	in	r0, 0x3f	; 63
    20d0:	f8 94       	cli
    20d2:	de bf       	out	0x3e, r29	; 62
    20d4:	0f be       	out	0x3f, r0	; 63
    20d6:	cd bf       	out	0x3d, r28	; 61
    20d8:	cf 91       	pop	r28
    20da:	df 91       	pop	r29
    20dc:	08 95       	ret

000020de <Master_Comm_Init>:
#include "..\..\LIB\DELAY\DELAY_interface.h"




void Master_Comm_Init(void) {
    20de:	df 93       	push	r29
    20e0:	cf 93       	push	r28
    20e2:	cd b7       	in	r28, 0x3d	; 61
    20e4:	de b7       	in	r29, 0x3e	; 62
    // Initialize SPI
    DIO_U8SetPinDirection(DIO_PORTB, DIO_PIN4, DIO_OUTPUT);
    20e6:	81 e0       	ldi	r24, 0x01	; 1
    20e8:	64 e0       	ldi	r22, 0x04	; 4
    20ea:	41 e0       	ldi	r20, 0x01	; 1
    20ec:	0e 94 cf 07 	call	0xf9e	; 0xf9e <DIO_U8SetPinDirection>
    DIO_U8SetPinDirection(DIO_PORTB, DIO_PIN5, DIO_OUTPUT);
    20f0:	81 e0       	ldi	r24, 0x01	; 1
    20f2:	65 e0       	ldi	r22, 0x05	; 5
    20f4:	41 e0       	ldi	r20, 0x01	; 1
    20f6:	0e 94 cf 07 	call	0xf9e	; 0xf9e <DIO_U8SetPinDirection>
    DIO_U8SetPinDirection(DIO_PORTB, DIO_PIN6, DIO_INPUT);
    20fa:	81 e0       	ldi	r24, 0x01	; 1
    20fc:	66 e0       	ldi	r22, 0x06	; 6
    20fe:	40 e0       	ldi	r20, 0x00	; 0
    2100:	0e 94 cf 07 	call	0xf9e	; 0xf9e <DIO_U8SetPinDirection>
    DIO_U8SetPinDirection(DIO_PORTB, DIO_PIN7, DIO_OUTPUT);
    2104:	81 e0       	ldi	r24, 0x01	; 1
    2106:	67 e0       	ldi	r22, 0x07	; 7
    2108:	41 e0       	ldi	r20, 0x01	; 1
    210a:	0e 94 cf 07 	call	0xf9e	; 0xf9e <DIO_U8SetPinDirection>

    SPI_vInit();
    210e:	0e 94 b2 02 	call	0x564	; 0x564 <SPI_vInit>

    // Initialize external interrupt for SPI slave ready signal
    EXTI1_VoidInit();
    2112:	0e 94 91 05 	call	0xb22	; 0xb22 <EXTI1_VoidInit>
    EXTI1_voidEnable();
    2116:	0e 94 da 06 	call	0xdb4	; 0xdb4 <EXTI1_voidEnable>

    // Set slave ready pin as input
    DIO_U8SetPinDirection(SPI_SLAVE_READY_PIN, DIO_INPUT);
    211a:	83 e0       	ldi	r24, 0x03	; 3
    211c:	63 e0       	ldi	r22, 0x03	; 3
    211e:	40 e0       	ldi	r20, 0x00	; 0
    2120:	0e 94 cf 07 	call	0xf9e	; 0xf9e <DIO_U8SetPinDirection>
    MASTER_DESELECT_SLAVE();
    2124:	a8 e3       	ldi	r26, 0x38	; 56
    2126:	b0 e0       	ldi	r27, 0x00	; 0
    2128:	e8 e3       	ldi	r30, 0x38	; 56
    212a:	f0 e0       	ldi	r31, 0x00	; 0
    212c:	80 81       	ld	r24, Z
    212e:	80 61       	ori	r24, 0x10	; 16
    2130:	8c 93       	st	X, r24

}
    2132:	cf 91       	pop	r28
    2134:	df 91       	pop	r29
    2136:	08 95       	ret

00002138 <Master_SendByte>:

void Master_SendByte(uint8_t send) {
    2138:	df 93       	push	r29
    213a:	cf 93       	push	r28
    213c:	0f 92       	push	r0
    213e:	cd b7       	in	r28, 0x3d	; 61
    2140:	de b7       	in	r29, 0x3e	; 62
    2142:	89 83       	std	Y+1, r24	; 0x01
	MASTER_SELECT_SLAVE();
    2144:	a8 e3       	ldi	r26, 0x38	; 56
    2146:	b0 e0       	ldi	r27, 0x00	; 0
    2148:	e8 e3       	ldi	r30, 0x38	; 56
    214a:	f0 e0       	ldi	r31, 0x00	; 0
    214c:	80 81       	ld	r24, Z
    214e:	8f 7e       	andi	r24, 0xEF	; 239
    2150:	8c 93       	st	X, r24

    SPI_u8SendByte_Synch(send);
    2152:	89 81       	ldd	r24, Y+1	; 0x01
    2154:	0e 94 0c 03 	call	0x618	; 0x618 <SPI_u8SendByte_Synch>

    MASTER_DESELECT_SLAVE();
    2158:	a8 e3       	ldi	r26, 0x38	; 56
    215a:	b0 e0       	ldi	r27, 0x00	; 0
    215c:	e8 e3       	ldi	r30, 0x38	; 56
    215e:	f0 e0       	ldi	r31, 0x00	; 0
    2160:	80 81       	ld	r24, Z
    2162:	80 61       	ori	r24, 0x10	; 16
    2164:	8c 93       	st	X, r24
}
    2166:	0f 90       	pop	r0
    2168:	cf 91       	pop	r28
    216a:	df 91       	pop	r29
    216c:	08 95       	ret

0000216e <Master_ReceiveByte>:
void Master_ReceiveByte(uint8_t *receive) {
    216e:	df 93       	push	r29
    2170:	cf 93       	push	r28
    2172:	00 d0       	rcall	.+0      	; 0x2174 <Master_ReceiveByte+0x6>
    2174:	cd b7       	in	r28, 0x3d	; 61
    2176:	de b7       	in	r29, 0x3e	; 62
    2178:	9a 83       	std	Y+2, r25	; 0x02
    217a:	89 83       	std	Y+1, r24	; 0x01
	MASTER_SELECT_SLAVE();
    217c:	a8 e3       	ldi	r26, 0x38	; 56
    217e:	b0 e0       	ldi	r27, 0x00	; 0
    2180:	e8 e3       	ldi	r30, 0x38	; 56
    2182:	f0 e0       	ldi	r31, 0x00	; 0
    2184:	80 81       	ld	r24, Z
    2186:	8f 7e       	andi	r24, 0xEF	; 239
    2188:	8c 93       	st	X, r24

	SPI_u8SendByte_Synch(0xff);
    218a:	8f ef       	ldi	r24, 0xFF	; 255
    218c:	0e 94 0c 03 	call	0x618	; 0x618 <SPI_u8SendByte_Synch>
	SPI_u8ReceiveByte_Synch(receive);
    2190:	89 81       	ldd	r24, Y+1	; 0x01
    2192:	9a 81       	ldd	r25, Y+2	; 0x02
    2194:	0e 94 ce 02 	call	0x59c	; 0x59c <SPI_u8ReceiveByte_Synch>

	MASTER_DESELECT_SLAVE();
    2198:	a8 e3       	ldi	r26, 0x38	; 56
    219a:	b0 e0       	ldi	r27, 0x00	; 0
    219c:	e8 e3       	ldi	r30, 0x38	; 56
    219e:	f0 e0       	ldi	r31, 0x00	; 0
    21a0:	80 81       	ld	r24, Z
    21a2:	80 61       	ori	r24, 0x10	; 16
    21a4:	8c 93       	st	X, r24

}
    21a6:	0f 90       	pop	r0
    21a8:	0f 90       	pop	r0
    21aa:	cf 91       	pop	r28
    21ac:	df 91       	pop	r29
    21ae:	08 95       	ret

000021b0 <Master_Send_Data>:
void Master_Send_Data(uint8_t* data) {
    21b0:	df 93       	push	r29
    21b2:	cf 93       	push	r28
    21b4:	00 d0       	rcall	.+0      	; 0x21b6 <Master_Send_Data+0x6>
    21b6:	0f 92       	push	r0
    21b8:	cd b7       	in	r28, 0x3d	; 61
    21ba:	de b7       	in	r29, 0x3e	; 62
    21bc:	9b 83       	std	Y+3, r25	; 0x03
    21be:	8a 83       	std	Y+2, r24	; 0x02
	MASTER_SELECT_SLAVE();
    21c0:	a8 e3       	ldi	r26, 0x38	; 56
    21c2:	b0 e0       	ldi	r27, 0x00	; 0
    21c4:	e8 e3       	ldi	r30, 0x38	; 56
    21c6:	f0 e0       	ldi	r31, 0x00	; 0
    21c8:	80 81       	ld	r24, Z
    21ca:	8f 7e       	andi	r24, 0xEF	; 239
    21cc:	8c 93       	st	X, r24

    // Send data to the slave
	SPI_u8SendByte_Synch(ACK);
    21ce:	80 e2       	ldi	r24, 0x20	; 32
    21d0:	0e 94 0c 03 	call	0x618	; 0x618 <SPI_u8SendByte_Synch>

    for (uint8_t i = 0; i < SPI_BUFFER_SIZE; i++) {
    21d4:	19 82       	std	Y+1, r1	; 0x01
    21d6:	0e c0       	rjmp	.+28     	; 0x21f4 <Master_Send_Data+0x44>
        SPI_u8SendByte_Synch(data[i]);
    21d8:	89 81       	ldd	r24, Y+1	; 0x01
    21da:	28 2f       	mov	r18, r24
    21dc:	30 e0       	ldi	r19, 0x00	; 0
    21de:	8a 81       	ldd	r24, Y+2	; 0x02
    21e0:	9b 81       	ldd	r25, Y+3	; 0x03
    21e2:	fc 01       	movw	r30, r24
    21e4:	e2 0f       	add	r30, r18
    21e6:	f3 1f       	adc	r31, r19
    21e8:	80 81       	ld	r24, Z
    21ea:	0e 94 0c 03 	call	0x618	; 0x618 <SPI_u8SendByte_Synch>
	MASTER_SELECT_SLAVE();

    // Send data to the slave
	SPI_u8SendByte_Synch(ACK);

    for (uint8_t i = 0; i < SPI_BUFFER_SIZE; i++) {
    21ee:	89 81       	ldd	r24, Y+1	; 0x01
    21f0:	8f 5f       	subi	r24, 0xFF	; 255
    21f2:	89 83       	std	Y+1, r24	; 0x01
    21f4:	89 81       	ldd	r24, Y+1	; 0x01
    21f6:	82 30       	cpi	r24, 0x02	; 2
    21f8:	78 f3       	brcs	.-34     	; 0x21d8 <Master_Send_Data+0x28>
        SPI_u8SendByte_Synch(data[i]);
    }
   MASTER_DESELECT_SLAVE();
    21fa:	a8 e3       	ldi	r26, 0x38	; 56
    21fc:	b0 e0       	ldi	r27, 0x00	; 0
    21fe:	e8 e3       	ldi	r30, 0x38	; 56
    2200:	f0 e0       	ldi	r31, 0x00	; 0
    2202:	80 81       	ld	r24, Z
    2204:	80 61       	ori	r24, 0x10	; 16
    2206:	8c 93       	st	X, r24

}
    2208:	0f 90       	pop	r0
    220a:	0f 90       	pop	r0
    220c:	0f 90       	pop	r0
    220e:	cf 91       	pop	r28
    2210:	df 91       	pop	r29
    2212:	08 95       	ret

00002214 <Master_Receive_Data>:

void Master_Receive_Data(uint8_t* buffer) {
    2214:	df 93       	push	r29
    2216:	cf 93       	push	r28
    2218:	00 d0       	rcall	.+0      	; 0x221a <Master_Receive_Data+0x6>
    221a:	0f 92       	push	r0
    221c:	cd b7       	in	r28, 0x3d	; 61
    221e:	de b7       	in	r29, 0x3e	; 62
    2220:	9b 83       	std	Y+3, r25	; 0x03
    2222:	8a 83       	std	Y+2, r24	; 0x02
	MASTER_SELECT_SLAVE();
    2224:	a8 e3       	ldi	r26, 0x38	; 56
    2226:	b0 e0       	ldi	r27, 0x00	; 0
    2228:	e8 e3       	ldi	r30, 0x38	; 56
    222a:	f0 e0       	ldi	r31, 0x00	; 0
    222c:	80 81       	ld	r24, Z
    222e:	8f 7e       	andi	r24, 0xEF	; 239
    2230:	8c 93       	st	X, r24
    // Receive data from the slave
    for (uint8_t i = 0; i < SPI_BUFFER_SIZE; i++) {
    2232:	19 82       	std	Y+1, r1	; 0x01
    2234:	0f c0       	rjmp	.+30     	; 0x2254 <Master_Receive_Data+0x40>
        SPI_u8SendByte_Synch(0xff);
    2236:	8f ef       	ldi	r24, 0xFF	; 255
    2238:	0e 94 0c 03 	call	0x618	; 0x618 <SPI_u8SendByte_Synch>
        SPI_u8ReceiveByte_Synch(&buffer[i]);
    223c:	89 81       	ldd	r24, Y+1	; 0x01
    223e:	28 2f       	mov	r18, r24
    2240:	30 e0       	ldi	r19, 0x00	; 0
    2242:	8a 81       	ldd	r24, Y+2	; 0x02
    2244:	9b 81       	ldd	r25, Y+3	; 0x03
    2246:	82 0f       	add	r24, r18
    2248:	93 1f       	adc	r25, r19
    224a:	0e 94 ce 02 	call	0x59c	; 0x59c <SPI_u8ReceiveByte_Synch>
}

void Master_Receive_Data(uint8_t* buffer) {
	MASTER_SELECT_SLAVE();
    // Receive data from the slave
    for (uint8_t i = 0; i < SPI_BUFFER_SIZE; i++) {
    224e:	89 81       	ldd	r24, Y+1	; 0x01
    2250:	8f 5f       	subi	r24, 0xFF	; 255
    2252:	89 83       	std	Y+1, r24	; 0x01
    2254:	89 81       	ldd	r24, Y+1	; 0x01
    2256:	82 30       	cpi	r24, 0x02	; 2
    2258:	70 f3       	brcs	.-36     	; 0x2236 <Master_Receive_Data+0x22>
        SPI_u8SendByte_Synch(0xff);
        SPI_u8ReceiveByte_Synch(&buffer[i]);
    }
    MASTER_DESELECT_SLAVE();
    225a:	a8 e3       	ldi	r26, 0x38	; 56
    225c:	b0 e0       	ldi	r27, 0x00	; 0
    225e:	e8 e3       	ldi	r30, 0x38	; 56
    2260:	f0 e0       	ldi	r31, 0x00	; 0
    2262:	80 81       	ld	r24, Z
    2264:	80 61       	ori	r24, 0x10	; 16
    2266:	8c 93       	st	X, r24
}
    2268:	0f 90       	pop	r0
    226a:	0f 90       	pop	r0
    226c:	0f 90       	pop	r0
    226e:	cf 91       	pop	r28
    2270:	df 91       	pop	r29
    2272:	08 95       	ret

00002274 <SetSlaveReadyCallBack>:

void SetSlaveReadyCallBack(void (*callback)(void)) {
    2274:	df 93       	push	r29
    2276:	cf 93       	push	r28
    2278:	00 d0       	rcall	.+0      	; 0x227a <SetSlaveReadyCallBack+0x6>
    227a:	cd b7       	in	r28, 0x3d	; 61
    227c:	de b7       	in	r29, 0x3e	; 62
    227e:	9a 83       	std	Y+2, r25	; 0x02
    2280:	89 83       	std	Y+1, r24	; 0x01
    EXTI1_voidSetCallBack(callback);
    2282:	89 81       	ldd	r24, Y+1	; 0x01
    2284:	9a 81       	ldd	r25, Y+2	; 0x02
    2286:	0e 94 24 07 	call	0xe48	; 0xe48 <EXTI1_voidSetCallBack>
}
    228a:	0f 90       	pop	r0
    228c:	0f 90       	pop	r0
    228e:	cf 91       	pop	r28
    2290:	df 91       	pop	r29
    2292:	08 95       	ret

00002294 <main>:
uint8_t RX_Data[SPI_BUFFER_SIZE];

volatile uint8_t car_parked_correctly;
volatile uint8_t request_pending;

void main(void) {
    2294:	df 93       	push	r29
    2296:	cf 93       	push	r28
    2298:	cd b7       	in	r28, 0x3d	; 61
    229a:	de b7       	in	r29, 0x3e	; 62
    System_Init();
    229c:	0e 94 57 11 	call	0x22ae	; 0x22ae <System_Init>

    //Clear_EEPROM();
    while(1) {

        if (request_pending) {
    22a0:	80 91 86 01 	lds	r24, 0x0186
    22a4:	88 23       	and	r24, r24
    22a6:	e1 f3       	breq	.-8      	; 0x22a0 <main+0xc>

           Process_Slave_Request();
    22a8:	0e 94 2e 13 	call	0x265c	; 0x265c <Process_Slave_Request>
    22ac:	f9 cf       	rjmp	.-14     	; 0x22a0 <main+0xc>

000022ae <System_Init>:
        }
    }
}

void System_Init(void) {
    22ae:	df 93       	push	r29
    22b0:	cf 93       	push	r28
    22b2:	cd b7       	in	r28, 0x3d	; 61
    22b4:	de b7       	in	r29, 0x3e	; 62

    LED_Init();
    22b6:	0e 94 50 0d 	call	0x1aa0	; 0x1aa0 <LED_Init>
    SEV_SEG_VidInit();
    22ba:	0e 94 b7 0c 	call	0x196e	; 0x196e <SEV_SEG_VidInit>
    Master_Comm_Init();
    22be:	0e 94 6f 10 	call	0x20de	; 0x20de <Master_Comm_Init>
    eeprom_init();
    22c2:	0e 94 00 0f 	call	0x1e00	; 0x1e00 <eeprom_init>
    Initialize_EEPROM_If_Needed();
    22c6:	0e 94 e5 12 	call	0x25ca	; 0x25ca <Initialize_EEPROM_If_Needed>

    Load_EEPROM();
    22ca:	0e 94 a7 12 	call	0x254e	; 0x254e <Load_EEPROM>
    IR_Init();
    22ce:	0e 94 a2 0d 	call	0x1b44	; 0x1b44 <IR_Init>
    StepperMotor_Init();
    22d2:	0e 94 ee 0b 	call	0x17dc	; 0x17dc <StepperMotor_Init>

    SEV_SEG_VidSetNumber(currentSlot);
    22d6:	80 91 8f 01 	lds	r24, 0x018F
    22da:	0e 94 c6 0c 	call	0x198c	; 0x198c <SEV_SEG_VidSetNumber>
    SetSlaveReadyCallBack(Handle_Slave_Request_ISR);
    22de:	80 e2       	ldi	r24, 0x20	; 32
    22e0:	93 e1       	ldi	r25, 0x13	; 19
    22e2:	0e 94 3a 11 	call	0x2274	; 0x2274 <SetSlaveReadyCallBack>
    IR_SetCallback(IR_Sensor_ISR);
    22e6:	82 e1       	ldi	r24, 0x12	; 18
    22e8:	93 e1       	ldi	r25, 0x13	; 19
    22ea:	0e 94 c9 0d 	call	0x1b92	; 0x1b92 <IR_SetCallback>
    IR_Disable();
    22ee:	0e 94 b7 0d 	call	0x1b6e	; 0x1b6e <IR_Disable>
    GIE_voidEnable();
    22f2:	0e 94 59 05 	call	0xab2	; 0xab2 <GIE_voidEnable>

}
    22f6:	cf 91       	pop	r28
    22f8:	df 91       	pop	r29
    22fa:	08 95       	ret

000022fc <Find_Nearest_Empty_Slot>:

uint8_t Find_Nearest_Empty_Slot(uint8_t currentSlot) {
    22fc:	df 93       	push	r29
    22fe:	cf 93       	push	r28
    2300:	cd b7       	in	r28, 0x3d	; 61
    2302:	de b7       	in	r29, 0x3e	; 62
    2304:	63 97       	sbiw	r28, 0x13	; 19
    2306:	0f b6       	in	r0, 0x3f	; 63
    2308:	f8 94       	cli
    230a:	de bf       	out	0x3e, r29	; 62
    230c:	0f be       	out	0x3f, r0	; 63
    230e:	cd bf       	out	0x3d, r28	; 61
    2310:	8b 87       	std	Y+11, r24	; 0x0b
    uint8_t nearest_empty_slot = 0xFF;
    2312:	8f ef       	ldi	r24, 0xFF	; 255
    2314:	8a 87       	std	Y+10, r24	; 0x0a
    uint16_t minimum_steps = 0xFFFF;
    2316:	8f ef       	ldi	r24, 0xFF	; 255
    2318:	9f ef       	ldi	r25, 0xFF	; 255
    231a:	99 87       	std	Y+9, r25	; 0x09
    231c:	88 87       	std	Y+8, r24	; 0x08

    for (uint8_t i = 0; i < TOTAL_SLOTS; i++) {
    231e:	1f 82       	std	Y+7, r1	; 0x07
    2320:	98 c0       	rjmp	.+304    	; 0x2452 <Find_Nearest_Empty_Slot+0x156>
        if (slot_status[i] == 0) {
    2322:	8f 81       	ldd	r24, Y+7	; 0x07
    2324:	88 2f       	mov	r24, r24
    2326:	90 e0       	ldi	r25, 0x00	; 0
    2328:	fc 01       	movw	r30, r24
    232a:	e9 57       	subi	r30, 0x79	; 121
    232c:	fe 4f       	sbci	r31, 0xFE	; 254
    232e:	80 81       	ld	r24, Z
    2330:	88 23       	and	r24, r24
    2332:	09 f0       	breq	.+2      	; 0x2336 <Find_Nearest_Empty_Slot+0x3a>
    2334:	8b c0       	rjmp	.+278    	; 0x244c <Find_Nearest_Empty_Slot+0x150>
            // Calculate CW and CCW steps
            uint16_t steps_CW = (i >= currentSlot) ? (i - currentSlot) * STEPS_PER_SLOT : (TOTAL_SLOTS - currentSlot + i) * STEPS_PER_SLOT;
    2336:	9f 81       	ldd	r25, Y+7	; 0x07
    2338:	8b 85       	ldd	r24, Y+11	; 0x0b
    233a:	98 17       	cp	r25, r24
    233c:	a0 f0       	brcs	.+40     	; 0x2366 <Find_Nearest_Empty_Slot+0x6a>
    233e:	8f 81       	ldd	r24, Y+7	; 0x07
    2340:	28 2f       	mov	r18, r24
    2342:	30 e0       	ldi	r19, 0x00	; 0
    2344:	8b 85       	ldd	r24, Y+11	; 0x0b
    2346:	88 2f       	mov	r24, r24
    2348:	90 e0       	ldi	r25, 0x00	; 0
    234a:	28 1b       	sub	r18, r24
    234c:	39 0b       	sbc	r19, r25
    234e:	88 ee       	ldi	r24, 0xE8	; 232
    2350:	93 e0       	ldi	r25, 0x03	; 3
    2352:	28 9f       	mul	r18, r24
    2354:	a0 01       	movw	r20, r0
    2356:	29 9f       	mul	r18, r25
    2358:	50 0d       	add	r21, r0
    235a:	38 9f       	mul	r19, r24
    235c:	50 0d       	add	r21, r0
    235e:	11 24       	eor	r1, r1
    2360:	5f 87       	std	Y+15, r21	; 0x0f
    2362:	4e 87       	std	Y+14, r20	; 0x0e
    2364:	19 c0       	rjmp	.+50     	; 0x2398 <Find_Nearest_Empty_Slot+0x9c>
    2366:	8b 85       	ldd	r24, Y+11	; 0x0b
    2368:	28 2f       	mov	r18, r24
    236a:	30 e0       	ldi	r19, 0x00	; 0
    236c:	86 e0       	ldi	r24, 0x06	; 6
    236e:	90 e0       	ldi	r25, 0x00	; 0
    2370:	ac 01       	movw	r20, r24
    2372:	42 1b       	sub	r20, r18
    2374:	53 0b       	sbc	r21, r19
    2376:	9a 01       	movw	r18, r20
    2378:	8f 81       	ldd	r24, Y+7	; 0x07
    237a:	88 2f       	mov	r24, r24
    237c:	90 e0       	ldi	r25, 0x00	; 0
    237e:	28 0f       	add	r18, r24
    2380:	39 1f       	adc	r19, r25
    2382:	88 ee       	ldi	r24, 0xE8	; 232
    2384:	93 e0       	ldi	r25, 0x03	; 3
    2386:	28 9f       	mul	r18, r24
    2388:	a0 01       	movw	r20, r0
    238a:	29 9f       	mul	r18, r25
    238c:	50 0d       	add	r21, r0
    238e:	38 9f       	mul	r19, r24
    2390:	50 0d       	add	r21, r0
    2392:	11 24       	eor	r1, r1
    2394:	5f 87       	std	Y+15, r21	; 0x0f
    2396:	4e 87       	std	Y+14, r20	; 0x0e
    2398:	8e 85       	ldd	r24, Y+14	; 0x0e
    239a:	9f 85       	ldd	r25, Y+15	; 0x0f
    239c:	9e 83       	std	Y+6, r25	; 0x06
    239e:	8d 83       	std	Y+5, r24	; 0x05
            uint16_t steps_CCW = (i <= currentSlot) ? (currentSlot - i) * STEPS_PER_SLOT : (currentSlot + TOTAL_SLOTS - i) * STEPS_PER_SLOT;
    23a0:	9f 81       	ldd	r25, Y+7	; 0x07
    23a2:	8b 85       	ldd	r24, Y+11	; 0x0b
    23a4:	89 17       	cp	r24, r25
    23a6:	a0 f0       	brcs	.+40     	; 0x23d0 <Find_Nearest_Empty_Slot+0xd4>
    23a8:	8b 85       	ldd	r24, Y+11	; 0x0b
    23aa:	28 2f       	mov	r18, r24
    23ac:	30 e0       	ldi	r19, 0x00	; 0
    23ae:	8f 81       	ldd	r24, Y+7	; 0x07
    23b0:	88 2f       	mov	r24, r24
    23b2:	90 e0       	ldi	r25, 0x00	; 0
    23b4:	28 1b       	sub	r18, r24
    23b6:	39 0b       	sbc	r19, r25
    23b8:	88 ee       	ldi	r24, 0xE8	; 232
    23ba:	93 e0       	ldi	r25, 0x03	; 3
    23bc:	28 9f       	mul	r18, r24
    23be:	a0 01       	movw	r20, r0
    23c0:	29 9f       	mul	r18, r25
    23c2:	50 0d       	add	r21, r0
    23c4:	38 9f       	mul	r19, r24
    23c6:	50 0d       	add	r21, r0
    23c8:	11 24       	eor	r1, r1
    23ca:	5d 87       	std	Y+13, r21	; 0x0d
    23cc:	4c 87       	std	Y+12, r20	; 0x0c
    23ce:	16 c0       	rjmp	.+44     	; 0x23fc <Find_Nearest_Empty_Slot+0x100>
    23d0:	8b 85       	ldd	r24, Y+11	; 0x0b
    23d2:	88 2f       	mov	r24, r24
    23d4:	90 e0       	ldi	r25, 0x00	; 0
    23d6:	9c 01       	movw	r18, r24
    23d8:	2a 5f       	subi	r18, 0xFA	; 250
    23da:	3f 4f       	sbci	r19, 0xFF	; 255
    23dc:	8f 81       	ldd	r24, Y+7	; 0x07
    23de:	88 2f       	mov	r24, r24
    23e0:	90 e0       	ldi	r25, 0x00	; 0
    23e2:	28 1b       	sub	r18, r24
    23e4:	39 0b       	sbc	r19, r25
    23e6:	88 ee       	ldi	r24, 0xE8	; 232
    23e8:	93 e0       	ldi	r25, 0x03	; 3
    23ea:	28 9f       	mul	r18, r24
    23ec:	a0 01       	movw	r20, r0
    23ee:	29 9f       	mul	r18, r25
    23f0:	50 0d       	add	r21, r0
    23f2:	38 9f       	mul	r19, r24
    23f4:	50 0d       	add	r21, r0
    23f6:	11 24       	eor	r1, r1
    23f8:	5d 87       	std	Y+13, r21	; 0x0d
    23fa:	4c 87       	std	Y+12, r20	; 0x0c
    23fc:	8c 85       	ldd	r24, Y+12	; 0x0c
    23fe:	9d 85       	ldd	r25, Y+13	; 0x0d
    2400:	9c 83       	std	Y+4, r25	; 0x04
    2402:	8b 83       	std	Y+3, r24	; 0x03

            // Choose the minimum steps
            uint16_t steps_needed = (steps_CW < steps_CCW) ? steps_CW : steps_CCW;
    2404:	2d 81       	ldd	r18, Y+5	; 0x05
    2406:	3e 81       	ldd	r19, Y+6	; 0x06
    2408:	3b 8b       	std	Y+19, r19	; 0x13
    240a:	2a 8b       	std	Y+18, r18	; 0x12
    240c:	4b 81       	ldd	r20, Y+3	; 0x03
    240e:	5c 81       	ldd	r21, Y+4	; 0x04
    2410:	59 8b       	std	Y+17, r21	; 0x11
    2412:	48 8b       	std	Y+16, r20	; 0x10
    2414:	88 89       	ldd	r24, Y+16	; 0x10
    2416:	99 89       	ldd	r25, Y+17	; 0x11
    2418:	2a 89       	ldd	r18, Y+18	; 0x12
    241a:	3b 89       	ldd	r19, Y+19	; 0x13
    241c:	28 17       	cp	r18, r24
    241e:	39 07       	cpc	r19, r25
    2420:	20 f4       	brcc	.+8      	; 0x242a <Find_Nearest_Empty_Slot+0x12e>
    2422:	4a 89       	ldd	r20, Y+18	; 0x12
    2424:	5b 89       	ldd	r21, Y+19	; 0x13
    2426:	59 8b       	std	Y+17, r21	; 0x11
    2428:	48 8b       	std	Y+16, r20	; 0x10
    242a:	88 89       	ldd	r24, Y+16	; 0x10
    242c:	99 89       	ldd	r25, Y+17	; 0x11
    242e:	9a 83       	std	Y+2, r25	; 0x02
    2430:	89 83       	std	Y+1, r24	; 0x01

            // Update the nearest empty slot if this one is closer
            if (steps_needed < minimum_steps) {
    2432:	29 81       	ldd	r18, Y+1	; 0x01
    2434:	3a 81       	ldd	r19, Y+2	; 0x02
    2436:	88 85       	ldd	r24, Y+8	; 0x08
    2438:	99 85       	ldd	r25, Y+9	; 0x09
    243a:	28 17       	cp	r18, r24
    243c:	39 07       	cpc	r19, r25
    243e:	30 f4       	brcc	.+12     	; 0x244c <Find_Nearest_Empty_Slot+0x150>
                minimum_steps = steps_needed;
    2440:	89 81       	ldd	r24, Y+1	; 0x01
    2442:	9a 81       	ldd	r25, Y+2	; 0x02
    2444:	99 87       	std	Y+9, r25	; 0x09
    2446:	88 87       	std	Y+8, r24	; 0x08
                nearest_empty_slot = i;
    2448:	8f 81       	ldd	r24, Y+7	; 0x07
    244a:	8a 87       	std	Y+10, r24	; 0x0a

uint8_t Find_Nearest_Empty_Slot(uint8_t currentSlot) {
    uint8_t nearest_empty_slot = 0xFF;
    uint16_t minimum_steps = 0xFFFF;

    for (uint8_t i = 0; i < TOTAL_SLOTS; i++) {
    244c:	8f 81       	ldd	r24, Y+7	; 0x07
    244e:	8f 5f       	subi	r24, 0xFF	; 255
    2450:	8f 83       	std	Y+7, r24	; 0x07
    2452:	8f 81       	ldd	r24, Y+7	; 0x07
    2454:	86 30       	cpi	r24, 0x06	; 6
    2456:	08 f4       	brcc	.+2      	; 0x245a <Find_Nearest_Empty_Slot+0x15e>
    2458:	64 cf       	rjmp	.-312    	; 0x2322 <Find_Nearest_Empty_Slot+0x26>
                minimum_steps = steps_needed;
                nearest_empty_slot = i;
            }
        }
    }
    return nearest_empty_slot;
    245a:	8a 85       	ldd	r24, Y+10	; 0x0a
}
    245c:	63 96       	adiw	r28, 0x13	; 19
    245e:	0f b6       	in	r0, 0x3f	; 63
    2460:	f8 94       	cli
    2462:	de bf       	out	0x3e, r29	; 62
    2464:	0f be       	out	0x3f, r0	; 63
    2466:	cd bf       	out	0x3d, r28	; 61
    2468:	cf 91       	pop	r28
    246a:	df 91       	pop	r29
    246c:	08 95       	ret

0000246e <Assign_User_To_Slot>:


void Assign_User_To_Slot(uint8_t slot_id) {
    246e:	df 93       	push	r29
    2470:	cf 93       	push	r28
    2472:	0f 92       	push	r0
    2474:	cd b7       	in	r28, 0x3d	; 61
    2476:	de b7       	in	r29, 0x3e	; 62
    2478:	89 83       	std	Y+1, r24	; 0x01
    if (slot_id < TOTAL_SLOTS) {
    247a:	89 81       	ldd	r24, Y+1	; 0x01
    247c:	86 30       	cpi	r24, 0x06	; 6
    247e:	c0 f4       	brcc	.+48     	; 0x24b0 <Assign_User_To_Slot+0x42>
        StepperMotor_MoveToSlot(&currentSlot, slot_id);
    2480:	8f e8       	ldi	r24, 0x8F	; 143
    2482:	91 e0       	ldi	r25, 0x01	; 1
    2484:	69 81       	ldd	r22, Y+1	; 0x01
    2486:	0e 94 45 0c 	call	0x188a	; 0x188a <StepperMotor_MoveToSlot>
        slot_status[slot_id] = 1;
    248a:	89 81       	ldd	r24, Y+1	; 0x01
    248c:	88 2f       	mov	r24, r24
    248e:	90 e0       	ldi	r25, 0x00	; 0
    2490:	fc 01       	movw	r30, r24
    2492:	e9 57       	subi	r30, 0x79	; 121
    2494:	fe 4f       	sbci	r31, 0xFE	; 254
    2496:	81 e0       	ldi	r24, 0x01	; 1
    2498:	80 83       	st	Z, r24
        num_empty_slots--;
    249a:	80 91 91 01 	lds	r24, 0x0191
    249e:	81 50       	subi	r24, 0x01	; 1
    24a0:	80 93 91 01 	sts	0x0191, r24
        Update_EEPROM();
    24a4:	0e 94 89 12 	call	0x2512	; 0x2512 <Update_EEPROM>
        SEV_SEG_VidSetNumber(currentSlot);
    24a8:	80 91 8f 01 	lds	r24, 0x018F
    24ac:	0e 94 c6 0c 	call	0x198c	; 0x198c <SEV_SEG_VidSetNumber>
    }
}
    24b0:	0f 90       	pop	r0
    24b2:	cf 91       	pop	r28
    24b4:	df 91       	pop	r29
    24b6:	08 95       	ret

000024b8 <Retrieve_Car_From_Slot>:

void Retrieve_Car_From_Slot(uint8_t slot_id) {
    24b8:	df 93       	push	r29
    24ba:	cf 93       	push	r28
    24bc:	0f 92       	push	r0
    24be:	cd b7       	in	r28, 0x3d	; 61
    24c0:	de b7       	in	r29, 0x3e	; 62
    24c2:	89 83       	std	Y+1, r24	; 0x01
    if (slot_id < TOTAL_SLOTS && slot_status[slot_id] == 1) {
    24c4:	89 81       	ldd	r24, Y+1	; 0x01
    24c6:	86 30       	cpi	r24, 0x06	; 6
    24c8:	00 f5       	brcc	.+64     	; 0x250a <Retrieve_Car_From_Slot+0x52>
    24ca:	89 81       	ldd	r24, Y+1	; 0x01
    24cc:	88 2f       	mov	r24, r24
    24ce:	90 e0       	ldi	r25, 0x00	; 0
    24d0:	fc 01       	movw	r30, r24
    24d2:	e9 57       	subi	r30, 0x79	; 121
    24d4:	fe 4f       	sbci	r31, 0xFE	; 254
    24d6:	80 81       	ld	r24, Z
    24d8:	81 30       	cpi	r24, 0x01	; 1
    24da:	b9 f4       	brne	.+46     	; 0x250a <Retrieve_Car_From_Slot+0x52>

        StepperMotor_MoveToSlot(&currentSlot, slot_id);
    24dc:	8f e8       	ldi	r24, 0x8F	; 143
    24de:	91 e0       	ldi	r25, 0x01	; 1
    24e0:	69 81       	ldd	r22, Y+1	; 0x01
    24e2:	0e 94 45 0c 	call	0x188a	; 0x188a <StepperMotor_MoveToSlot>
        slot_status[slot_id] = 0;
    24e6:	89 81       	ldd	r24, Y+1	; 0x01
    24e8:	88 2f       	mov	r24, r24
    24ea:	90 e0       	ldi	r25, 0x00	; 0
    24ec:	fc 01       	movw	r30, r24
    24ee:	e9 57       	subi	r30, 0x79	; 121
    24f0:	fe 4f       	sbci	r31, 0xFE	; 254
    24f2:	10 82       	st	Z, r1
        num_empty_slots++;
    24f4:	80 91 91 01 	lds	r24, 0x0191
    24f8:	8f 5f       	subi	r24, 0xFF	; 255
    24fa:	80 93 91 01 	sts	0x0191, r24
        Update_EEPROM();
    24fe:	0e 94 89 12 	call	0x2512	; 0x2512 <Update_EEPROM>
        SEV_SEG_VidSetNumber(currentSlot);
    2502:	80 91 8f 01 	lds	r24, 0x018F
    2506:	0e 94 c6 0c 	call	0x198c	; 0x198c <SEV_SEG_VidSetNumber>
    }
}
    250a:	0f 90       	pop	r0
    250c:	cf 91       	pop	r28
    250e:	df 91       	pop	r29
    2510:	08 95       	ret

00002512 <Update_EEPROM>:

void Update_EEPROM(void) {
    2512:	df 93       	push	r29
    2514:	cf 93       	push	r28
    2516:	cd b7       	in	r28, 0x3d	; 61
    2518:	de b7       	in	r29, 0x3e	; 62
    eeprom_write_byte(NUM_EMPTY_SLOTS_ADDR, num_empty_slots);
    251a:	20 91 91 01 	lds	r18, 0x0191
    251e:	80 e0       	ldi	r24, 0x00	; 0
    2520:	90 e0       	ldi	r25, 0x00	; 0
    2522:	62 2f       	mov	r22, r18
    2524:	0e 94 09 0f 	call	0x1e12	; 0x1e12 <eeprom_write_byte>
    eeprom_write_block(SLOT_STATUS_ADDR, slot_status, TOTAL_SLOTS);
    2528:	27 e8       	ldi	r18, 0x87	; 135
    252a:	31 e0       	ldi	r19, 0x01	; 1
    252c:	81 e0       	ldi	r24, 0x01	; 1
    252e:	90 e0       	ldi	r25, 0x00	; 0
    2530:	b9 01       	movw	r22, r18
    2532:	46 e0       	ldi	r20, 0x06	; 6
    2534:	50 e0       	ldi	r21, 0x00	; 0
    2536:	0e 94 64 0f 	call	0x1ec8	; 0x1ec8 <eeprom_write_block>
    eeprom_write_byte(CURRENT_SLOT_ADDR, currentSlot);
    253a:	20 91 8f 01 	lds	r18, 0x018F
    253e:	87 e0       	ldi	r24, 0x07	; 7
    2540:	90 e0       	ldi	r25, 0x00	; 0
    2542:	62 2f       	mov	r22, r18
    2544:	0e 94 09 0f 	call	0x1e12	; 0x1e12 <eeprom_write_byte>
}
    2548:	cf 91       	pop	r28
    254a:	df 91       	pop	r29
    254c:	08 95       	ret

0000254e <Load_EEPROM>:

void Load_EEPROM(void) {
    254e:	df 93       	push	r29
    2550:	cf 93       	push	r28
    2552:	cd b7       	in	r28, 0x3d	; 61
    2554:	de b7       	in	r29, 0x3e	; 62
    num_empty_slots = eeprom_read_byte(NUM_EMPTY_SLOTS_ADDR);
    2556:	80 e0       	ldi	r24, 0x00	; 0
    2558:	90 e0       	ldi	r25, 0x00	; 0
    255a:	0e 94 31 0f 	call	0x1e62	; 0x1e62 <eeprom_read_byte>
    255e:	80 93 91 01 	sts	0x0191, r24
    eeprom_read_block(SLOT_STATUS_ADDR, slot_status, TOTAL_SLOTS);
    2562:	27 e8       	ldi	r18, 0x87	; 135
    2564:	31 e0       	ldi	r19, 0x01	; 1
    2566:	81 e0       	ldi	r24, 0x01	; 1
    2568:	90 e0       	ldi	r25, 0x00	; 0
    256a:	b9 01       	movw	r22, r18
    256c:	46 e0       	ldi	r20, 0x06	; 6
    256e:	50 e0       	ldi	r21, 0x00	; 0
    2570:	0e 94 a5 0f 	call	0x1f4a	; 0x1f4a <eeprom_read_block>
    currentSlot = eeprom_read_byte(CURRENT_SLOT_ADDR);
    2574:	87 e0       	ldi	r24, 0x07	; 7
    2576:	90 e0       	ldi	r25, 0x00	; 0
    2578:	0e 94 31 0f 	call	0x1e62	; 0x1e62 <eeprom_read_byte>
    257c:	80 93 8f 01 	sts	0x018F, r24
}
    2580:	cf 91       	pop	r28
    2582:	df 91       	pop	r29
    2584:	08 95       	ret

00002586 <Clear_EEPROM>:
void Clear_EEPROM(void) {
    2586:	df 93       	push	r29
    2588:	cf 93       	push	r28
    258a:	0f 92       	push	r0
    258c:	cd b7       	in	r28, 0x3d	; 61
    258e:	de b7       	in	r29, 0x3e	; 62
    // Set all the slot statuses to 0 (empty)
    for (uint8_t i = 0; i < TOTAL_SLOTS; i++) {
    2590:	19 82       	std	Y+1, r1	; 0x01
    2592:	0a c0       	rjmp	.+20     	; 0x25a8 <Clear_EEPROM+0x22>
        eeprom_write_byte(SLOT_STATUS_ADDR + i, 0);
    2594:	89 81       	ldd	r24, Y+1	; 0x01
    2596:	88 2f       	mov	r24, r24
    2598:	90 e0       	ldi	r25, 0x00	; 0
    259a:	01 96       	adiw	r24, 0x01	; 1
    259c:	60 e0       	ldi	r22, 0x00	; 0
    259e:	0e 94 09 0f 	call	0x1e12	; 0x1e12 <eeprom_write_byte>
    eeprom_read_block(SLOT_STATUS_ADDR, slot_status, TOTAL_SLOTS);
    currentSlot = eeprom_read_byte(CURRENT_SLOT_ADDR);
}
void Clear_EEPROM(void) {
    // Set all the slot statuses to 0 (empty)
    for (uint8_t i = 0; i < TOTAL_SLOTS; i++) {
    25a2:	89 81       	ldd	r24, Y+1	; 0x01
    25a4:	8f 5f       	subi	r24, 0xFF	; 255
    25a6:	89 83       	std	Y+1, r24	; 0x01
    25a8:	89 81       	ldd	r24, Y+1	; 0x01
    25aa:	86 30       	cpi	r24, 0x06	; 6
    25ac:	98 f3       	brcs	.-26     	; 0x2594 <Clear_EEPROM+0xe>
        eeprom_write_byte(SLOT_STATUS_ADDR + i, 0);
    }

    // Set the number of empty slots to the total number of slots
    eeprom_write_byte(NUM_EMPTY_SLOTS_ADDR, TOTAL_SLOTS);
    25ae:	80 e0       	ldi	r24, 0x00	; 0
    25b0:	90 e0       	ldi	r25, 0x00	; 0
    25b2:	66 e0       	ldi	r22, 0x06	; 6
    25b4:	0e 94 09 0f 	call	0x1e12	; 0x1e12 <eeprom_write_byte>

    // Set the current slot to 0
    eeprom_write_byte(CURRENT_SLOT_ADDR, 0);
    25b8:	87 e0       	ldi	r24, 0x07	; 7
    25ba:	90 e0       	ldi	r25, 0x00	; 0
    25bc:	60 e0       	ldi	r22, 0x00	; 0
    25be:	0e 94 09 0f 	call	0x1e12	; 0x1e12 <eeprom_write_byte>

}
    25c2:	0f 90       	pop	r0
    25c4:	cf 91       	pop	r28
    25c6:	df 91       	pop	r29
    25c8:	08 95       	ret

000025ca <Initialize_EEPROM_If_Needed>:

void Initialize_EEPROM_If_Needed(void) {
    25ca:	df 93       	push	r29
    25cc:	cf 93       	push	r28
    25ce:	0f 92       	push	r0
    25d0:	cd b7       	in	r28, 0x3d	; 61
    25d2:	de b7       	in	r29, 0x3e	; 62
    if (eeprom_read_byte(EEPROM_INIT_FLAG_ADDR) != EEPROM_INIT_FLAG) {
    25d4:	8f ef       	ldi	r24, 0xFF	; 255
    25d6:	90 e0       	ldi	r25, 0x00	; 0
    25d8:	0e 94 31 0f 	call	0x1e62	; 0x1e62 <eeprom_read_byte>
    25dc:	85 3a       	cpi	r24, 0xA5	; 165
    25de:	f1 f0       	breq	.+60     	; 0x261c <Initialize_EEPROM_If_Needed+0x52>
        eeprom_write_byte(NUM_EMPTY_SLOTS_ADDR, TOTAL_SLOTS);
    25e0:	80 e0       	ldi	r24, 0x00	; 0
    25e2:	90 e0       	ldi	r25, 0x00	; 0
    25e4:	66 e0       	ldi	r22, 0x06	; 6
    25e6:	0e 94 09 0f 	call	0x1e12	; 0x1e12 <eeprom_write_byte>
        for (uint8_t i = 0; i < TOTAL_SLOTS; i++) {
    25ea:	19 82       	std	Y+1, r1	; 0x01
    25ec:	0a c0       	rjmp	.+20     	; 0x2602 <Initialize_EEPROM_If_Needed+0x38>
            eeprom_write_byte(SLOT_STATUS_ADDR + i, 0);
    25ee:	89 81       	ldd	r24, Y+1	; 0x01
    25f0:	88 2f       	mov	r24, r24
    25f2:	90 e0       	ldi	r25, 0x00	; 0
    25f4:	01 96       	adiw	r24, 0x01	; 1
    25f6:	60 e0       	ldi	r22, 0x00	; 0
    25f8:	0e 94 09 0f 	call	0x1e12	; 0x1e12 <eeprom_write_byte>
}

void Initialize_EEPROM_If_Needed(void) {
    if (eeprom_read_byte(EEPROM_INIT_FLAG_ADDR) != EEPROM_INIT_FLAG) {
        eeprom_write_byte(NUM_EMPTY_SLOTS_ADDR, TOTAL_SLOTS);
        for (uint8_t i = 0; i < TOTAL_SLOTS; i++) {
    25fc:	89 81       	ldd	r24, Y+1	; 0x01
    25fe:	8f 5f       	subi	r24, 0xFF	; 255
    2600:	89 83       	std	Y+1, r24	; 0x01
    2602:	89 81       	ldd	r24, Y+1	; 0x01
    2604:	86 30       	cpi	r24, 0x06	; 6
    2606:	98 f3       	brcs	.-26     	; 0x25ee <Initialize_EEPROM_If_Needed+0x24>
            eeprom_write_byte(SLOT_STATUS_ADDR + i, 0);
        }
        eeprom_write_byte(CURRENT_SLOT_ADDR, 0);
    2608:	87 e0       	ldi	r24, 0x07	; 7
    260a:	90 e0       	ldi	r25, 0x00	; 0
    260c:	60 e0       	ldi	r22, 0x00	; 0
    260e:	0e 94 09 0f 	call	0x1e12	; 0x1e12 <eeprom_write_byte>
        eeprom_write_byte(EEPROM_INIT_FLAG_ADDR, EEPROM_INIT_FLAG);
    2612:	8f ef       	ldi	r24, 0xFF	; 255
    2614:	90 e0       	ldi	r25, 0x00	; 0
    2616:	65 ea       	ldi	r22, 0xA5	; 165
    2618:	0e 94 09 0f 	call	0x1e12	; 0x1e12 <eeprom_write_byte>
    }
}
    261c:	0f 90       	pop	r0
    261e:	cf 91       	pop	r28
    2620:	df 91       	pop	r29
    2622:	08 95       	ret

00002624 <IR_Sensor_ISR>:

void IR_Sensor_ISR(void) {
    2624:	df 93       	push	r29
    2626:	cf 93       	push	r28
    2628:	cd b7       	in	r28, 0x3d	; 61
    262a:	de b7       	in	r29, 0x3e	; 62
    car_parked_correctly = 1;
    262c:	81 e0       	ldi	r24, 0x01	; 1
    262e:	80 93 90 01 	sts	0x0190, r24
    LED_On(LED_CAR_PARKED);
    2632:	82 e0       	ldi	r24, 0x02	; 2
    2634:	65 e0       	ldi	r22, 0x05	; 5
    2636:	0e 94 70 0d 	call	0x1ae0	; 0x1ae0 <LED_On>
}
    263a:	cf 91       	pop	r28
    263c:	df 91       	pop	r29
    263e:	08 95       	ret

00002640 <Handle_Slave_Request_ISR>:

void Handle_Slave_Request_ISR() {
    2640:	df 93       	push	r29
    2642:	cf 93       	push	r28
    2644:	cd b7       	in	r28, 0x3d	; 61
    2646:	de b7       	in	r29, 0x3e	; 62

	Master_Receive_Data(RX_Data);
    2648:	8d e8       	ldi	r24, 0x8D	; 141
    264a:	91 e0       	ldi	r25, 0x01	; 1
    264c:	0e 94 0a 11 	call	0x2214	; 0x2214 <Master_Receive_Data>
    request_pending = 1;
    2650:	81 e0       	ldi	r24, 0x01	; 1
    2652:	80 93 86 01 	sts	0x0186, r24
}
    2656:	cf 91       	pop	r28
    2658:	df 91       	pop	r29
    265a:	08 95       	ret

0000265c <Process_Slave_Request>:

void Process_Slave_Request(void) {
    265c:	df 93       	push	r29
    265e:	cf 93       	push	r28
    2660:	cd b7       	in	r28, 0x3d	; 61
    2662:	de b7       	in	r29, 0x3e	; 62
    2664:	27 97       	sbiw	r28, 0x07	; 7
    2666:	0f b6       	in	r0, 0x3f	; 63
    2668:	f8 94       	cli
    266a:	de bf       	out	0x3e, r29	; 62
    266c:	0f be       	out	0x3f, r0	; 63
    266e:	cd bf       	out	0x3d, r28	; 61
	LED_Off(LED_CAR_PARKED);
    2670:	82 e0       	ldi	r24, 0x02	; 2
    2672:	65 e0       	ldi	r22, 0x05	; 5
    2674:	0e 94 81 0d 	call	0x1b02	; 0x1b02 <LED_Off>
    uint16_t timeout = 5000;
    2678:	88 e8       	ldi	r24, 0x88	; 136
    267a:	93 e1       	ldi	r25, 0x13	; 19
    267c:	9d 83       	std	Y+5, r25	; 0x05
    267e:	8c 83       	std	Y+4, r24	; 0x04
    uint8_t request_type = RX_Data[0];
    2680:	80 91 8d 01 	lds	r24, 0x018D
    2684:	8b 83       	std	Y+3, r24	; 0x03
    request_pending = 0;
    2686:	10 92 86 01 	sts	0x0186, r1

    switch (request_type) {
    268a:	8b 81       	ldd	r24, Y+3	; 0x03
    268c:	28 2f       	mov	r18, r24
    268e:	30 e0       	ldi	r19, 0x00	; 0
    2690:	3f 83       	std	Y+7, r19	; 0x07
    2692:	2e 83       	std	Y+6, r18	; 0x06
    2694:	8e 81       	ldd	r24, Y+6	; 0x06
    2696:	9f 81       	ldd	r25, Y+7	; 0x07
    2698:	86 30       	cpi	r24, 0x06	; 6
    269a:	91 05       	cpc	r25, r1
    269c:	39 f0       	breq	.+14     	; 0x26ac <Process_Slave_Request+0x50>
    269e:	2e 81       	ldd	r18, Y+6	; 0x06
    26a0:	3f 81       	ldd	r19, Y+7	; 0x07
    26a2:	27 30       	cpi	r18, 0x07	; 7
    26a4:	31 05       	cpc	r19, r1
    26a6:	09 f4       	brne	.+2      	; 0x26aa <Process_Slave_Request+0x4e>
    26a8:	62 c0       	rjmp	.+196    	; 0x276e <Process_Slave_Request+0x112>
    26aa:	8f c0       	rjmp	.+286    	; 0x27ca <Process_Slave_Request+0x16e>
        case REQUEST_PARK_CAR: {

            car_parked_correctly = 0;
    26ac:	10 92 90 01 	sts	0x0190, r1
            uint8_t nearest_empty_slot = Find_Nearest_Empty_Slot(currentSlot);
    26b0:	80 91 8f 01 	lds	r24, 0x018F
    26b4:	0e 94 7e 11 	call	0x22fc	; 0x22fc <Find_Nearest_Empty_Slot>
    26b8:	8a 83       	std	Y+2, r24	; 0x02

            if (nearest_empty_slot != 0xFF) {
    26ba:	8a 81       	ldd	r24, Y+2	; 0x02
    26bc:	8f 3f       	cpi	r24, 0xFF	; 255
    26be:	09 f4       	brne	.+2      	; 0x26c2 <Process_Slave_Request+0x66>
    26c0:	4e c0       	rjmp	.+156    	; 0x275e <Process_Slave_Request+0x102>
                TX_Data[0] = EMPTY_SLOT_FOUND;
    26c2:	88 e0       	ldi	r24, 0x08	; 8
    26c4:	80 93 84 01 	sts	0x0184, r24
                TX_Data[1] = nearest_empty_slot;
    26c8:	8a 81       	ldd	r24, Y+2	; 0x02
    26ca:	80 93 85 01 	sts	0x0185, r24
                //ACK

                Master_Send_Data(TX_Data);
    26ce:	84 e8       	ldi	r24, 0x84	; 132
    26d0:	91 e0       	ldi	r25, 0x01	; 1
    26d2:	0e 94 d8 10 	call	0x21b0	; 0x21b0 <Master_Send_Data>

                delay_milliseconds(500);
    26d6:	64 ef       	ldi	r22, 0xF4	; 244
    26d8:	71 e0       	ldi	r23, 0x01	; 1
    26da:	80 e0       	ldi	r24, 0x00	; 0
    26dc:	90 e0       	ldi	r25, 0x00	; 0
    26de:	0e 94 95 0b 	call	0x172a	; 0x172a <delay_milliseconds>
                LED_On(LED_STEPPER_ON);
    26e2:	82 e0       	ldi	r24, 0x02	; 2
    26e4:	66 e0       	ldi	r22, 0x06	; 6
    26e6:	0e 94 70 0d 	call	0x1ae0	; 0x1ae0 <LED_On>
                Assign_User_To_Slot(nearest_empty_slot);
    26ea:	8a 81       	ldd	r24, Y+2	; 0x02
    26ec:	0e 94 37 12 	call	0x246e	; 0x246e <Assign_User_To_Slot>
                LED_Off(LED_STEPPER_ON);
    26f0:	82 e0       	ldi	r24, 0x02	; 2
    26f2:	66 e0       	ldi	r22, 0x06	; 6
    26f4:	0e 94 81 0d 	call	0x1b02	; 0x1b02 <LED_Off>

                TX_Data[0] = REQUESTED_EMPTY_SLOT_READY;
    26f8:	8a e0       	ldi	r24, 0x0A	; 10
    26fa:	80 93 84 01 	sts	0x0184, r24

                Master_Send_Data(TX_Data);
    26fe:	84 e8       	ldi	r24, 0x84	; 132
    2700:	91 e0       	ldi	r25, 0x01	; 1
    2702:	0e 94 d8 10 	call	0x21b0	; 0x21b0 <Master_Send_Data>

                IR_Enable();
    2706:	0e 94 c0 0d 	call	0x1b80	; 0x1b80 <IR_Enable>
                delay_milliseconds(5);
    270a:	65 e0       	ldi	r22, 0x05	; 5
    270c:	70 e0       	ldi	r23, 0x00	; 0
    270e:	80 e0       	ldi	r24, 0x00	; 0
    2710:	90 e0       	ldi	r25, 0x00	; 0
    2712:	0e 94 95 0b 	call	0x172a	; 0x172a <delay_milliseconds>
    2716:	0b c0       	rjmp	.+22     	; 0x272e <Process_Slave_Request+0xd2>
                while (!car_parked_correctly && timeout > 0){
                	 timeout--;
    2718:	8c 81       	ldd	r24, Y+4	; 0x04
    271a:	9d 81       	ldd	r25, Y+5	; 0x05
    271c:	01 97       	sbiw	r24, 0x01	; 1
    271e:	9d 83       	std	Y+5, r25	; 0x05
    2720:	8c 83       	std	Y+4, r24	; 0x04
                	 delay_milliseconds(1);
    2722:	61 e0       	ldi	r22, 0x01	; 1
    2724:	70 e0       	ldi	r23, 0x00	; 0
    2726:	80 e0       	ldi	r24, 0x00	; 0
    2728:	90 e0       	ldi	r25, 0x00	; 0
    272a:	0e 94 95 0b 	call	0x172a	; 0x172a <delay_milliseconds>

                Master_Send_Data(TX_Data);

                IR_Enable();
                delay_milliseconds(5);
                while (!car_parked_correctly && timeout > 0){
    272e:	80 91 90 01 	lds	r24, 0x0190
    2732:	88 23       	and	r24, r24
    2734:	21 f4       	brne	.+8      	; 0x273e <Process_Slave_Request+0xe2>
    2736:	8c 81       	ldd	r24, Y+4	; 0x04
    2738:	9d 81       	ldd	r25, Y+5	; 0x05
    273a:	00 97       	sbiw	r24, 0x00	; 0
    273c:	69 f7       	brne	.-38     	; 0x2718 <Process_Slave_Request+0xbc>
                	 timeout--;
                	 delay_milliseconds(1);
                }
                TX_Data[0] = CLOSE_GATE;
    273e:	8d e0       	ldi	r24, 0x0D	; 13
    2740:	80 93 84 01 	sts	0x0184, r24
                Master_Send_Data(TX_Data);
    2744:	84 e8       	ldi	r24, 0x84	; 132
    2746:	91 e0       	ldi	r25, 0x01	; 1
    2748:	0e 94 d8 10 	call	0x21b0	; 0x21b0 <Master_Send_Data>

                IR_Disable();
    274c:	0e 94 b7 0d 	call	0x1b6e	; 0x1b6e <IR_Disable>

                delay_milliseconds(1);
    2750:	61 e0       	ldi	r22, 0x01	; 1
    2752:	70 e0       	ldi	r23, 0x00	; 0
    2754:	80 e0       	ldi	r24, 0x00	; 0
    2756:	90 e0       	ldi	r25, 0x00	; 0
    2758:	0e 94 95 0b 	call	0x172a	; 0x172a <delay_milliseconds>
    275c:	3d c0       	rjmp	.+122    	; 0x27d8 <Process_Slave_Request+0x17c>


            } else {
                TX_Data[0] = NO_EMPTY_SLOT;
    275e:	89 e0       	ldi	r24, 0x09	; 9
    2760:	80 93 84 01 	sts	0x0184, r24
                Master_Send_Data(TX_Data);
    2764:	84 e8       	ldi	r24, 0x84	; 132
    2766:	91 e0       	ldi	r25, 0x01	; 1
    2768:	0e 94 d8 10 	call	0x21b0	; 0x21b0 <Master_Send_Data>
    276c:	35 c0       	rjmp	.+106    	; 0x27d8 <Process_Slave_Request+0x17c>
            }
            break;
        }
        case REQUEST_RETRIEVE_CAR: {

            uint8_t slot_id = RX_Data[1];
    276e:	80 91 8e 01 	lds	r24, 0x018E
    2772:	89 83       	std	Y+1, r24	; 0x01
            if (slot_id < TOTAL_SLOTS && slot_status[slot_id] == 1) {
    2774:	89 81       	ldd	r24, Y+1	; 0x01
    2776:	86 30       	cpi	r24, 0x06	; 6
    2778:	00 f5       	brcc	.+64     	; 0x27ba <Process_Slave_Request+0x15e>
    277a:	89 81       	ldd	r24, Y+1	; 0x01
    277c:	88 2f       	mov	r24, r24
    277e:	90 e0       	ldi	r25, 0x00	; 0
    2780:	fc 01       	movw	r30, r24
    2782:	e9 57       	subi	r30, 0x79	; 121
    2784:	fe 4f       	sbci	r31, 0xFE	; 254
    2786:	80 81       	ld	r24, Z
    2788:	81 30       	cpi	r24, 0x01	; 1
    278a:	b9 f4       	brne	.+46     	; 0x27ba <Process_Slave_Request+0x15e>

            	LED_On(LED_STEPPER_ON);
    278c:	82 e0       	ldi	r24, 0x02	; 2
    278e:	66 e0       	ldi	r22, 0x06	; 6
    2790:	0e 94 70 0d 	call	0x1ae0	; 0x1ae0 <LED_On>
                Retrieve_Car_From_Slot(slot_id);
    2794:	89 81       	ldd	r24, Y+1	; 0x01
    2796:	0e 94 5c 12 	call	0x24b8	; 0x24b8 <Retrieve_Car_From_Slot>
                TX_Data[0] = REQUESTED_CAR_READY;
    279a:	8b e0       	ldi	r24, 0x0B	; 11
    279c:	80 93 84 01 	sts	0x0184, r24
                TX_Data[1] = RX_Data[1];
    27a0:	80 91 8e 01 	lds	r24, 0x018E
    27a4:	80 93 85 01 	sts	0x0185, r24
                Master_Send_Data(TX_Data);
    27a8:	84 e8       	ldi	r24, 0x84	; 132
    27aa:	91 e0       	ldi	r25, 0x01	; 1
    27ac:	0e 94 d8 10 	call	0x21b0	; 0x21b0 <Master_Send_Data>
                LED_Off(LED_STEPPER_ON);
    27b0:	82 e0       	ldi	r24, 0x02	; 2
    27b2:	66 e0       	ldi	r22, 0x06	; 6
    27b4:	0e 94 81 0d 	call	0x1b02	; 0x1b02 <LED_Off>
    27b8:	0f c0       	rjmp	.+30     	; 0x27d8 <Process_Slave_Request+0x17c>

            } else {
                TX_Data[0] = WRONG_SLOT_ID;
    27ba:	8c e0       	ldi	r24, 0x0C	; 12
    27bc:	80 93 84 01 	sts	0x0184, r24
                Master_Send_Data(TX_Data);
    27c0:	84 e8       	ldi	r24, 0x84	; 132
    27c2:	91 e0       	ldi	r25, 0x01	; 1
    27c4:	0e 94 d8 10 	call	0x21b0	; 0x21b0 <Master_Send_Data>
    27c8:	07 c0       	rjmp	.+14     	; 0x27d8 <Process_Slave_Request+0x17c>
            }
            break;
        }
        default: {
            TX_Data[0] = UNKNOWN_REQUEST;
    27ca:	8e e0       	ldi	r24, 0x0E	; 14
    27cc:	80 93 84 01 	sts	0x0184, r24
            Master_Send_Data(TX_Data);
    27d0:	84 e8       	ldi	r24, 0x84	; 132
    27d2:	91 e0       	ldi	r25, 0x01	; 1
    27d4:	0e 94 d8 10 	call	0x21b0	; 0x21b0 <Master_Send_Data>
            break;
        }
    }
}
    27d8:	27 96       	adiw	r28, 0x07	; 7
    27da:	0f b6       	in	r0, 0x3f	; 63
    27dc:	f8 94       	cli
    27de:	de bf       	out	0x3e, r29	; 62
    27e0:	0f be       	out	0x3f, r0	; 63
    27e2:	cd bf       	out	0x3d, r28	; 61
    27e4:	cf 91       	pop	r28
    27e6:	df 91       	pop	r29
    27e8:	08 95       	ret

000027ea <strlen>:
    27ea:	fc 01       	movw	r30, r24
    27ec:	01 90       	ld	r0, Z+
    27ee:	00 20       	and	r0, r0
    27f0:	e9 f7       	brne	.-6      	; 0x27ec <strlen+0x2>
    27f2:	80 95       	com	r24
    27f4:	90 95       	com	r25
    27f6:	8e 0f       	add	r24, r30
    27f8:	9f 1f       	adc	r25, r31
    27fa:	08 95       	ret

000027fc <snprintf>:
    27fc:	ae e0       	ldi	r26, 0x0E	; 14
    27fe:	b0 e0       	ldi	r27, 0x00	; 0
    2800:	e4 e0       	ldi	r30, 0x04	; 4
    2802:	f4 e1       	ldi	r31, 0x14	; 20
    2804:	0c 94 ba 16 	jmp	0x2d74	; 0x2d74 <__prologue_saves__+0x1c>
    2808:	0d 89       	ldd	r16, Y+21	; 0x15
    280a:	1e 89       	ldd	r17, Y+22	; 0x16
    280c:	8f 89       	ldd	r24, Y+23	; 0x17
    280e:	98 8d       	ldd	r25, Y+24	; 0x18
    2810:	97 ff       	sbrs	r25, 7
    2812:	02 c0       	rjmp	.+4      	; 0x2818 <snprintf+0x1c>
    2814:	80 e0       	ldi	r24, 0x00	; 0
    2816:	90 e8       	ldi	r25, 0x80	; 128
    2818:	01 97       	sbiw	r24, 0x01	; 1
    281a:	9e 83       	std	Y+6, r25	; 0x06
    281c:	8d 83       	std	Y+5, r24	; 0x05
    281e:	1a 83       	std	Y+2, r17	; 0x02
    2820:	09 83       	std	Y+1, r16	; 0x01
    2822:	86 e0       	ldi	r24, 0x06	; 6
    2824:	8c 83       	std	Y+4, r24	; 0x04
    2826:	9e 01       	movw	r18, r28
    2828:	25 5e       	subi	r18, 0xE5	; 229
    282a:	3f 4f       	sbci	r19, 0xFF	; 255
    282c:	ce 01       	movw	r24, r28
    282e:	01 96       	adiw	r24, 0x01	; 1
    2830:	69 8d       	ldd	r22, Y+25	; 0x19
    2832:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2834:	a9 01       	movw	r20, r18
    2836:	0e 94 2f 14 	call	0x285e	; 0x285e <vfprintf>
    283a:	4d 81       	ldd	r20, Y+5	; 0x05
    283c:	5e 81       	ldd	r21, Y+6	; 0x06
    283e:	57 fd       	sbrc	r21, 7
    2840:	0a c0       	rjmp	.+20     	; 0x2856 <snprintf+0x5a>
    2842:	2f 81       	ldd	r18, Y+7	; 0x07
    2844:	38 85       	ldd	r19, Y+8	; 0x08
    2846:	42 17       	cp	r20, r18
    2848:	53 07       	cpc	r21, r19
    284a:	0c f4       	brge	.+2      	; 0x284e <snprintf+0x52>
    284c:	9a 01       	movw	r18, r20
    284e:	02 0f       	add	r16, r18
    2850:	13 1f       	adc	r17, r19
    2852:	f8 01       	movw	r30, r16
    2854:	10 82       	st	Z, r1
    2856:	2e 96       	adiw	r28, 0x0e	; 14
    2858:	e4 e0       	ldi	r30, 0x04	; 4
    285a:	0c 94 d6 16 	jmp	0x2dac	; 0x2dac <__epilogue_restores__+0x1c>

0000285e <vfprintf>:
    285e:	ab e0       	ldi	r26, 0x0B	; 11
    2860:	b0 e0       	ldi	r27, 0x00	; 0
    2862:	e5 e3       	ldi	r30, 0x35	; 53
    2864:	f4 e1       	ldi	r31, 0x14	; 20
    2866:	0c 94 ac 16 	jmp	0x2d58	; 0x2d58 <__prologue_saves__>
    286a:	3c 01       	movw	r6, r24
    286c:	2b 01       	movw	r4, r22
    286e:	5a 01       	movw	r10, r20
    2870:	fc 01       	movw	r30, r24
    2872:	17 82       	std	Z+7, r1	; 0x07
    2874:	16 82       	std	Z+6, r1	; 0x06
    2876:	83 81       	ldd	r24, Z+3	; 0x03
    2878:	81 fd       	sbrc	r24, 1
    287a:	03 c0       	rjmp	.+6      	; 0x2882 <vfprintf+0x24>
    287c:	6f ef       	ldi	r22, 0xFF	; 255
    287e:	7f ef       	ldi	r23, 0xFF	; 255
    2880:	c6 c1       	rjmp	.+908    	; 0x2c0e <vfprintf+0x3b0>
    2882:	9a e0       	ldi	r25, 0x0A	; 10
    2884:	89 2e       	mov	r8, r25
    2886:	1e 01       	movw	r2, r28
    2888:	08 94       	sec
    288a:	21 1c       	adc	r2, r1
    288c:	31 1c       	adc	r3, r1
    288e:	f3 01       	movw	r30, r6
    2890:	23 81       	ldd	r18, Z+3	; 0x03
    2892:	f2 01       	movw	r30, r4
    2894:	23 fd       	sbrc	r18, 3
    2896:	85 91       	lpm	r24, Z+
    2898:	23 ff       	sbrs	r18, 3
    289a:	81 91       	ld	r24, Z+
    289c:	2f 01       	movw	r4, r30
    289e:	88 23       	and	r24, r24
    28a0:	09 f4       	brne	.+2      	; 0x28a4 <vfprintf+0x46>
    28a2:	b2 c1       	rjmp	.+868    	; 0x2c08 <vfprintf+0x3aa>
    28a4:	85 32       	cpi	r24, 0x25	; 37
    28a6:	39 f4       	brne	.+14     	; 0x28b6 <vfprintf+0x58>
    28a8:	23 fd       	sbrc	r18, 3
    28aa:	85 91       	lpm	r24, Z+
    28ac:	23 ff       	sbrs	r18, 3
    28ae:	81 91       	ld	r24, Z+
    28b0:	2f 01       	movw	r4, r30
    28b2:	85 32       	cpi	r24, 0x25	; 37
    28b4:	29 f4       	brne	.+10     	; 0x28c0 <vfprintf+0x62>
    28b6:	90 e0       	ldi	r25, 0x00	; 0
    28b8:	b3 01       	movw	r22, r6
    28ba:	0e 94 22 16 	call	0x2c44	; 0x2c44 <fputc>
    28be:	e7 cf       	rjmp	.-50     	; 0x288e <vfprintf+0x30>
    28c0:	98 2f       	mov	r25, r24
    28c2:	ff 24       	eor	r15, r15
    28c4:	ee 24       	eor	r14, r14
    28c6:	99 24       	eor	r9, r9
    28c8:	ff e1       	ldi	r31, 0x1F	; 31
    28ca:	ff 15       	cp	r31, r15
    28cc:	d0 f0       	brcs	.+52     	; 0x2902 <vfprintf+0xa4>
    28ce:	9b 32       	cpi	r25, 0x2B	; 43
    28d0:	69 f0       	breq	.+26     	; 0x28ec <vfprintf+0x8e>
    28d2:	9c 32       	cpi	r25, 0x2C	; 44
    28d4:	28 f4       	brcc	.+10     	; 0x28e0 <vfprintf+0x82>
    28d6:	90 32       	cpi	r25, 0x20	; 32
    28d8:	59 f0       	breq	.+22     	; 0x28f0 <vfprintf+0x92>
    28da:	93 32       	cpi	r25, 0x23	; 35
    28dc:	91 f4       	brne	.+36     	; 0x2902 <vfprintf+0xa4>
    28de:	0e c0       	rjmp	.+28     	; 0x28fc <vfprintf+0x9e>
    28e0:	9d 32       	cpi	r25, 0x2D	; 45
    28e2:	49 f0       	breq	.+18     	; 0x28f6 <vfprintf+0x98>
    28e4:	90 33       	cpi	r25, 0x30	; 48
    28e6:	69 f4       	brne	.+26     	; 0x2902 <vfprintf+0xa4>
    28e8:	41 e0       	ldi	r20, 0x01	; 1
    28ea:	24 c0       	rjmp	.+72     	; 0x2934 <vfprintf+0xd6>
    28ec:	52 e0       	ldi	r21, 0x02	; 2
    28ee:	f5 2a       	or	r15, r21
    28f0:	84 e0       	ldi	r24, 0x04	; 4
    28f2:	f8 2a       	or	r15, r24
    28f4:	28 c0       	rjmp	.+80     	; 0x2946 <vfprintf+0xe8>
    28f6:	98 e0       	ldi	r25, 0x08	; 8
    28f8:	f9 2a       	or	r15, r25
    28fa:	25 c0       	rjmp	.+74     	; 0x2946 <vfprintf+0xe8>
    28fc:	e0 e1       	ldi	r30, 0x10	; 16
    28fe:	fe 2a       	or	r15, r30
    2900:	22 c0       	rjmp	.+68     	; 0x2946 <vfprintf+0xe8>
    2902:	f7 fc       	sbrc	r15, 7
    2904:	29 c0       	rjmp	.+82     	; 0x2958 <vfprintf+0xfa>
    2906:	89 2f       	mov	r24, r25
    2908:	80 53       	subi	r24, 0x30	; 48
    290a:	8a 30       	cpi	r24, 0x0A	; 10
    290c:	70 f4       	brcc	.+28     	; 0x292a <vfprintf+0xcc>
    290e:	f6 fe       	sbrs	r15, 6
    2910:	05 c0       	rjmp	.+10     	; 0x291c <vfprintf+0xbe>
    2912:	98 9c       	mul	r9, r8
    2914:	90 2c       	mov	r9, r0
    2916:	11 24       	eor	r1, r1
    2918:	98 0e       	add	r9, r24
    291a:	15 c0       	rjmp	.+42     	; 0x2946 <vfprintf+0xe8>
    291c:	e8 9c       	mul	r14, r8
    291e:	e0 2c       	mov	r14, r0
    2920:	11 24       	eor	r1, r1
    2922:	e8 0e       	add	r14, r24
    2924:	f0 e2       	ldi	r31, 0x20	; 32
    2926:	ff 2a       	or	r15, r31
    2928:	0e c0       	rjmp	.+28     	; 0x2946 <vfprintf+0xe8>
    292a:	9e 32       	cpi	r25, 0x2E	; 46
    292c:	29 f4       	brne	.+10     	; 0x2938 <vfprintf+0xda>
    292e:	f6 fc       	sbrc	r15, 6
    2930:	6b c1       	rjmp	.+726    	; 0x2c08 <vfprintf+0x3aa>
    2932:	40 e4       	ldi	r20, 0x40	; 64
    2934:	f4 2a       	or	r15, r20
    2936:	07 c0       	rjmp	.+14     	; 0x2946 <vfprintf+0xe8>
    2938:	9c 36       	cpi	r25, 0x6C	; 108
    293a:	19 f4       	brne	.+6      	; 0x2942 <vfprintf+0xe4>
    293c:	50 e8       	ldi	r21, 0x80	; 128
    293e:	f5 2a       	or	r15, r21
    2940:	02 c0       	rjmp	.+4      	; 0x2946 <vfprintf+0xe8>
    2942:	98 36       	cpi	r25, 0x68	; 104
    2944:	49 f4       	brne	.+18     	; 0x2958 <vfprintf+0xfa>
    2946:	f2 01       	movw	r30, r4
    2948:	23 fd       	sbrc	r18, 3
    294a:	95 91       	lpm	r25, Z+
    294c:	23 ff       	sbrs	r18, 3
    294e:	91 91       	ld	r25, Z+
    2950:	2f 01       	movw	r4, r30
    2952:	99 23       	and	r25, r25
    2954:	09 f0       	breq	.+2      	; 0x2958 <vfprintf+0xfa>
    2956:	b8 cf       	rjmp	.-144    	; 0x28c8 <vfprintf+0x6a>
    2958:	89 2f       	mov	r24, r25
    295a:	85 54       	subi	r24, 0x45	; 69
    295c:	83 30       	cpi	r24, 0x03	; 3
    295e:	18 f0       	brcs	.+6      	; 0x2966 <vfprintf+0x108>
    2960:	80 52       	subi	r24, 0x20	; 32
    2962:	83 30       	cpi	r24, 0x03	; 3
    2964:	38 f4       	brcc	.+14     	; 0x2974 <vfprintf+0x116>
    2966:	44 e0       	ldi	r20, 0x04	; 4
    2968:	50 e0       	ldi	r21, 0x00	; 0
    296a:	a4 0e       	add	r10, r20
    296c:	b5 1e       	adc	r11, r21
    296e:	5f e3       	ldi	r21, 0x3F	; 63
    2970:	59 83       	std	Y+1, r21	; 0x01
    2972:	0f c0       	rjmp	.+30     	; 0x2992 <vfprintf+0x134>
    2974:	93 36       	cpi	r25, 0x63	; 99
    2976:	31 f0       	breq	.+12     	; 0x2984 <vfprintf+0x126>
    2978:	93 37       	cpi	r25, 0x73	; 115
    297a:	79 f0       	breq	.+30     	; 0x299a <vfprintf+0x13c>
    297c:	93 35       	cpi	r25, 0x53	; 83
    297e:	09 f0       	breq	.+2      	; 0x2982 <vfprintf+0x124>
    2980:	56 c0       	rjmp	.+172    	; 0x2a2e <vfprintf+0x1d0>
    2982:	20 c0       	rjmp	.+64     	; 0x29c4 <vfprintf+0x166>
    2984:	f5 01       	movw	r30, r10
    2986:	80 81       	ld	r24, Z
    2988:	89 83       	std	Y+1, r24	; 0x01
    298a:	42 e0       	ldi	r20, 0x02	; 2
    298c:	50 e0       	ldi	r21, 0x00	; 0
    298e:	a4 0e       	add	r10, r20
    2990:	b5 1e       	adc	r11, r21
    2992:	61 01       	movw	r12, r2
    2994:	01 e0       	ldi	r16, 0x01	; 1
    2996:	10 e0       	ldi	r17, 0x00	; 0
    2998:	12 c0       	rjmp	.+36     	; 0x29be <vfprintf+0x160>
    299a:	f5 01       	movw	r30, r10
    299c:	c0 80       	ld	r12, Z
    299e:	d1 80       	ldd	r13, Z+1	; 0x01
    29a0:	f6 fc       	sbrc	r15, 6
    29a2:	03 c0       	rjmp	.+6      	; 0x29aa <vfprintf+0x14c>
    29a4:	6f ef       	ldi	r22, 0xFF	; 255
    29a6:	7f ef       	ldi	r23, 0xFF	; 255
    29a8:	02 c0       	rjmp	.+4      	; 0x29ae <vfprintf+0x150>
    29aa:	69 2d       	mov	r22, r9
    29ac:	70 e0       	ldi	r23, 0x00	; 0
    29ae:	42 e0       	ldi	r20, 0x02	; 2
    29b0:	50 e0       	ldi	r21, 0x00	; 0
    29b2:	a4 0e       	add	r10, r20
    29b4:	b5 1e       	adc	r11, r21
    29b6:	c6 01       	movw	r24, r12
    29b8:	0e 94 17 16 	call	0x2c2e	; 0x2c2e <strnlen>
    29bc:	8c 01       	movw	r16, r24
    29be:	5f e7       	ldi	r21, 0x7F	; 127
    29c0:	f5 22       	and	r15, r21
    29c2:	14 c0       	rjmp	.+40     	; 0x29ec <vfprintf+0x18e>
    29c4:	f5 01       	movw	r30, r10
    29c6:	c0 80       	ld	r12, Z
    29c8:	d1 80       	ldd	r13, Z+1	; 0x01
    29ca:	f6 fc       	sbrc	r15, 6
    29cc:	03 c0       	rjmp	.+6      	; 0x29d4 <vfprintf+0x176>
    29ce:	6f ef       	ldi	r22, 0xFF	; 255
    29d0:	7f ef       	ldi	r23, 0xFF	; 255
    29d2:	02 c0       	rjmp	.+4      	; 0x29d8 <vfprintf+0x17a>
    29d4:	69 2d       	mov	r22, r9
    29d6:	70 e0       	ldi	r23, 0x00	; 0
    29d8:	42 e0       	ldi	r20, 0x02	; 2
    29da:	50 e0       	ldi	r21, 0x00	; 0
    29dc:	a4 0e       	add	r10, r20
    29de:	b5 1e       	adc	r11, r21
    29e0:	c6 01       	movw	r24, r12
    29e2:	0e 94 0c 16 	call	0x2c18	; 0x2c18 <strnlen_P>
    29e6:	8c 01       	movw	r16, r24
    29e8:	50 e8       	ldi	r21, 0x80	; 128
    29ea:	f5 2a       	or	r15, r21
    29ec:	f3 fe       	sbrs	r15, 3
    29ee:	07 c0       	rjmp	.+14     	; 0x29fe <vfprintf+0x1a0>
    29f0:	1a c0       	rjmp	.+52     	; 0x2a26 <vfprintf+0x1c8>
    29f2:	80 e2       	ldi	r24, 0x20	; 32
    29f4:	90 e0       	ldi	r25, 0x00	; 0
    29f6:	b3 01       	movw	r22, r6
    29f8:	0e 94 22 16 	call	0x2c44	; 0x2c44 <fputc>
    29fc:	ea 94       	dec	r14
    29fe:	8e 2d       	mov	r24, r14
    2a00:	90 e0       	ldi	r25, 0x00	; 0
    2a02:	08 17       	cp	r16, r24
    2a04:	19 07       	cpc	r17, r25
    2a06:	a8 f3       	brcs	.-22     	; 0x29f2 <vfprintf+0x194>
    2a08:	0e c0       	rjmp	.+28     	; 0x2a26 <vfprintf+0x1c8>
    2a0a:	f6 01       	movw	r30, r12
    2a0c:	f7 fc       	sbrc	r15, 7
    2a0e:	85 91       	lpm	r24, Z+
    2a10:	f7 fe       	sbrs	r15, 7
    2a12:	81 91       	ld	r24, Z+
    2a14:	6f 01       	movw	r12, r30
    2a16:	90 e0       	ldi	r25, 0x00	; 0
    2a18:	b3 01       	movw	r22, r6
    2a1a:	0e 94 22 16 	call	0x2c44	; 0x2c44 <fputc>
    2a1e:	e1 10       	cpse	r14, r1
    2a20:	ea 94       	dec	r14
    2a22:	01 50       	subi	r16, 0x01	; 1
    2a24:	10 40       	sbci	r17, 0x00	; 0
    2a26:	01 15       	cp	r16, r1
    2a28:	11 05       	cpc	r17, r1
    2a2a:	79 f7       	brne	.-34     	; 0x2a0a <vfprintf+0x1ac>
    2a2c:	ea c0       	rjmp	.+468    	; 0x2c02 <vfprintf+0x3a4>
    2a2e:	94 36       	cpi	r25, 0x64	; 100
    2a30:	11 f0       	breq	.+4      	; 0x2a36 <vfprintf+0x1d8>
    2a32:	99 36       	cpi	r25, 0x69	; 105
    2a34:	69 f5       	brne	.+90     	; 0x2a90 <vfprintf+0x232>
    2a36:	f7 fe       	sbrs	r15, 7
    2a38:	08 c0       	rjmp	.+16     	; 0x2a4a <vfprintf+0x1ec>
    2a3a:	f5 01       	movw	r30, r10
    2a3c:	20 81       	ld	r18, Z
    2a3e:	31 81       	ldd	r19, Z+1	; 0x01
    2a40:	42 81       	ldd	r20, Z+2	; 0x02
    2a42:	53 81       	ldd	r21, Z+3	; 0x03
    2a44:	84 e0       	ldi	r24, 0x04	; 4
    2a46:	90 e0       	ldi	r25, 0x00	; 0
    2a48:	0a c0       	rjmp	.+20     	; 0x2a5e <vfprintf+0x200>
    2a4a:	f5 01       	movw	r30, r10
    2a4c:	80 81       	ld	r24, Z
    2a4e:	91 81       	ldd	r25, Z+1	; 0x01
    2a50:	9c 01       	movw	r18, r24
    2a52:	44 27       	eor	r20, r20
    2a54:	37 fd       	sbrc	r19, 7
    2a56:	40 95       	com	r20
    2a58:	54 2f       	mov	r21, r20
    2a5a:	82 e0       	ldi	r24, 0x02	; 2
    2a5c:	90 e0       	ldi	r25, 0x00	; 0
    2a5e:	a8 0e       	add	r10, r24
    2a60:	b9 1e       	adc	r11, r25
    2a62:	9f e6       	ldi	r25, 0x6F	; 111
    2a64:	f9 22       	and	r15, r25
    2a66:	57 ff       	sbrs	r21, 7
    2a68:	09 c0       	rjmp	.+18     	; 0x2a7c <vfprintf+0x21e>
    2a6a:	50 95       	com	r21
    2a6c:	40 95       	com	r20
    2a6e:	30 95       	com	r19
    2a70:	21 95       	neg	r18
    2a72:	3f 4f       	sbci	r19, 0xFF	; 255
    2a74:	4f 4f       	sbci	r20, 0xFF	; 255
    2a76:	5f 4f       	sbci	r21, 0xFF	; 255
    2a78:	e0 e8       	ldi	r30, 0x80	; 128
    2a7a:	fe 2a       	or	r15, r30
    2a7c:	ca 01       	movw	r24, r20
    2a7e:	b9 01       	movw	r22, r18
    2a80:	a1 01       	movw	r20, r2
    2a82:	2a e0       	ldi	r18, 0x0A	; 10
    2a84:	30 e0       	ldi	r19, 0x00	; 0
    2a86:	0e 94 4e 16 	call	0x2c9c	; 0x2c9c <__ultoa_invert>
    2a8a:	d8 2e       	mov	r13, r24
    2a8c:	d2 18       	sub	r13, r2
    2a8e:	40 c0       	rjmp	.+128    	; 0x2b10 <vfprintf+0x2b2>
    2a90:	95 37       	cpi	r25, 0x75	; 117
    2a92:	29 f4       	brne	.+10     	; 0x2a9e <vfprintf+0x240>
    2a94:	1f 2d       	mov	r17, r15
    2a96:	1f 7e       	andi	r17, 0xEF	; 239
    2a98:	2a e0       	ldi	r18, 0x0A	; 10
    2a9a:	30 e0       	ldi	r19, 0x00	; 0
    2a9c:	1d c0       	rjmp	.+58     	; 0x2ad8 <vfprintf+0x27a>
    2a9e:	1f 2d       	mov	r17, r15
    2aa0:	19 7f       	andi	r17, 0xF9	; 249
    2aa2:	9f 36       	cpi	r25, 0x6F	; 111
    2aa4:	61 f0       	breq	.+24     	; 0x2abe <vfprintf+0x260>
    2aa6:	90 37       	cpi	r25, 0x70	; 112
    2aa8:	20 f4       	brcc	.+8      	; 0x2ab2 <vfprintf+0x254>
    2aaa:	98 35       	cpi	r25, 0x58	; 88
    2aac:	09 f0       	breq	.+2      	; 0x2ab0 <vfprintf+0x252>
    2aae:	ac c0       	rjmp	.+344    	; 0x2c08 <vfprintf+0x3aa>
    2ab0:	0f c0       	rjmp	.+30     	; 0x2ad0 <vfprintf+0x272>
    2ab2:	90 37       	cpi	r25, 0x70	; 112
    2ab4:	39 f0       	breq	.+14     	; 0x2ac4 <vfprintf+0x266>
    2ab6:	98 37       	cpi	r25, 0x78	; 120
    2ab8:	09 f0       	breq	.+2      	; 0x2abc <vfprintf+0x25e>
    2aba:	a6 c0       	rjmp	.+332    	; 0x2c08 <vfprintf+0x3aa>
    2abc:	04 c0       	rjmp	.+8      	; 0x2ac6 <vfprintf+0x268>
    2abe:	28 e0       	ldi	r18, 0x08	; 8
    2ac0:	30 e0       	ldi	r19, 0x00	; 0
    2ac2:	0a c0       	rjmp	.+20     	; 0x2ad8 <vfprintf+0x27a>
    2ac4:	10 61       	ori	r17, 0x10	; 16
    2ac6:	14 fd       	sbrc	r17, 4
    2ac8:	14 60       	ori	r17, 0x04	; 4
    2aca:	20 e1       	ldi	r18, 0x10	; 16
    2acc:	30 e0       	ldi	r19, 0x00	; 0
    2ace:	04 c0       	rjmp	.+8      	; 0x2ad8 <vfprintf+0x27a>
    2ad0:	14 fd       	sbrc	r17, 4
    2ad2:	16 60       	ori	r17, 0x06	; 6
    2ad4:	20 e1       	ldi	r18, 0x10	; 16
    2ad6:	32 e0       	ldi	r19, 0x02	; 2
    2ad8:	17 ff       	sbrs	r17, 7
    2ada:	08 c0       	rjmp	.+16     	; 0x2aec <vfprintf+0x28e>
    2adc:	f5 01       	movw	r30, r10
    2ade:	60 81       	ld	r22, Z
    2ae0:	71 81       	ldd	r23, Z+1	; 0x01
    2ae2:	82 81       	ldd	r24, Z+2	; 0x02
    2ae4:	93 81       	ldd	r25, Z+3	; 0x03
    2ae6:	44 e0       	ldi	r20, 0x04	; 4
    2ae8:	50 e0       	ldi	r21, 0x00	; 0
    2aea:	08 c0       	rjmp	.+16     	; 0x2afc <vfprintf+0x29e>
    2aec:	f5 01       	movw	r30, r10
    2aee:	80 81       	ld	r24, Z
    2af0:	91 81       	ldd	r25, Z+1	; 0x01
    2af2:	bc 01       	movw	r22, r24
    2af4:	80 e0       	ldi	r24, 0x00	; 0
    2af6:	90 e0       	ldi	r25, 0x00	; 0
    2af8:	42 e0       	ldi	r20, 0x02	; 2
    2afa:	50 e0       	ldi	r21, 0x00	; 0
    2afc:	a4 0e       	add	r10, r20
    2afe:	b5 1e       	adc	r11, r21
    2b00:	a1 01       	movw	r20, r2
    2b02:	0e 94 4e 16 	call	0x2c9c	; 0x2c9c <__ultoa_invert>
    2b06:	d8 2e       	mov	r13, r24
    2b08:	d2 18       	sub	r13, r2
    2b0a:	8f e7       	ldi	r24, 0x7F	; 127
    2b0c:	f8 2e       	mov	r15, r24
    2b0e:	f1 22       	and	r15, r17
    2b10:	f6 fe       	sbrs	r15, 6
    2b12:	0b c0       	rjmp	.+22     	; 0x2b2a <vfprintf+0x2cc>
    2b14:	5e ef       	ldi	r21, 0xFE	; 254
    2b16:	f5 22       	and	r15, r21
    2b18:	d9 14       	cp	r13, r9
    2b1a:	38 f4       	brcc	.+14     	; 0x2b2a <vfprintf+0x2cc>
    2b1c:	f4 fe       	sbrs	r15, 4
    2b1e:	07 c0       	rjmp	.+14     	; 0x2b2e <vfprintf+0x2d0>
    2b20:	f2 fc       	sbrc	r15, 2
    2b22:	05 c0       	rjmp	.+10     	; 0x2b2e <vfprintf+0x2d0>
    2b24:	8f ee       	ldi	r24, 0xEF	; 239
    2b26:	f8 22       	and	r15, r24
    2b28:	02 c0       	rjmp	.+4      	; 0x2b2e <vfprintf+0x2d0>
    2b2a:	1d 2d       	mov	r17, r13
    2b2c:	01 c0       	rjmp	.+2      	; 0x2b30 <vfprintf+0x2d2>
    2b2e:	19 2d       	mov	r17, r9
    2b30:	f4 fe       	sbrs	r15, 4
    2b32:	0d c0       	rjmp	.+26     	; 0x2b4e <vfprintf+0x2f0>
    2b34:	fe 01       	movw	r30, r28
    2b36:	ed 0d       	add	r30, r13
    2b38:	f1 1d       	adc	r31, r1
    2b3a:	80 81       	ld	r24, Z
    2b3c:	80 33       	cpi	r24, 0x30	; 48
    2b3e:	19 f4       	brne	.+6      	; 0x2b46 <vfprintf+0x2e8>
    2b40:	99 ee       	ldi	r25, 0xE9	; 233
    2b42:	f9 22       	and	r15, r25
    2b44:	08 c0       	rjmp	.+16     	; 0x2b56 <vfprintf+0x2f8>
    2b46:	1f 5f       	subi	r17, 0xFF	; 255
    2b48:	f2 fe       	sbrs	r15, 2
    2b4a:	05 c0       	rjmp	.+10     	; 0x2b56 <vfprintf+0x2f8>
    2b4c:	03 c0       	rjmp	.+6      	; 0x2b54 <vfprintf+0x2f6>
    2b4e:	8f 2d       	mov	r24, r15
    2b50:	86 78       	andi	r24, 0x86	; 134
    2b52:	09 f0       	breq	.+2      	; 0x2b56 <vfprintf+0x2f8>
    2b54:	1f 5f       	subi	r17, 0xFF	; 255
    2b56:	0f 2d       	mov	r16, r15
    2b58:	f3 fc       	sbrc	r15, 3
    2b5a:	14 c0       	rjmp	.+40     	; 0x2b84 <vfprintf+0x326>
    2b5c:	f0 fe       	sbrs	r15, 0
    2b5e:	0f c0       	rjmp	.+30     	; 0x2b7e <vfprintf+0x320>
    2b60:	1e 15       	cp	r17, r14
    2b62:	10 f0       	brcs	.+4      	; 0x2b68 <vfprintf+0x30a>
    2b64:	9d 2c       	mov	r9, r13
    2b66:	0b c0       	rjmp	.+22     	; 0x2b7e <vfprintf+0x320>
    2b68:	9d 2c       	mov	r9, r13
    2b6a:	9e 0c       	add	r9, r14
    2b6c:	91 1a       	sub	r9, r17
    2b6e:	1e 2d       	mov	r17, r14
    2b70:	06 c0       	rjmp	.+12     	; 0x2b7e <vfprintf+0x320>
    2b72:	80 e2       	ldi	r24, 0x20	; 32
    2b74:	90 e0       	ldi	r25, 0x00	; 0
    2b76:	b3 01       	movw	r22, r6
    2b78:	0e 94 22 16 	call	0x2c44	; 0x2c44 <fputc>
    2b7c:	1f 5f       	subi	r17, 0xFF	; 255
    2b7e:	1e 15       	cp	r17, r14
    2b80:	c0 f3       	brcs	.-16     	; 0x2b72 <vfprintf+0x314>
    2b82:	04 c0       	rjmp	.+8      	; 0x2b8c <vfprintf+0x32e>
    2b84:	1e 15       	cp	r17, r14
    2b86:	10 f4       	brcc	.+4      	; 0x2b8c <vfprintf+0x32e>
    2b88:	e1 1a       	sub	r14, r17
    2b8a:	01 c0       	rjmp	.+2      	; 0x2b8e <vfprintf+0x330>
    2b8c:	ee 24       	eor	r14, r14
    2b8e:	04 ff       	sbrs	r16, 4
    2b90:	0f c0       	rjmp	.+30     	; 0x2bb0 <vfprintf+0x352>
    2b92:	80 e3       	ldi	r24, 0x30	; 48
    2b94:	90 e0       	ldi	r25, 0x00	; 0
    2b96:	b3 01       	movw	r22, r6
    2b98:	0e 94 22 16 	call	0x2c44	; 0x2c44 <fputc>
    2b9c:	02 ff       	sbrs	r16, 2
    2b9e:	1d c0       	rjmp	.+58     	; 0x2bda <vfprintf+0x37c>
    2ba0:	01 fd       	sbrc	r16, 1
    2ba2:	03 c0       	rjmp	.+6      	; 0x2baa <vfprintf+0x34c>
    2ba4:	88 e7       	ldi	r24, 0x78	; 120
    2ba6:	90 e0       	ldi	r25, 0x00	; 0
    2ba8:	0e c0       	rjmp	.+28     	; 0x2bc6 <vfprintf+0x368>
    2baa:	88 e5       	ldi	r24, 0x58	; 88
    2bac:	90 e0       	ldi	r25, 0x00	; 0
    2bae:	0b c0       	rjmp	.+22     	; 0x2bc6 <vfprintf+0x368>
    2bb0:	80 2f       	mov	r24, r16
    2bb2:	86 78       	andi	r24, 0x86	; 134
    2bb4:	91 f0       	breq	.+36     	; 0x2bda <vfprintf+0x37c>
    2bb6:	01 ff       	sbrs	r16, 1
    2bb8:	02 c0       	rjmp	.+4      	; 0x2bbe <vfprintf+0x360>
    2bba:	8b e2       	ldi	r24, 0x2B	; 43
    2bbc:	01 c0       	rjmp	.+2      	; 0x2bc0 <vfprintf+0x362>
    2bbe:	80 e2       	ldi	r24, 0x20	; 32
    2bc0:	f7 fc       	sbrc	r15, 7
    2bc2:	8d e2       	ldi	r24, 0x2D	; 45
    2bc4:	90 e0       	ldi	r25, 0x00	; 0
    2bc6:	b3 01       	movw	r22, r6
    2bc8:	0e 94 22 16 	call	0x2c44	; 0x2c44 <fputc>
    2bcc:	06 c0       	rjmp	.+12     	; 0x2bda <vfprintf+0x37c>
    2bce:	80 e3       	ldi	r24, 0x30	; 48
    2bd0:	90 e0       	ldi	r25, 0x00	; 0
    2bd2:	b3 01       	movw	r22, r6
    2bd4:	0e 94 22 16 	call	0x2c44	; 0x2c44 <fputc>
    2bd8:	9a 94       	dec	r9
    2bda:	d9 14       	cp	r13, r9
    2bdc:	c0 f3       	brcs	.-16     	; 0x2bce <vfprintf+0x370>
    2bde:	da 94       	dec	r13
    2be0:	f1 01       	movw	r30, r2
    2be2:	ed 0d       	add	r30, r13
    2be4:	f1 1d       	adc	r31, r1
    2be6:	80 81       	ld	r24, Z
    2be8:	90 e0       	ldi	r25, 0x00	; 0
    2bea:	b3 01       	movw	r22, r6
    2bec:	0e 94 22 16 	call	0x2c44	; 0x2c44 <fputc>
    2bf0:	dd 20       	and	r13, r13
    2bf2:	a9 f7       	brne	.-22     	; 0x2bde <vfprintf+0x380>
    2bf4:	06 c0       	rjmp	.+12     	; 0x2c02 <vfprintf+0x3a4>
    2bf6:	80 e2       	ldi	r24, 0x20	; 32
    2bf8:	90 e0       	ldi	r25, 0x00	; 0
    2bfa:	b3 01       	movw	r22, r6
    2bfc:	0e 94 22 16 	call	0x2c44	; 0x2c44 <fputc>
    2c00:	ea 94       	dec	r14
    2c02:	ee 20       	and	r14, r14
    2c04:	c1 f7       	brne	.-16     	; 0x2bf6 <vfprintf+0x398>
    2c06:	43 ce       	rjmp	.-890    	; 0x288e <vfprintf+0x30>
    2c08:	f3 01       	movw	r30, r6
    2c0a:	66 81       	ldd	r22, Z+6	; 0x06
    2c0c:	77 81       	ldd	r23, Z+7	; 0x07
    2c0e:	cb 01       	movw	r24, r22
    2c10:	2b 96       	adiw	r28, 0x0b	; 11
    2c12:	e2 e1       	ldi	r30, 0x12	; 18
    2c14:	0c 94 c8 16 	jmp	0x2d90	; 0x2d90 <__epilogue_restores__>

00002c18 <strnlen_P>:
    2c18:	fc 01       	movw	r30, r24
    2c1a:	05 90       	lpm	r0, Z+
    2c1c:	61 50       	subi	r22, 0x01	; 1
    2c1e:	70 40       	sbci	r23, 0x00	; 0
    2c20:	01 10       	cpse	r0, r1
    2c22:	d8 f7       	brcc	.-10     	; 0x2c1a <strnlen_P+0x2>
    2c24:	80 95       	com	r24
    2c26:	90 95       	com	r25
    2c28:	8e 0f       	add	r24, r30
    2c2a:	9f 1f       	adc	r25, r31
    2c2c:	08 95       	ret

00002c2e <strnlen>:
    2c2e:	fc 01       	movw	r30, r24
    2c30:	61 50       	subi	r22, 0x01	; 1
    2c32:	70 40       	sbci	r23, 0x00	; 0
    2c34:	01 90       	ld	r0, Z+
    2c36:	01 10       	cpse	r0, r1
    2c38:	d8 f7       	brcc	.-10     	; 0x2c30 <strnlen+0x2>
    2c3a:	80 95       	com	r24
    2c3c:	90 95       	com	r25
    2c3e:	8e 0f       	add	r24, r30
    2c40:	9f 1f       	adc	r25, r31
    2c42:	08 95       	ret

00002c44 <fputc>:
    2c44:	0f 93       	push	r16
    2c46:	1f 93       	push	r17
    2c48:	cf 93       	push	r28
    2c4a:	df 93       	push	r29
    2c4c:	8c 01       	movw	r16, r24
    2c4e:	eb 01       	movw	r28, r22
    2c50:	8b 81       	ldd	r24, Y+3	; 0x03
    2c52:	81 ff       	sbrs	r24, 1
    2c54:	1b c0       	rjmp	.+54     	; 0x2c8c <fputc+0x48>
    2c56:	82 ff       	sbrs	r24, 2
    2c58:	0d c0       	rjmp	.+26     	; 0x2c74 <fputc+0x30>
    2c5a:	2e 81       	ldd	r18, Y+6	; 0x06
    2c5c:	3f 81       	ldd	r19, Y+7	; 0x07
    2c5e:	8c 81       	ldd	r24, Y+4	; 0x04
    2c60:	9d 81       	ldd	r25, Y+5	; 0x05
    2c62:	28 17       	cp	r18, r24
    2c64:	39 07       	cpc	r19, r25
    2c66:	64 f4       	brge	.+24     	; 0x2c80 <fputc+0x3c>
    2c68:	e8 81       	ld	r30, Y
    2c6a:	f9 81       	ldd	r31, Y+1	; 0x01
    2c6c:	01 93       	st	Z+, r16
    2c6e:	f9 83       	std	Y+1, r31	; 0x01
    2c70:	e8 83       	st	Y, r30
    2c72:	06 c0       	rjmp	.+12     	; 0x2c80 <fputc+0x3c>
    2c74:	e8 85       	ldd	r30, Y+8	; 0x08
    2c76:	f9 85       	ldd	r31, Y+9	; 0x09
    2c78:	80 2f       	mov	r24, r16
    2c7a:	09 95       	icall
    2c7c:	89 2b       	or	r24, r25
    2c7e:	31 f4       	brne	.+12     	; 0x2c8c <fputc+0x48>
    2c80:	8e 81       	ldd	r24, Y+6	; 0x06
    2c82:	9f 81       	ldd	r25, Y+7	; 0x07
    2c84:	01 96       	adiw	r24, 0x01	; 1
    2c86:	9f 83       	std	Y+7, r25	; 0x07
    2c88:	8e 83       	std	Y+6, r24	; 0x06
    2c8a:	02 c0       	rjmp	.+4      	; 0x2c90 <fputc+0x4c>
    2c8c:	0f ef       	ldi	r16, 0xFF	; 255
    2c8e:	1f ef       	ldi	r17, 0xFF	; 255
    2c90:	c8 01       	movw	r24, r16
    2c92:	df 91       	pop	r29
    2c94:	cf 91       	pop	r28
    2c96:	1f 91       	pop	r17
    2c98:	0f 91       	pop	r16
    2c9a:	08 95       	ret

00002c9c <__ultoa_invert>:
    2c9c:	fa 01       	movw	r30, r20
    2c9e:	aa 27       	eor	r26, r26
    2ca0:	28 30       	cpi	r18, 0x08	; 8
    2ca2:	51 f1       	breq	.+84     	; 0x2cf8 <__ultoa_invert+0x5c>
    2ca4:	20 31       	cpi	r18, 0x10	; 16
    2ca6:	81 f1       	breq	.+96     	; 0x2d08 <__ultoa_invert+0x6c>
    2ca8:	e8 94       	clt
    2caa:	6f 93       	push	r22
    2cac:	6e 7f       	andi	r22, 0xFE	; 254
    2cae:	6e 5f       	subi	r22, 0xFE	; 254
    2cb0:	7f 4f       	sbci	r23, 0xFF	; 255
    2cb2:	8f 4f       	sbci	r24, 0xFF	; 255
    2cb4:	9f 4f       	sbci	r25, 0xFF	; 255
    2cb6:	af 4f       	sbci	r26, 0xFF	; 255
    2cb8:	b1 e0       	ldi	r27, 0x01	; 1
    2cba:	3e d0       	rcall	.+124    	; 0x2d38 <__ultoa_invert+0x9c>
    2cbc:	b4 e0       	ldi	r27, 0x04	; 4
    2cbe:	3c d0       	rcall	.+120    	; 0x2d38 <__ultoa_invert+0x9c>
    2cc0:	67 0f       	add	r22, r23
    2cc2:	78 1f       	adc	r23, r24
    2cc4:	89 1f       	adc	r24, r25
    2cc6:	9a 1f       	adc	r25, r26
    2cc8:	a1 1d       	adc	r26, r1
    2cca:	68 0f       	add	r22, r24
    2ccc:	79 1f       	adc	r23, r25
    2cce:	8a 1f       	adc	r24, r26
    2cd0:	91 1d       	adc	r25, r1
    2cd2:	a1 1d       	adc	r26, r1
    2cd4:	6a 0f       	add	r22, r26
    2cd6:	71 1d       	adc	r23, r1
    2cd8:	81 1d       	adc	r24, r1
    2cda:	91 1d       	adc	r25, r1
    2cdc:	a1 1d       	adc	r26, r1
    2cde:	20 d0       	rcall	.+64     	; 0x2d20 <__ultoa_invert+0x84>
    2ce0:	09 f4       	brne	.+2      	; 0x2ce4 <__ultoa_invert+0x48>
    2ce2:	68 94       	set
    2ce4:	3f 91       	pop	r19
    2ce6:	2a e0       	ldi	r18, 0x0A	; 10
    2ce8:	26 9f       	mul	r18, r22
    2cea:	11 24       	eor	r1, r1
    2cec:	30 19       	sub	r19, r0
    2cee:	30 5d       	subi	r19, 0xD0	; 208
    2cf0:	31 93       	st	Z+, r19
    2cf2:	de f6       	brtc	.-74     	; 0x2caa <__ultoa_invert+0xe>
    2cf4:	cf 01       	movw	r24, r30
    2cf6:	08 95       	ret
    2cf8:	46 2f       	mov	r20, r22
    2cfa:	47 70       	andi	r20, 0x07	; 7
    2cfc:	40 5d       	subi	r20, 0xD0	; 208
    2cfe:	41 93       	st	Z+, r20
    2d00:	b3 e0       	ldi	r27, 0x03	; 3
    2d02:	0f d0       	rcall	.+30     	; 0x2d22 <__ultoa_invert+0x86>
    2d04:	c9 f7       	brne	.-14     	; 0x2cf8 <__ultoa_invert+0x5c>
    2d06:	f6 cf       	rjmp	.-20     	; 0x2cf4 <__ultoa_invert+0x58>
    2d08:	46 2f       	mov	r20, r22
    2d0a:	4f 70       	andi	r20, 0x0F	; 15
    2d0c:	40 5d       	subi	r20, 0xD0	; 208
    2d0e:	4a 33       	cpi	r20, 0x3A	; 58
    2d10:	18 f0       	brcs	.+6      	; 0x2d18 <__ultoa_invert+0x7c>
    2d12:	49 5d       	subi	r20, 0xD9	; 217
    2d14:	31 fd       	sbrc	r19, 1
    2d16:	40 52       	subi	r20, 0x20	; 32
    2d18:	41 93       	st	Z+, r20
    2d1a:	02 d0       	rcall	.+4      	; 0x2d20 <__ultoa_invert+0x84>
    2d1c:	a9 f7       	brne	.-22     	; 0x2d08 <__ultoa_invert+0x6c>
    2d1e:	ea cf       	rjmp	.-44     	; 0x2cf4 <__ultoa_invert+0x58>
    2d20:	b4 e0       	ldi	r27, 0x04	; 4
    2d22:	a6 95       	lsr	r26
    2d24:	97 95       	ror	r25
    2d26:	87 95       	ror	r24
    2d28:	77 95       	ror	r23
    2d2a:	67 95       	ror	r22
    2d2c:	ba 95       	dec	r27
    2d2e:	c9 f7       	brne	.-14     	; 0x2d22 <__ultoa_invert+0x86>
    2d30:	00 97       	sbiw	r24, 0x00	; 0
    2d32:	61 05       	cpc	r22, r1
    2d34:	71 05       	cpc	r23, r1
    2d36:	08 95       	ret
    2d38:	9b 01       	movw	r18, r22
    2d3a:	ac 01       	movw	r20, r24
    2d3c:	0a 2e       	mov	r0, r26
    2d3e:	06 94       	lsr	r0
    2d40:	57 95       	ror	r21
    2d42:	47 95       	ror	r20
    2d44:	37 95       	ror	r19
    2d46:	27 95       	ror	r18
    2d48:	ba 95       	dec	r27
    2d4a:	c9 f7       	brne	.-14     	; 0x2d3e <__ultoa_invert+0xa2>
    2d4c:	62 0f       	add	r22, r18
    2d4e:	73 1f       	adc	r23, r19
    2d50:	84 1f       	adc	r24, r20
    2d52:	95 1f       	adc	r25, r21
    2d54:	a0 1d       	adc	r26, r0
    2d56:	08 95       	ret

00002d58 <__prologue_saves__>:
    2d58:	2f 92       	push	r2
    2d5a:	3f 92       	push	r3
    2d5c:	4f 92       	push	r4
    2d5e:	5f 92       	push	r5
    2d60:	6f 92       	push	r6
    2d62:	7f 92       	push	r7
    2d64:	8f 92       	push	r8
    2d66:	9f 92       	push	r9
    2d68:	af 92       	push	r10
    2d6a:	bf 92       	push	r11
    2d6c:	cf 92       	push	r12
    2d6e:	df 92       	push	r13
    2d70:	ef 92       	push	r14
    2d72:	ff 92       	push	r15
    2d74:	0f 93       	push	r16
    2d76:	1f 93       	push	r17
    2d78:	cf 93       	push	r28
    2d7a:	df 93       	push	r29
    2d7c:	cd b7       	in	r28, 0x3d	; 61
    2d7e:	de b7       	in	r29, 0x3e	; 62
    2d80:	ca 1b       	sub	r28, r26
    2d82:	db 0b       	sbc	r29, r27
    2d84:	0f b6       	in	r0, 0x3f	; 63
    2d86:	f8 94       	cli
    2d88:	de bf       	out	0x3e, r29	; 62
    2d8a:	0f be       	out	0x3f, r0	; 63
    2d8c:	cd bf       	out	0x3d, r28	; 61
    2d8e:	09 94       	ijmp

00002d90 <__epilogue_restores__>:
    2d90:	2a 88       	ldd	r2, Y+18	; 0x12
    2d92:	39 88       	ldd	r3, Y+17	; 0x11
    2d94:	48 88       	ldd	r4, Y+16	; 0x10
    2d96:	5f 84       	ldd	r5, Y+15	; 0x0f
    2d98:	6e 84       	ldd	r6, Y+14	; 0x0e
    2d9a:	7d 84       	ldd	r7, Y+13	; 0x0d
    2d9c:	8c 84       	ldd	r8, Y+12	; 0x0c
    2d9e:	9b 84       	ldd	r9, Y+11	; 0x0b
    2da0:	aa 84       	ldd	r10, Y+10	; 0x0a
    2da2:	b9 84       	ldd	r11, Y+9	; 0x09
    2da4:	c8 84       	ldd	r12, Y+8	; 0x08
    2da6:	df 80       	ldd	r13, Y+7	; 0x07
    2da8:	ee 80       	ldd	r14, Y+6	; 0x06
    2daa:	fd 80       	ldd	r15, Y+5	; 0x05
    2dac:	0c 81       	ldd	r16, Y+4	; 0x04
    2dae:	1b 81       	ldd	r17, Y+3	; 0x03
    2db0:	aa 81       	ldd	r26, Y+2	; 0x02
    2db2:	b9 81       	ldd	r27, Y+1	; 0x01
    2db4:	ce 0f       	add	r28, r30
    2db6:	d1 1d       	adc	r29, r1
    2db8:	0f b6       	in	r0, 0x3f	; 63
    2dba:	f8 94       	cli
    2dbc:	de bf       	out	0x3e, r29	; 62
    2dbe:	0f be       	out	0x3f, r0	; 63
    2dc0:	cd bf       	out	0x3d, r28	; 61
    2dc2:	ed 01       	movw	r28, r26
    2dc4:	08 95       	ret

00002dc6 <_exit>:
    2dc6:	f8 94       	cli

00002dc8 <__stop_program>:
    2dc8:	ff cf       	rjmp	.-2      	; 0x2dc8 <__stop_program>
