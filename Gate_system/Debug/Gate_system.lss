
Gate_system.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00001eb8  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000000ca  00800060  00001eb8  00001f4c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000018  0080012a  0080012a  00002016  2**0
                  ALLOC
  3 .stab         00003a98  00000000  00000000  00002018  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00001515  00000000  00000000  00005ab0  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 cc 03 	jmp	0x798	; 0x798 <__vector_1>
       8:	0c 94 f9 03 	jmp	0x7f2	; 0x7f2 <__vector_2>
       c:	0c 94 26 04 	jmp	0x84c	; 0x84c <__vector_3>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 7b 01 	jmp	0x2f6	; 0x2f6 <__vector_12>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e8 eb       	ldi	r30, 0xB8	; 184
      68:	fe e1       	ldi	r31, 0x1E	; 30
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	aa 32       	cpi	r26, 0x2A	; 42
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	11 e0       	ldi	r17, 0x01	; 1
      78:	aa e2       	ldi	r26, 0x2A	; 42
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a2 34       	cpi	r26, 0x42	; 66
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 99 0c 	call	0x1932	; 0x1932 <main>
      8a:	0c 94 5a 0f 	jmp	0x1eb4	; 0x1eb4 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <TMR_vInit>:
 * Description: Function to set the initialized state and prescaler for each timer (0,1,2)
 * Inputs: none
 * Output: void
 */
void TMR_vInit (void)
{
      92:	df 93       	push	r29
      94:	cf 93       	push	r28
      96:	cd b7       	in	r28, 0x3d	; 61
      98:	de b7       	in	r29, 0x3e	; 62
	}
	else
	{
		if (TMR_u8_TIMER1_MODE == TMR_u8_FASTPWM_ICR1)
				{
					SET_BIT(TMR_TCCR1A,1);
      9a:	af e4       	ldi	r26, 0x4F	; 79
      9c:	b0 e0       	ldi	r27, 0x00	; 0
      9e:	ef e4       	ldi	r30, 0x4F	; 79
      a0:	f0 e0       	ldi	r31, 0x00	; 0
      a2:	80 81       	ld	r24, Z
      a4:	82 60       	ori	r24, 0x02	; 2
      a6:	8c 93       	st	X, r24
					SET_BIT(TMR_TCCR1B,3);
      a8:	ae e4       	ldi	r26, 0x4E	; 78
      aa:	b0 e0       	ldi	r27, 0x00	; 0
      ac:	ee e4       	ldi	r30, 0x4E	; 78
      ae:	f0 e0       	ldi	r31, 0x00	; 0
      b0:	80 81       	ld	r24, Z
      b2:	88 60       	ori	r24, 0x08	; 8
      b4:	8c 93       	st	X, r24
					SET_BIT(TMR_TCCR1B,4);
      b6:	ae e4       	ldi	r26, 0x4E	; 78
      b8:	b0 e0       	ldi	r27, 0x00	; 0
      ba:	ee e4       	ldi	r30, 0x4E	; 78
      bc:	f0 e0       	ldi	r31, 0x00	; 0
      be:	80 81       	ld	r24, Z
      c0:	80 61       	ori	r24, 0x10	; 16
      c2:	8c 93       	st	X, r24

					TMR_ICR1 = TMR_u16_ICR1_VAL;
      c4:	e6 e4       	ldi	r30, 0x46	; 70
      c6:	f0 e0       	ldi	r31, 0x00	; 0
      c8:	8f e1       	ldi	r24, 0x1F	; 31
      ca:	9e e4       	ldi	r25, 0x4E	; 78
      cc:	91 83       	std	Z+1, r25	; 0x01
      ce:	80 83       	st	Z, r24
					SET_BIT(TMR_TCCR1A,6);
					SET_BIT(TMR_TCCR1A,7);
				}
				if (TMR_u8_TIMER1B_COPT_STATE == TMR_u8_ENABLE)
				{
					SET_BIT(TMR_TCCR1A,4);
      d0:	af e4       	ldi	r26, 0x4F	; 79
      d2:	b0 e0       	ldi	r27, 0x00	; 0
      d4:	ef e4       	ldi	r30, 0x4F	; 79
      d6:	f0 e0       	ldi	r31, 0x00	; 0
      d8:	80 81       	ld	r24, Z
      da:	80 61       	ori	r24, 0x10	; 16
      dc:	8c 93       	st	X, r24
					SET_BIT(TMR_TCCR1A,5);
      de:	af e4       	ldi	r26, 0x4F	; 79
      e0:	b0 e0       	ldi	r27, 0x00	; 0
      e2:	ef e4       	ldi	r30, 0x4F	; 79
      e4:	f0 e0       	ldi	r31, 0x00	; 0
      e6:	80 81       	ld	r24, Z
      e8:	80 62       	ori	r24, 0x20	; 32
      ea:	8c 93       	st	X, r24
#if TMR_TIMER1_PRESCALER == TMR_NO_PRESCALER

				SET_BIT(TMR_TCCR1B,0);
#elif TMR_TIMER1_PRESCALER == TMR_FREQ_OVER_8

				SET_BIT(TMR_TCCR1B,1);
      ec:	ae e4       	ldi	r26, 0x4E	; 78
      ee:	b0 e0       	ldi	r27, 0x00	; 0
      f0:	ee e4       	ldi	r30, 0x4E	; 78
      f2:	f0 e0       	ldi	r31, 0x00	; 0
      f4:	80 81       	ld	r24, Z
      f6:	82 60       	ori	r24, 0x02	; 2
      f8:	8c 93       	st	X, r24
				SET_BIT(TMR_TCCR1B,2);
#else
				SET_BIT(TMR_TCCR1B,0);
#endif

		TMR_u8Timer1CtrlRegValue = TMR_TCCR1B;
      fa:	ee e4       	ldi	r30, 0x4E	; 78
      fc:	f0 e0       	ldi	r31, 0x00	; 0
      fe:	80 81       	ld	r24, Z
     100:	80 93 2a 01 	sts	0x012A, r24

	}
	return;
}
     104:	cf 91       	pop	r28
     106:	df 91       	pop	r29
     108:	08 95       	ret

0000010a <TMR_u8SetPWM>:
 * (used mainly in servo interfacing and load which needs TMR_u8_FASTPWM_ICR1 timer mode)
 * Inputs: The desired timer compare value
 * Output: void
 */
void TMR_u8SetPWM (uint16_t Copy_u16ReqCompValue)
{
     10a:	df 93       	push	r29
     10c:	cf 93       	push	r28
     10e:	00 d0       	rcall	.+0      	; 0x110 <TMR_u8SetPWM+0x6>
     110:	cd b7       	in	r28, 0x3d	; 61
     112:	de b7       	in	r29, 0x3e	; 62
     114:	9a 83       	std	Y+2, r25	; 0x02
     116:	89 83       	std	Y+1, r24	; 0x01
	if (TMR_u8_TIMER1B_COPT_STATE == TMR_u8_ENABLE)
	{
		   if (TMR_u8_TIMER1_COPT_MODE == TMR_u8_CLEAR_OCX)
			   TMR_OCRB1 = Copy_u16ReqCompValue;
		   else if (TMR_u8_TIMER1_COPT_MODE == TMR_u8_SET_OCX)
			   TMR_OCRB1 = TMR_u16_ICR1_VAL-Copy_u16ReqCompValue;
     118:	e8 e4       	ldi	r30, 0x48	; 72
     11a:	f0 e0       	ldi	r31, 0x00	; 0
     11c:	2f e1       	ldi	r18, 0x1F	; 31
     11e:	3e e4       	ldi	r19, 0x4E	; 78
     120:	89 81       	ldd	r24, Y+1	; 0x01
     122:	9a 81       	ldd	r25, Y+2	; 0x02
     124:	a9 01       	movw	r20, r18
     126:	48 1b       	sub	r20, r24
     128:	59 0b       	sbc	r21, r25
     12a:	ca 01       	movw	r24, r20
     12c:	91 83       	std	Z+1, r25	; 0x01
     12e:	80 83       	st	Z, r24
	}
	return;
}
     130:	0f 90       	pop	r0
     132:	0f 90       	pop	r0
     134:	cf 91       	pop	r28
     136:	df 91       	pop	r29
     138:	08 95       	ret

0000013a <SPI_vInit>:
 * Description: Function to initialize the SPI peripheral
 * Inputs: none
 * Output: void
 */
void SPI_vInit (void)
{
     13a:	df 93       	push	r29
     13c:	cf 93       	push	r28
     13e:	cd b7       	in	r28, 0x3d	; 61
     140:	de b7       	in	r29, 0x3e	; 62
	if (SPI_u8_CLKPHASE == SPI_u8_SETUP)
	{
		SET_BIT(SPI_SPCR,CPHA);
	}

	SPI_SPCR |= SPI_u8_SPRBITS;
     142:	ad e2       	ldi	r26, 0x2D	; 45
     144:	b0 e0       	ldi	r27, 0x00	; 0
     146:	ed e2       	ldi	r30, 0x2D	; 45
     148:	f0 e0       	ldi	r31, 0x00	; 0
     14a:	80 81       	ld	r24, Z
     14c:	81 60       	ori	r24, 0x01	; 1
     14e:	8c 93       	st	X, r24

	  //if Double SPI Speed is selected
	if (SPI_u8_CLKRATE > 3)
		SET_BIT(SPI_SPSR,SPI2X);

	SET_BIT(SPI_SPCR,SPE);
     150:	ad e2       	ldi	r26, 0x2D	; 45
     152:	b0 e0       	ldi	r27, 0x00	; 0
     154:	ed e2       	ldi	r30, 0x2D	; 45
     156:	f0 e0       	ldi	r31, 0x00	; 0
     158:	80 81       	ld	r24, Z
     15a:	80 64       	ori	r24, 0x40	; 64
     15c:	8c 93       	st	X, r24
	return;
}
     15e:	cf 91       	pop	r28
     160:	df 91       	pop	r29
     162:	08 95       	ret

00000164 <SPI_u8ReceiveByte_Synch>:
/*
 * Description: Synchronous Function to send and receive a byte using polling mechanism
 * Inputs: the byte needed to be sent and a pointer to received byte
 * Output: the Error state of the function
 */
uint8_t SPI_u8ReceiveByte_Synch(uint8_t *Copy_pu8RecByte) {
     164:	df 93       	push	r29
     166:	cf 93       	push	r28
     168:	00 d0       	rcall	.+0      	; 0x16a <SPI_u8ReceiveByte_Synch+0x6>
     16a:	00 d0       	rcall	.+0      	; 0x16c <SPI_u8ReceiveByte_Synch+0x8>
     16c:	00 d0       	rcall	.+0      	; 0x16e <SPI_u8ReceiveByte_Synch+0xa>
     16e:	cd b7       	in	r28, 0x3d	; 61
     170:	de b7       	in	r29, 0x3e	; 62
     172:	9d 83       	std	Y+5, r25	; 0x05
     174:	8c 83       	std	Y+4, r24	; 0x04
    /* Local Variable holding the error state */
    uint8_t Local_u8Error = ERROR_NOK;
     176:	81 e0       	ldi	r24, 0x01	; 1
     178:	8b 83       	std	Y+3, r24	; 0x03
    uint16_t Local_u16Timeout = 0;
     17a:	1a 82       	std	Y+2, r1	; 0x02
     17c:	19 82       	std	Y+1, r1	; 0x01

    /* Check if the receive buffer pointer is valid */
    if (Copy_pu8RecByte != NULL) {
     17e:	8c 81       	ldd	r24, Y+4	; 0x04
     180:	9d 81       	ldd	r25, Y+5	; 0x05
     182:	00 97       	sbiw	r24, 0x00	; 0
     184:	09 f1       	breq	.+66     	; 0x1c8 <SPI_u8ReceiveByte_Synch+0x64>
     186:	05 c0       	rjmp	.+10     	; 0x192 <SPI_u8ReceiveByte_Synch+0x2e>
        /* Wait for reception to complete */
        while (GET_BIT(SPI_SPSR, SPIF) == 0 && Local_u16Timeout < SPI_u16_FAULT_TIMEOUT) {
            Local_u16Timeout++;
     188:	89 81       	ldd	r24, Y+1	; 0x01
     18a:	9a 81       	ldd	r25, Y+2	; 0x02
     18c:	01 96       	adiw	r24, 0x01	; 1
     18e:	9a 83       	std	Y+2, r25	; 0x02
     190:	89 83       	std	Y+1, r24	; 0x01
    uint16_t Local_u16Timeout = 0;

    /* Check if the receive buffer pointer is valid */
    if (Copy_pu8RecByte != NULL) {
        /* Wait for reception to complete */
        while (GET_BIT(SPI_SPSR, SPIF) == 0 && Local_u16Timeout < SPI_u16_FAULT_TIMEOUT) {
     192:	ee e2       	ldi	r30, 0x2E	; 46
     194:	f0 e0       	ldi	r31, 0x00	; 0
     196:	80 81       	ld	r24, Z
     198:	88 23       	and	r24, r24
     19a:	34 f0       	brlt	.+12     	; 0x1a8 <SPI_u8ReceiveByte_Synch+0x44>
     19c:	89 81       	ldd	r24, Y+1	; 0x01
     19e:	9a 81       	ldd	r25, Y+2	; 0x02
     1a0:	23 ec       	ldi	r18, 0xC3	; 195
     1a2:	80 35       	cpi	r24, 0x50	; 80
     1a4:	92 07       	cpc	r25, r18
     1a6:	80 f3       	brcs	.-32     	; 0x188 <SPI_u8ReceiveByte_Synch+0x24>
            Local_u16Timeout++;
        }

        /* Check if the timeout occurred */
        if (Local_u16Timeout == SPI_u16_FAULT_TIMEOUT) {
     1a8:	89 81       	ldd	r24, Y+1	; 0x01
     1aa:	9a 81       	ldd	r25, Y+2	; 0x02
     1ac:	23 ec       	ldi	r18, 0xC3	; 195
     1ae:	80 35       	cpi	r24, 0x50	; 80
     1b0:	92 07       	cpc	r25, r18
     1b2:	19 f4       	brne	.+6      	; 0x1ba <SPI_u8ReceiveByte_Synch+0x56>
            return ERROR_NOK;
     1b4:	81 e0       	ldi	r24, 0x01	; 1
     1b6:	8e 83       	std	Y+6, r24	; 0x06
     1b8:	09 c0       	rjmp	.+18     	; 0x1cc <SPI_u8ReceiveByte_Synch+0x68>
        }

        /* Read the received data from SPDR */
        *Copy_pu8RecByte = SPI_SPDR;
     1ba:	ef e2       	ldi	r30, 0x2F	; 47
     1bc:	f0 e0       	ldi	r31, 0x00	; 0
     1be:	80 81       	ld	r24, Z
     1c0:	ec 81       	ldd	r30, Y+4	; 0x04
     1c2:	fd 81       	ldd	r31, Y+5	; 0x05
     1c4:	80 83       	st	Z, r24

        /* Set the error state to OK as the reception completed successfully */
        Local_u8Error = ERROR_OK;
     1c6:	1b 82       	std	Y+3, r1	; 0x03
    }

    /* Function return */
    return Local_u8Error;
     1c8:	2b 81       	ldd	r18, Y+3	; 0x03
     1ca:	2e 83       	std	Y+6, r18	; 0x06
     1cc:	8e 81       	ldd	r24, Y+6	; 0x06
}
     1ce:	26 96       	adiw	r28, 0x06	; 6
     1d0:	0f b6       	in	r0, 0x3f	; 63
     1d2:	f8 94       	cli
     1d4:	de bf       	out	0x3e, r29	; 62
     1d6:	0f be       	out	0x3f, r0	; 63
     1d8:	cd bf       	out	0x3d, r28	; 61
     1da:	cf 91       	pop	r28
     1dc:	df 91       	pop	r29
     1de:	08 95       	ret

000001e0 <SPI_u8SendByte_Synch>:

uint8_t SPI_u8SendByte_Synch(uint8_t Copy_u8SentByte) {
     1e0:	df 93       	push	r29
     1e2:	cf 93       	push	r28
     1e4:	00 d0       	rcall	.+0      	; 0x1e6 <SPI_u8SendByte_Synch+0x6>
     1e6:	00 d0       	rcall	.+0      	; 0x1e8 <SPI_u8SendByte_Synch+0x8>
     1e8:	0f 92       	push	r0
     1ea:	cd b7       	in	r28, 0x3d	; 61
     1ec:	de b7       	in	r29, 0x3e	; 62
     1ee:	8c 83       	std	Y+4, r24	; 0x04
    /* Local Variable holding the error state */
    uint8_t Local_u8Error = ERROR_NOK;
     1f0:	81 e0       	ldi	r24, 0x01	; 1
     1f2:	8b 83       	std	Y+3, r24	; 0x03
    uint16_t Local_u16Timeout = 0;
     1f4:	1a 82       	std	Y+2, r1	; 0x02
     1f6:	19 82       	std	Y+1, r1	; 0x01

    /* Start the transmission by writing the data to SPDR */
    SPI_SPDR = Copy_u8SentByte;
     1f8:	ef e2       	ldi	r30, 0x2F	; 47
     1fa:	f0 e0       	ldi	r31, 0x00	; 0
     1fc:	8c 81       	ldd	r24, Y+4	; 0x04
     1fe:	80 83       	st	Z, r24
     200:	05 c0       	rjmp	.+10     	; 0x20c <SPI_u8SendByte_Synch+0x2c>

    /* Wait for the transmission to complete */
    while (GET_BIT(SPI_SPSR, SPIF) == 0 && Local_u16Timeout < SPI_u16_FAULT_TIMEOUT) {
        Local_u16Timeout++;
     202:	89 81       	ldd	r24, Y+1	; 0x01
     204:	9a 81       	ldd	r25, Y+2	; 0x02
     206:	01 96       	adiw	r24, 0x01	; 1
     208:	9a 83       	std	Y+2, r25	; 0x02
     20a:	89 83       	std	Y+1, r24	; 0x01

    /* Start the transmission by writing the data to SPDR */
    SPI_SPDR = Copy_u8SentByte;

    /* Wait for the transmission to complete */
    while (GET_BIT(SPI_SPSR, SPIF) == 0 && Local_u16Timeout < SPI_u16_FAULT_TIMEOUT) {
     20c:	ee e2       	ldi	r30, 0x2E	; 46
     20e:	f0 e0       	ldi	r31, 0x00	; 0
     210:	80 81       	ld	r24, Z
     212:	88 23       	and	r24, r24
     214:	34 f0       	brlt	.+12     	; 0x222 <SPI_u8SendByte_Synch+0x42>
     216:	89 81       	ldd	r24, Y+1	; 0x01
     218:	9a 81       	ldd	r25, Y+2	; 0x02
     21a:	23 ec       	ldi	r18, 0xC3	; 195
     21c:	80 35       	cpi	r24, 0x50	; 80
     21e:	92 07       	cpc	r25, r18
     220:	80 f3       	brcs	.-32     	; 0x202 <SPI_u8SendByte_Synch+0x22>
        Local_u16Timeout++;
    }

    /* Check if the timeout occurred */
    if (Local_u16Timeout == SPI_u16_FAULT_TIMEOUT) {
     222:	89 81       	ldd	r24, Y+1	; 0x01
     224:	9a 81       	ldd	r25, Y+2	; 0x02
     226:	23 ec       	ldi	r18, 0xC3	; 195
     228:	80 35       	cpi	r24, 0x50	; 80
     22a:	92 07       	cpc	r25, r18
     22c:	19 f4       	brne	.+6      	; 0x234 <SPI_u8SendByte_Synch+0x54>
        return ERROR_NOK;
     22e:	81 e0       	ldi	r24, 0x01	; 1
     230:	8d 83       	std	Y+5, r24	; 0x05
     232:	03 c0       	rjmp	.+6      	; 0x23a <SPI_u8SendByte_Synch+0x5a>
    }

    /* Set the error state to OK as the transmission completed successfully */
    Local_u8Error = ERROR_OK;
     234:	1b 82       	std	Y+3, r1	; 0x03

    /* Function return */
    return Local_u8Error;
     236:	2b 81       	ldd	r18, Y+3	; 0x03
     238:	2d 83       	std	Y+5, r18	; 0x05
     23a:	8d 81       	ldd	r24, Y+5	; 0x05
}
     23c:	0f 90       	pop	r0
     23e:	0f 90       	pop	r0
     240:	0f 90       	pop	r0
     242:	0f 90       	pop	r0
     244:	0f 90       	pop	r0
     246:	cf 91       	pop	r28
     248:	df 91       	pop	r29
     24a:	08 95       	ret

0000024c <SPI_u8SendReceiveBuffer_Asynch>:
 * 		   (3) the expected size of the transmitted and received buffer
 * 		   (4) the callback function to notify the upper layer that the complete message is successfully sent
 * Output: the Error state of the function
 */
uint8_t SPI_u8SendReceiveBuffer_Asynch (uint8_t *Copy_pu8SentBuffer,uint8_t *Copy_pu8RecBuffer,uint8_t Copy_u8NoOfBytes,void (*CallBack)(void))
{
     24c:	df 93       	push	r29
     24e:	cf 93       	push	r28
     250:	cd b7       	in	r28, 0x3d	; 61
     252:	de b7       	in	r29, 0x3e	; 62
     254:	28 97       	sbiw	r28, 0x08	; 8
     256:	0f b6       	in	r0, 0x3f	; 63
     258:	f8 94       	cli
     25a:	de bf       	out	0x3e, r29	; 62
     25c:	0f be       	out	0x3f, r0	; 63
     25e:	cd bf       	out	0x3d, r28	; 61
     260:	9b 83       	std	Y+3, r25	; 0x03
     262:	8a 83       	std	Y+2, r24	; 0x02
     264:	7d 83       	std	Y+5, r23	; 0x05
     266:	6c 83       	std	Y+4, r22	; 0x04
     268:	4e 83       	std	Y+6, r20	; 0x06
     26a:	38 87       	std	Y+8, r19	; 0x08
     26c:	2f 83       	std	Y+7, r18	; 0x07
	/*Local Variable holding the error state*/
	uint8_t Local_u8Error = ERROR_NOK;
     26e:	81 e0       	ldi	r24, 0x01	; 1
     270:	89 83       	std	Y+1, r24	; 0x01

	if (Copy_pu8SentBuffer != NULL && Copy_pu8RecBuffer != NULL && CallBack != NULL)
     272:	8a 81       	ldd	r24, Y+2	; 0x02
     274:	9b 81       	ldd	r25, Y+3	; 0x03
     276:	00 97       	sbiw	r24, 0x00	; 0
     278:	a1 f1       	breq	.+104    	; 0x2e2 <SPI_u8SendReceiveBuffer_Asynch+0x96>
     27a:	8c 81       	ldd	r24, Y+4	; 0x04
     27c:	9d 81       	ldd	r25, Y+5	; 0x05
     27e:	00 97       	sbiw	r24, 0x00	; 0
     280:	81 f1       	breq	.+96     	; 0x2e2 <SPI_u8SendReceiveBuffer_Asynch+0x96>
     282:	8f 81       	ldd	r24, Y+7	; 0x07
     284:	98 85       	ldd	r25, Y+8	; 0x08
     286:	00 97       	sbiw	r24, 0x00	; 0
     288:	61 f1       	breq	.+88     	; 0x2e2 <SPI_u8SendReceiveBuffer_Asynch+0x96>
	{
		Local_u8Error = ERROR_OK;
     28a:	19 82       	std	Y+1, r1	; 0x01
		SPI_pu8TransmittedString = Copy_pu8SentBuffer;
     28c:	8a 81       	ldd	r24, Y+2	; 0x02
     28e:	9b 81       	ldd	r25, Y+3	; 0x03
     290:	90 93 2e 01 	sts	0x012E, r25
     294:	80 93 2d 01 	sts	0x012D, r24
		SPI_pu8ReceivedString = Copy_pu8RecBuffer;
     298:	8c 81       	ldd	r24, Y+4	; 0x04
     29a:	9d 81       	ldd	r25, Y+5	; 0x05
     29c:	90 93 30 01 	sts	0x0130, r25
     2a0:	80 93 2f 01 	sts	0x012F, r24
		PtrASychCallback = CallBack;
     2a4:	8f 81       	ldd	r24, Y+7	; 0x07
     2a6:	98 85       	ldd	r25, Y+8	; 0x08
     2a8:	90 93 2c 01 	sts	0x012C, r25
     2ac:	80 93 2b 01 	sts	0x012B, r24
		SPI_u8NoOfBytes = Copy_u8NoOfBytes;
     2b0:	8e 81       	ldd	r24, Y+6	; 0x06
     2b2:	80 93 31 01 	sts	0x0131, r24
		SPI_SPDR = SPI_pu8TransmittedString[SPI_u8Index];
     2b6:	af e2       	ldi	r26, 0x2F	; 47
     2b8:	b0 e0       	ldi	r27, 0x00	; 0
     2ba:	20 91 2d 01 	lds	r18, 0x012D
     2be:	30 91 2e 01 	lds	r19, 0x012E
     2c2:	80 91 32 01 	lds	r24, 0x0132
     2c6:	88 2f       	mov	r24, r24
     2c8:	90 e0       	ldi	r25, 0x00	; 0
     2ca:	f9 01       	movw	r30, r18
     2cc:	e8 0f       	add	r30, r24
     2ce:	f9 1f       	adc	r31, r25
     2d0:	80 81       	ld	r24, Z
     2d2:	8c 93       	st	X, r24
		SET_BIT(SPI_SPCR,SPIE);
     2d4:	ad e2       	ldi	r26, 0x2D	; 45
     2d6:	b0 e0       	ldi	r27, 0x00	; 0
     2d8:	ed e2       	ldi	r30, 0x2D	; 45
     2da:	f0 e0       	ldi	r31, 0x00	; 0
     2dc:	80 81       	ld	r24, Z
     2de:	80 68       	ori	r24, 0x80	; 128
     2e0:	8c 93       	st	X, r24
	}
	/*Function return*/
	return Local_u8Error;
     2e2:	89 81       	ldd	r24, Y+1	; 0x01
}
     2e4:	28 96       	adiw	r28, 0x08	; 8
     2e6:	0f b6       	in	r0, 0x3f	; 63
     2e8:	f8 94       	cli
     2ea:	de bf       	out	0x3e, r29	; 62
     2ec:	0f be       	out	0x3f, r0	; 63
     2ee:	cd bf       	out	0x3d, r28	; 61
     2f0:	cf 91       	pop	r28
     2f2:	df 91       	pop	r29
     2f4:	08 95       	ret

000002f6 <__vector_12>:

/* The ISR of Serial Transfer Complete */
void __vector_12 (void)
{
     2f6:	1f 92       	push	r1
     2f8:	0f 92       	push	r0
     2fa:	0f b6       	in	r0, 0x3f	; 63
     2fc:	0f 92       	push	r0
     2fe:	11 24       	eor	r1, r1
     300:	2f 93       	push	r18
     302:	3f 93       	push	r19
     304:	4f 93       	push	r20
     306:	5f 93       	push	r21
     308:	6f 93       	push	r22
     30a:	7f 93       	push	r23
     30c:	8f 93       	push	r24
     30e:	9f 93       	push	r25
     310:	af 93       	push	r26
     312:	bf 93       	push	r27
     314:	ef 93       	push	r30
     316:	ff 93       	push	r31
     318:	df 93       	push	r29
     31a:	cf 93       	push	r28
     31c:	cd b7       	in	r28, 0x3d	; 61
     31e:	de b7       	in	r29, 0x3e	; 62
	SPI_pu8ReceivedString[SPI_u8Index] = SPI_SPDR;
     320:	20 91 2f 01 	lds	r18, 0x012F
     324:	30 91 30 01 	lds	r19, 0x0130
     328:	80 91 32 01 	lds	r24, 0x0132
     32c:	88 2f       	mov	r24, r24
     32e:	90 e0       	ldi	r25, 0x00	; 0
     330:	d9 01       	movw	r26, r18
     332:	a8 0f       	add	r26, r24
     334:	b9 1f       	adc	r27, r25
     336:	ef e2       	ldi	r30, 0x2F	; 47
     338:	f0 e0       	ldi	r31, 0x00	; 0
     33a:	80 81       	ld	r24, Z
     33c:	8c 93       	st	X, r24
	if (SPI_u8Index == SPI_u8NoOfBytes)
     33e:	90 91 32 01 	lds	r25, 0x0132
     342:	80 91 31 01 	lds	r24, 0x0131
     346:	98 17       	cp	r25, r24
     348:	89 f4       	brne	.+34     	; 0x36c <__vector_12+0x76>
	{
		SPI_u8Index = 0;
     34a:	10 92 32 01 	sts	0x0132, r1
		SPI_u8NoOfBytes = 0;
     34e:	10 92 31 01 	sts	0x0131, r1
		CLR_BIT(SPI_SPCR,SPIE);
     352:	ad e2       	ldi	r26, 0x2D	; 45
     354:	b0 e0       	ldi	r27, 0x00	; 0
     356:	ed e2       	ldi	r30, 0x2D	; 45
     358:	f0 e0       	ldi	r31, 0x00	; 0
     35a:	80 81       	ld	r24, Z
     35c:	8f 77       	andi	r24, 0x7F	; 127
     35e:	8c 93       	st	X, r24
		PtrASychCallback();
     360:	e0 91 2b 01 	lds	r30, 0x012B
     364:	f0 91 2c 01 	lds	r31, 0x012C
     368:	09 95       	icall
     36a:	14 c0       	rjmp	.+40     	; 0x394 <__vector_12+0x9e>
	}
	else
	{
		SPI_u8Index++;
     36c:	80 91 32 01 	lds	r24, 0x0132
     370:	8f 5f       	subi	r24, 0xFF	; 255
     372:	80 93 32 01 	sts	0x0132, r24
		SPI_SPDR = SPI_pu8TransmittedString[SPI_u8Index];
     376:	af e2       	ldi	r26, 0x2F	; 47
     378:	b0 e0       	ldi	r27, 0x00	; 0
     37a:	20 91 2d 01 	lds	r18, 0x012D
     37e:	30 91 2e 01 	lds	r19, 0x012E
     382:	80 91 32 01 	lds	r24, 0x0132
     386:	88 2f       	mov	r24, r24
     388:	90 e0       	ldi	r25, 0x00	; 0
     38a:	f9 01       	movw	r30, r18
     38c:	e8 0f       	add	r30, r24
     38e:	f9 1f       	adc	r31, r25
     390:	80 81       	ld	r24, Z
     392:	8c 93       	st	X, r24
	}
	return;
}
     394:	cf 91       	pop	r28
     396:	df 91       	pop	r29
     398:	ff 91       	pop	r31
     39a:	ef 91       	pop	r30
     39c:	bf 91       	pop	r27
     39e:	af 91       	pop	r26
     3a0:	9f 91       	pop	r25
     3a2:	8f 91       	pop	r24
     3a4:	7f 91       	pop	r23
     3a6:	6f 91       	pop	r22
     3a8:	5f 91       	pop	r21
     3aa:	4f 91       	pop	r20
     3ac:	3f 91       	pop	r19
     3ae:	2f 91       	pop	r18
     3b0:	0f 90       	pop	r0
     3b2:	0f be       	out	0x3f, r0	; 63
     3b4:	0f 90       	pop	r0
     3b6:	1f 90       	pop	r1
     3b8:	18 95       	reti

000003ba <GIE_voidEnable>:

#include "GIE_int.h"
#include "GIE_reg.h"


void GIE_voidEnable(void){
     3ba:	df 93       	push	r29
     3bc:	cf 93       	push	r28
     3be:	cd b7       	in	r28, 0x3d	; 61
     3c0:	de b7       	in	r29, 0x3e	; 62

	SET_BIT(SREG , I);
     3c2:	af e5       	ldi	r26, 0x5F	; 95
     3c4:	b0 e0       	ldi	r27, 0x00	; 0
     3c6:	ef e5       	ldi	r30, 0x5F	; 95
     3c8:	f0 e0       	ldi	r31, 0x00	; 0
     3ca:	80 81       	ld	r24, Z
     3cc:	80 68       	ori	r24, 0x80	; 128
     3ce:	8c 93       	st	X, r24

}
     3d0:	cf 91       	pop	r28
     3d2:	df 91       	pop	r29
     3d4:	08 95       	ret

000003d6 <GIE_voidDisable>:

void GIE_voidDisable(void){
     3d6:	df 93       	push	r29
     3d8:	cf 93       	push	r28
     3da:	cd b7       	in	r28, 0x3d	; 61
     3dc:	de b7       	in	r29, 0x3e	; 62

	CLR_BIT(SREG , I);
     3de:	af e5       	ldi	r26, 0x5F	; 95
     3e0:	b0 e0       	ldi	r27, 0x00	; 0
     3e2:	ef e5       	ldi	r30, 0x5F	; 95
     3e4:	f0 e0       	ldi	r31, 0x00	; 0
     3e6:	80 81       	ld	r24, Z
     3e8:	8f 77       	andi	r24, 0x7F	; 127
     3ea:	8c 93       	st	X, r24

}
     3ec:	cf 91       	pop	r28
     3ee:	df 91       	pop	r29
     3f0:	08 95       	ret

000003f2 <EXTI0_VoidInit>:
void (*INT1_PFun)(void);
void (*INT2_PFun)(void);

/**************************************************************************/
/**************************************************************************/
void EXTI0_VoidInit(void){
     3f2:	df 93       	push	r29
     3f4:	cf 93       	push	r28
     3f6:	cd b7       	in	r28, 0x3d	; 61
     3f8:	de b7       	in	r29, 0x3e	; 62
	case ANY_CHANGE:
		CLR_BIT(MCUCR, ISC01);
		SET_BIT(MCUCR, ISC00);
		break;
	case FAILING_EDGE:
			SET_BIT(MCUCR, ISC01);
     3fa:	a5 e5       	ldi	r26, 0x55	; 85
     3fc:	b0 e0       	ldi	r27, 0x00	; 0
     3fe:	e5 e5       	ldi	r30, 0x55	; 85
     400:	f0 e0       	ldi	r31, 0x00	; 0
     402:	80 81       	ld	r24, Z
     404:	82 60       	ori	r24, 0x02	; 2
     406:	8c 93       	st	X, r24
			CLR_BIT(MCUCR, ISC00);
     408:	a5 e5       	ldi	r26, 0x55	; 85
     40a:	b0 e0       	ldi	r27, 0x00	; 0
     40c:	e5 e5       	ldi	r30, 0x55	; 85
     40e:	f0 e0       	ldi	r31, 0x00	; 0
     410:	80 81       	ld	r24, Z
     412:	8e 7f       	andi	r24, 0xFE	; 254
     414:	8c 93       	st	X, r24
			SET_BIT(MCUCR, ISC01);
			SET_BIT(MCUCR, ISC00);
			break;
	}
	//PIE 	Enable interrupt 0
	SET_BIT(GICR, INT0);
     416:	ab e5       	ldi	r26, 0x5B	; 91
     418:	b0 e0       	ldi	r27, 0x00	; 0
     41a:	eb e5       	ldi	r30, 0x5B	; 91
     41c:	f0 e0       	ldi	r31, 0x00	; 0
     41e:	80 81       	ld	r24, Z
     420:	80 64       	ori	r24, 0x40	; 64
     422:	8c 93       	st	X, r24

}
     424:	cf 91       	pop	r28
     426:	df 91       	pop	r29
     428:	08 95       	ret

0000042a <EXTI1_VoidInit>:
/**************************************************************************/
void EXTI1_VoidInit(void){
     42a:	df 93       	push	r29
     42c:	cf 93       	push	r28
     42e:	cd b7       	in	r28, 0x3d	; 61
     430:	de b7       	in	r29, 0x3e	; 62
	case ANY_CHANGE:
		CLR_BIT(MCUCR, ISC11);
		SET_BIT(MCUCR, ISC10);
		break;
	case FAILING_EDGE:
			SET_BIT(MCUCR, ISC11);
     432:	a5 e5       	ldi	r26, 0x55	; 85
     434:	b0 e0       	ldi	r27, 0x00	; 0
     436:	e5 e5       	ldi	r30, 0x55	; 85
     438:	f0 e0       	ldi	r31, 0x00	; 0
     43a:	80 81       	ld	r24, Z
     43c:	88 60       	ori	r24, 0x08	; 8
     43e:	8c 93       	st	X, r24
			CLR_BIT(MCUCR, ISC10);
     440:	a5 e5       	ldi	r26, 0x55	; 85
     442:	b0 e0       	ldi	r27, 0x00	; 0
     444:	e5 e5       	ldi	r30, 0x55	; 85
     446:	f0 e0       	ldi	r31, 0x00	; 0
     448:	80 81       	ld	r24, Z
     44a:	8b 7f       	andi	r24, 0xFB	; 251
     44c:	8c 93       	st	X, r24
			SET_BIT(MCUCR, ISC11);
			SET_BIT(MCUCR, ISC10);
			break;
	}
	//PIE 	Enable interrupt 1
	SET_BIT(GICR, INT1);
     44e:	ab e5       	ldi	r26, 0x5B	; 91
     450:	b0 e0       	ldi	r27, 0x00	; 0
     452:	eb e5       	ldi	r30, 0x5B	; 91
     454:	f0 e0       	ldi	r31, 0x00	; 0
     456:	80 81       	ld	r24, Z
     458:	80 68       	ori	r24, 0x80	; 128
     45a:	8c 93       	st	X, r24

}
     45c:	cf 91       	pop	r28
     45e:	df 91       	pop	r29
     460:	08 95       	ret

00000462 <EXTI2_VoidInit>:
/**************************************************************************/
void EXTI2_VoidInit(void){
     462:	df 93       	push	r29
     464:	cf 93       	push	r28
     466:	cd b7       	in	r28, 0x3d	; 61
     468:	de b7       	in	r29, 0x3e	; 62

	switch (INT2_SENSE)
	{
	case FAILING_EDGE:
			CLR_BIT(MCUCSR, ISC2);
     46a:	a4 e5       	ldi	r26, 0x54	; 84
     46c:	b0 e0       	ldi	r27, 0x00	; 0
     46e:	e4 e5       	ldi	r30, 0x54	; 84
     470:	f0 e0       	ldi	r31, 0x00	; 0
     472:	80 81       	ld	r24, Z
     474:	8f 7b       	andi	r24, 0xBF	; 191
     476:	8c 93       	st	X, r24
			SET_BIT(MCUCSR, ISC2);
			break;

	}
	//PIE 	Enable interrupt 2
	SET_BIT(GICR, INT2);
     478:	ab e5       	ldi	r26, 0x5B	; 91
     47a:	b0 e0       	ldi	r27, 0x00	; 0
     47c:	eb e5       	ldi	r30, 0x5B	; 91
     47e:	f0 e0       	ldi	r31, 0x00	; 0
     480:	80 81       	ld	r24, Z
     482:	80 62       	ori	r24, 0x20	; 32
     484:	8c 93       	st	X, r24

}
     486:	cf 91       	pop	r28
     488:	df 91       	pop	r29
     48a:	08 95       	ret

0000048c <EXTI0_voidSetSenseControl>:
/**************************************************************************/
/**************************************************************************/
//Change Sense control of interrupt 0 during program
void EXTI0_voidSetSenseControl(uint8_t copy_U8SenseControl){
     48c:	df 93       	push	r29
     48e:	cf 93       	push	r28
     490:	00 d0       	rcall	.+0      	; 0x492 <EXTI0_voidSetSenseControl+0x6>
     492:	0f 92       	push	r0
     494:	cd b7       	in	r28, 0x3d	; 61
     496:	de b7       	in	r29, 0x3e	; 62
     498:	89 83       	std	Y+1, r24	; 0x01
	switch (copy_U8SenseControl)
     49a:	89 81       	ldd	r24, Y+1	; 0x01
     49c:	28 2f       	mov	r18, r24
     49e:	30 e0       	ldi	r19, 0x00	; 0
     4a0:	3b 83       	std	Y+3, r19	; 0x03
     4a2:	2a 83       	std	Y+2, r18	; 0x02
     4a4:	8a 81       	ldd	r24, Y+2	; 0x02
     4a6:	9b 81       	ldd	r25, Y+3	; 0x03
     4a8:	82 30       	cpi	r24, 0x02	; 2
     4aa:	91 05       	cpc	r25, r1
     4ac:	29 f1       	breq	.+74     	; 0x4f8 <EXTI0_voidSetSenseControl+0x6c>
     4ae:	2a 81       	ldd	r18, Y+2	; 0x02
     4b0:	3b 81       	ldd	r19, Y+3	; 0x03
     4b2:	23 30       	cpi	r18, 0x03	; 3
     4b4:	31 05       	cpc	r19, r1
     4b6:	34 f4       	brge	.+12     	; 0x4c4 <EXTI0_voidSetSenseControl+0x38>
     4b8:	8a 81       	ldd	r24, Y+2	; 0x02
     4ba:	9b 81       	ldd	r25, Y+3	; 0x03
     4bc:	81 30       	cpi	r24, 0x01	; 1
     4be:	91 05       	cpc	r25, r1
     4c0:	61 f0       	breq	.+24     	; 0x4da <EXTI0_voidSetSenseControl+0x4e>
     4c2:	46 c0       	rjmp	.+140    	; 0x550 <EXTI0_voidSetSenseControl+0xc4>
     4c4:	2a 81       	ldd	r18, Y+2	; 0x02
     4c6:	3b 81       	ldd	r19, Y+3	; 0x03
     4c8:	23 30       	cpi	r18, 0x03	; 3
     4ca:	31 05       	cpc	r19, r1
     4cc:	21 f1       	breq	.+72     	; 0x516 <EXTI0_voidSetSenseControl+0x8a>
     4ce:	8a 81       	ldd	r24, Y+2	; 0x02
     4d0:	9b 81       	ldd	r25, Y+3	; 0x03
     4d2:	84 30       	cpi	r24, 0x04	; 4
     4d4:	91 05       	cpc	r25, r1
     4d6:	71 f1       	breq	.+92     	; 0x534 <EXTI0_voidSetSenseControl+0xa8>
     4d8:	3b c0       	rjmp	.+118    	; 0x550 <EXTI0_voidSetSenseControl+0xc4>
		{
		case LOW_LEVEL:
			CLR_BIT(MCUCR, ISC01);
     4da:	a5 e5       	ldi	r26, 0x55	; 85
     4dc:	b0 e0       	ldi	r27, 0x00	; 0
     4de:	e5 e5       	ldi	r30, 0x55	; 85
     4e0:	f0 e0       	ldi	r31, 0x00	; 0
     4e2:	80 81       	ld	r24, Z
     4e4:	8d 7f       	andi	r24, 0xFD	; 253
     4e6:	8c 93       	st	X, r24
			CLR_BIT(MCUCR, ISC00);
     4e8:	a5 e5       	ldi	r26, 0x55	; 85
     4ea:	b0 e0       	ldi	r27, 0x00	; 0
     4ec:	e5 e5       	ldi	r30, 0x55	; 85
     4ee:	f0 e0       	ldi	r31, 0x00	; 0
     4f0:	80 81       	ld	r24, Z
     4f2:	8e 7f       	andi	r24, 0xFE	; 254
     4f4:	8c 93       	st	X, r24
     4f6:	2c c0       	rjmp	.+88     	; 0x550 <EXTI0_voidSetSenseControl+0xc4>
			break;

		case ANY_CHANGE:
			CLR_BIT(MCUCR, ISC01);
     4f8:	a5 e5       	ldi	r26, 0x55	; 85
     4fa:	b0 e0       	ldi	r27, 0x00	; 0
     4fc:	e5 e5       	ldi	r30, 0x55	; 85
     4fe:	f0 e0       	ldi	r31, 0x00	; 0
     500:	80 81       	ld	r24, Z
     502:	8d 7f       	andi	r24, 0xFD	; 253
     504:	8c 93       	st	X, r24
			SET_BIT(MCUCR, ISC00);
     506:	a5 e5       	ldi	r26, 0x55	; 85
     508:	b0 e0       	ldi	r27, 0x00	; 0
     50a:	e5 e5       	ldi	r30, 0x55	; 85
     50c:	f0 e0       	ldi	r31, 0x00	; 0
     50e:	80 81       	ld	r24, Z
     510:	81 60       	ori	r24, 0x01	; 1
     512:	8c 93       	st	X, r24
     514:	1d c0       	rjmp	.+58     	; 0x550 <EXTI0_voidSetSenseControl+0xc4>
			break;
		case FAILING_EDGE:
				SET_BIT(MCUCR, ISC01);
     516:	a5 e5       	ldi	r26, 0x55	; 85
     518:	b0 e0       	ldi	r27, 0x00	; 0
     51a:	e5 e5       	ldi	r30, 0x55	; 85
     51c:	f0 e0       	ldi	r31, 0x00	; 0
     51e:	80 81       	ld	r24, Z
     520:	82 60       	ori	r24, 0x02	; 2
     522:	8c 93       	st	X, r24
				CLR_BIT(MCUCR, ISC00);
     524:	a5 e5       	ldi	r26, 0x55	; 85
     526:	b0 e0       	ldi	r27, 0x00	; 0
     528:	e5 e5       	ldi	r30, 0x55	; 85
     52a:	f0 e0       	ldi	r31, 0x00	; 0
     52c:	80 81       	ld	r24, Z
     52e:	8e 7f       	andi	r24, 0xFE	; 254
     530:	8c 93       	st	X, r24
     532:	0e c0       	rjmp	.+28     	; 0x550 <EXTI0_voidSetSenseControl+0xc4>
				break;
		case RISING_EDGE:
				SET_BIT(MCUCR, ISC01);
     534:	a5 e5       	ldi	r26, 0x55	; 85
     536:	b0 e0       	ldi	r27, 0x00	; 0
     538:	e5 e5       	ldi	r30, 0x55	; 85
     53a:	f0 e0       	ldi	r31, 0x00	; 0
     53c:	80 81       	ld	r24, Z
     53e:	82 60       	ori	r24, 0x02	; 2
     540:	8c 93       	st	X, r24
				SET_BIT(MCUCR, ISC00);
     542:	a5 e5       	ldi	r26, 0x55	; 85
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	e5 e5       	ldi	r30, 0x55	; 85
     548:	f0 e0       	ldi	r31, 0x00	; 0
     54a:	80 81       	ld	r24, Z
     54c:	81 60       	ori	r24, 0x01	; 1
     54e:	8c 93       	st	X, r24
				break;
		}

}
     550:	0f 90       	pop	r0
     552:	0f 90       	pop	r0
     554:	0f 90       	pop	r0
     556:	cf 91       	pop	r28
     558:	df 91       	pop	r29
     55a:	08 95       	ret

0000055c <EXTI1_voidSetSenseControl>:
//Change Sense control of interrupt 1 during program
void EXTI1_voidSetSenseControl(uint8_t copy_U8SenseControl){
     55c:	df 93       	push	r29
     55e:	cf 93       	push	r28
     560:	00 d0       	rcall	.+0      	; 0x562 <EXTI1_voidSetSenseControl+0x6>
     562:	0f 92       	push	r0
     564:	cd b7       	in	r28, 0x3d	; 61
     566:	de b7       	in	r29, 0x3e	; 62
     568:	89 83       	std	Y+1, r24	; 0x01
	switch (copy_U8SenseControl)
     56a:	89 81       	ldd	r24, Y+1	; 0x01
     56c:	28 2f       	mov	r18, r24
     56e:	30 e0       	ldi	r19, 0x00	; 0
     570:	3b 83       	std	Y+3, r19	; 0x03
     572:	2a 83       	std	Y+2, r18	; 0x02
     574:	8a 81       	ldd	r24, Y+2	; 0x02
     576:	9b 81       	ldd	r25, Y+3	; 0x03
     578:	82 30       	cpi	r24, 0x02	; 2
     57a:	91 05       	cpc	r25, r1
     57c:	29 f1       	breq	.+74     	; 0x5c8 <EXTI1_voidSetSenseControl+0x6c>
     57e:	2a 81       	ldd	r18, Y+2	; 0x02
     580:	3b 81       	ldd	r19, Y+3	; 0x03
     582:	23 30       	cpi	r18, 0x03	; 3
     584:	31 05       	cpc	r19, r1
     586:	34 f4       	brge	.+12     	; 0x594 <EXTI1_voidSetSenseControl+0x38>
     588:	8a 81       	ldd	r24, Y+2	; 0x02
     58a:	9b 81       	ldd	r25, Y+3	; 0x03
     58c:	81 30       	cpi	r24, 0x01	; 1
     58e:	91 05       	cpc	r25, r1
     590:	61 f0       	breq	.+24     	; 0x5aa <EXTI1_voidSetSenseControl+0x4e>
     592:	46 c0       	rjmp	.+140    	; 0x620 <EXTI1_voidSetSenseControl+0xc4>
     594:	2a 81       	ldd	r18, Y+2	; 0x02
     596:	3b 81       	ldd	r19, Y+3	; 0x03
     598:	23 30       	cpi	r18, 0x03	; 3
     59a:	31 05       	cpc	r19, r1
     59c:	21 f1       	breq	.+72     	; 0x5e6 <EXTI1_voidSetSenseControl+0x8a>
     59e:	8a 81       	ldd	r24, Y+2	; 0x02
     5a0:	9b 81       	ldd	r25, Y+3	; 0x03
     5a2:	84 30       	cpi	r24, 0x04	; 4
     5a4:	91 05       	cpc	r25, r1
     5a6:	71 f1       	breq	.+92     	; 0x604 <EXTI1_voidSetSenseControl+0xa8>
     5a8:	3b c0       	rjmp	.+118    	; 0x620 <EXTI1_voidSetSenseControl+0xc4>
		{
		case LOW_LEVEL:
			CLR_BIT(MCUCR, ISC11);
     5aa:	a5 e5       	ldi	r26, 0x55	; 85
     5ac:	b0 e0       	ldi	r27, 0x00	; 0
     5ae:	e5 e5       	ldi	r30, 0x55	; 85
     5b0:	f0 e0       	ldi	r31, 0x00	; 0
     5b2:	80 81       	ld	r24, Z
     5b4:	87 7f       	andi	r24, 0xF7	; 247
     5b6:	8c 93       	st	X, r24
			CLR_BIT(MCUCR, ISC10);
     5b8:	a5 e5       	ldi	r26, 0x55	; 85
     5ba:	b0 e0       	ldi	r27, 0x00	; 0
     5bc:	e5 e5       	ldi	r30, 0x55	; 85
     5be:	f0 e0       	ldi	r31, 0x00	; 0
     5c0:	80 81       	ld	r24, Z
     5c2:	8b 7f       	andi	r24, 0xFB	; 251
     5c4:	8c 93       	st	X, r24
     5c6:	2c c0       	rjmp	.+88     	; 0x620 <EXTI1_voidSetSenseControl+0xc4>
			break;

		case ANY_CHANGE:
			CLR_BIT(MCUCR, ISC11);
     5c8:	a5 e5       	ldi	r26, 0x55	; 85
     5ca:	b0 e0       	ldi	r27, 0x00	; 0
     5cc:	e5 e5       	ldi	r30, 0x55	; 85
     5ce:	f0 e0       	ldi	r31, 0x00	; 0
     5d0:	80 81       	ld	r24, Z
     5d2:	87 7f       	andi	r24, 0xF7	; 247
     5d4:	8c 93       	st	X, r24
			SET_BIT(MCUCR, ISC10);
     5d6:	a5 e5       	ldi	r26, 0x55	; 85
     5d8:	b0 e0       	ldi	r27, 0x00	; 0
     5da:	e5 e5       	ldi	r30, 0x55	; 85
     5dc:	f0 e0       	ldi	r31, 0x00	; 0
     5de:	80 81       	ld	r24, Z
     5e0:	84 60       	ori	r24, 0x04	; 4
     5e2:	8c 93       	st	X, r24
     5e4:	1d c0       	rjmp	.+58     	; 0x620 <EXTI1_voidSetSenseControl+0xc4>
			break;
		case FAILING_EDGE:
				SET_BIT(MCUCR, ISC11);
     5e6:	a5 e5       	ldi	r26, 0x55	; 85
     5e8:	b0 e0       	ldi	r27, 0x00	; 0
     5ea:	e5 e5       	ldi	r30, 0x55	; 85
     5ec:	f0 e0       	ldi	r31, 0x00	; 0
     5ee:	80 81       	ld	r24, Z
     5f0:	88 60       	ori	r24, 0x08	; 8
     5f2:	8c 93       	st	X, r24
				CLR_BIT(MCUCR, ISC10);
     5f4:	a5 e5       	ldi	r26, 0x55	; 85
     5f6:	b0 e0       	ldi	r27, 0x00	; 0
     5f8:	e5 e5       	ldi	r30, 0x55	; 85
     5fa:	f0 e0       	ldi	r31, 0x00	; 0
     5fc:	80 81       	ld	r24, Z
     5fe:	8b 7f       	andi	r24, 0xFB	; 251
     600:	8c 93       	st	X, r24
     602:	0e c0       	rjmp	.+28     	; 0x620 <EXTI1_voidSetSenseControl+0xc4>
				break;
		case RISING_EDGE:
				SET_BIT(MCUCR, ISC11);
     604:	a5 e5       	ldi	r26, 0x55	; 85
     606:	b0 e0       	ldi	r27, 0x00	; 0
     608:	e5 e5       	ldi	r30, 0x55	; 85
     60a:	f0 e0       	ldi	r31, 0x00	; 0
     60c:	80 81       	ld	r24, Z
     60e:	88 60       	ori	r24, 0x08	; 8
     610:	8c 93       	st	X, r24
				SET_BIT(MCUCR, ISC10);
     612:	a5 e5       	ldi	r26, 0x55	; 85
     614:	b0 e0       	ldi	r27, 0x00	; 0
     616:	e5 e5       	ldi	r30, 0x55	; 85
     618:	f0 e0       	ldi	r31, 0x00	; 0
     61a:	80 81       	ld	r24, Z
     61c:	84 60       	ori	r24, 0x04	; 4
     61e:	8c 93       	st	X, r24
				break;
		}

}
     620:	0f 90       	pop	r0
     622:	0f 90       	pop	r0
     624:	0f 90       	pop	r0
     626:	cf 91       	pop	r28
     628:	df 91       	pop	r29
     62a:	08 95       	ret

0000062c <EXTI2_voidSetSenseControl>:
//Change Sense control of interrupt 2 during program
void EXTI2_voidSetSenseControl(uint8_t copy_U8SenseControl){
     62c:	df 93       	push	r29
     62e:	cf 93       	push	r28
     630:	00 d0       	rcall	.+0      	; 0x632 <EXTI2_voidSetSenseControl+0x6>
     632:	0f 92       	push	r0
     634:	cd b7       	in	r28, 0x3d	; 61
     636:	de b7       	in	r29, 0x3e	; 62
     638:	89 83       	std	Y+1, r24	; 0x01
	switch (copy_U8SenseControl)
     63a:	89 81       	ldd	r24, Y+1	; 0x01
     63c:	28 2f       	mov	r18, r24
     63e:	30 e0       	ldi	r19, 0x00	; 0
     640:	3b 83       	std	Y+3, r19	; 0x03
     642:	2a 83       	std	Y+2, r18	; 0x02
     644:	8a 81       	ldd	r24, Y+2	; 0x02
     646:	9b 81       	ldd	r25, Y+3	; 0x03
     648:	83 30       	cpi	r24, 0x03	; 3
     64a:	91 05       	cpc	r25, r1
     64c:	31 f0       	breq	.+12     	; 0x65a <EXTI2_voidSetSenseControl+0x2e>
     64e:	2a 81       	ldd	r18, Y+2	; 0x02
     650:	3b 81       	ldd	r19, Y+3	; 0x03
     652:	24 30       	cpi	r18, 0x04	; 4
     654:	31 05       	cpc	r19, r1
     656:	49 f0       	breq	.+18     	; 0x66a <EXTI2_voidSetSenseControl+0x3e>
     658:	0f c0       	rjmp	.+30     	; 0x678 <EXTI2_voidSetSenseControl+0x4c>
		{

		case FAILING_EDGE:
				CLR_BIT(MCUCSR, ISC2);
     65a:	a4 e5       	ldi	r26, 0x54	; 84
     65c:	b0 e0       	ldi	r27, 0x00	; 0
     65e:	e4 e5       	ldi	r30, 0x54	; 84
     660:	f0 e0       	ldi	r31, 0x00	; 0
     662:	80 81       	ld	r24, Z
     664:	8f 7b       	andi	r24, 0xBF	; 191
     666:	8c 93       	st	X, r24
     668:	07 c0       	rjmp	.+14     	; 0x678 <EXTI2_voidSetSenseControl+0x4c>
				break;
		case RISING_EDGE:
				SET_BIT(MCUCSR, ISC2);
     66a:	a4 e5       	ldi	r26, 0x54	; 84
     66c:	b0 e0       	ldi	r27, 0x00	; 0
     66e:	e4 e5       	ldi	r30, 0x54	; 84
     670:	f0 e0       	ldi	r31, 0x00	; 0
     672:	80 81       	ld	r24, Z
     674:	80 64       	ori	r24, 0x40	; 64
     676:	8c 93       	st	X, r24
				break;
		}

}
     678:	0f 90       	pop	r0
     67a:	0f 90       	pop	r0
     67c:	0f 90       	pop	r0
     67e:	cf 91       	pop	r28
     680:	df 91       	pop	r29
     682:	08 95       	ret

00000684 <EXTI0_voidEnable>:

/**************************************************************************/
/**************************************************************************/
//Enable or disable interrupt 0
void EXTI0_voidEnable(void){
     684:	df 93       	push	r29
     686:	cf 93       	push	r28
     688:	cd b7       	in	r28, 0x3d	; 61
     68a:	de b7       	in	r29, 0x3e	; 62

	SET_BIT(GICR, INT0);
     68c:	ab e5       	ldi	r26, 0x5B	; 91
     68e:	b0 e0       	ldi	r27, 0x00	; 0
     690:	eb e5       	ldi	r30, 0x5B	; 91
     692:	f0 e0       	ldi	r31, 0x00	; 0
     694:	80 81       	ld	r24, Z
     696:	80 64       	ori	r24, 0x40	; 64
     698:	8c 93       	st	X, r24
}
     69a:	cf 91       	pop	r28
     69c:	df 91       	pop	r29
     69e:	08 95       	ret

000006a0 <EXTI0_voidDisable>:
void EXTI0_voidDisable(void){
     6a0:	df 93       	push	r29
     6a2:	cf 93       	push	r28
     6a4:	cd b7       	in	r28, 0x3d	; 61
     6a6:	de b7       	in	r29, 0x3e	; 62

	CLR_BIT(GICR, INT0);
     6a8:	ab e5       	ldi	r26, 0x5B	; 91
     6aa:	b0 e0       	ldi	r27, 0x00	; 0
     6ac:	eb e5       	ldi	r30, 0x5B	; 91
     6ae:	f0 e0       	ldi	r31, 0x00	; 0
     6b0:	80 81       	ld	r24, Z
     6b2:	8f 7b       	andi	r24, 0xBF	; 191
     6b4:	8c 93       	st	X, r24
}
     6b6:	cf 91       	pop	r28
     6b8:	df 91       	pop	r29
     6ba:	08 95       	ret

000006bc <EXTI1_voidEnable>:
/**************************************************************************/
//Enable or disable interrupt 1
void EXTI1_voidEnable(void){
     6bc:	df 93       	push	r29
     6be:	cf 93       	push	r28
     6c0:	cd b7       	in	r28, 0x3d	; 61
     6c2:	de b7       	in	r29, 0x3e	; 62

	SET_BIT(GICR, INT1);
     6c4:	ab e5       	ldi	r26, 0x5B	; 91
     6c6:	b0 e0       	ldi	r27, 0x00	; 0
     6c8:	eb e5       	ldi	r30, 0x5B	; 91
     6ca:	f0 e0       	ldi	r31, 0x00	; 0
     6cc:	80 81       	ld	r24, Z
     6ce:	80 68       	ori	r24, 0x80	; 128
     6d0:	8c 93       	st	X, r24
}
     6d2:	cf 91       	pop	r28
     6d4:	df 91       	pop	r29
     6d6:	08 95       	ret

000006d8 <EXTI1_voidDisable>:
void EXTI1_voidDisable(void){
     6d8:	df 93       	push	r29
     6da:	cf 93       	push	r28
     6dc:	cd b7       	in	r28, 0x3d	; 61
     6de:	de b7       	in	r29, 0x3e	; 62

	CLR_BIT(GICR, INT1);
     6e0:	ab e5       	ldi	r26, 0x5B	; 91
     6e2:	b0 e0       	ldi	r27, 0x00	; 0
     6e4:	eb e5       	ldi	r30, 0x5B	; 91
     6e6:	f0 e0       	ldi	r31, 0x00	; 0
     6e8:	80 81       	ld	r24, Z
     6ea:	8f 77       	andi	r24, 0x7F	; 127
     6ec:	8c 93       	st	X, r24
}
     6ee:	cf 91       	pop	r28
     6f0:	df 91       	pop	r29
     6f2:	08 95       	ret

000006f4 <EXTI2_voidEnable>:
/**************************************************************************/
//Enable or disable interrupt 2
void EXTI2_voidEnable(void){
     6f4:	df 93       	push	r29
     6f6:	cf 93       	push	r28
     6f8:	cd b7       	in	r28, 0x3d	; 61
     6fa:	de b7       	in	r29, 0x3e	; 62

	SET_BIT(GICR, INT2);
     6fc:	ab e5       	ldi	r26, 0x5B	; 91
     6fe:	b0 e0       	ldi	r27, 0x00	; 0
     700:	eb e5       	ldi	r30, 0x5B	; 91
     702:	f0 e0       	ldi	r31, 0x00	; 0
     704:	80 81       	ld	r24, Z
     706:	80 62       	ori	r24, 0x20	; 32
     708:	8c 93       	st	X, r24
}
     70a:	cf 91       	pop	r28
     70c:	df 91       	pop	r29
     70e:	08 95       	ret

00000710 <EXTI2_voidDisable>:
void EXTI2_voidDisable(void){
     710:	df 93       	push	r29
     712:	cf 93       	push	r28
     714:	cd b7       	in	r28, 0x3d	; 61
     716:	de b7       	in	r29, 0x3e	; 62

	CLR_BIT(GICR, INT2);
     718:	ab e5       	ldi	r26, 0x5B	; 91
     71a:	b0 e0       	ldi	r27, 0x00	; 0
     71c:	eb e5       	ldi	r30, 0x5B	; 91
     71e:	f0 e0       	ldi	r31, 0x00	; 0
     720:	80 81       	ld	r24, Z
     722:	8f 7d       	andi	r24, 0xDF	; 223
     724:	8c 93       	st	X, r24
}
     726:	cf 91       	pop	r28
     728:	df 91       	pop	r29
     72a:	08 95       	ret

0000072c <EXTI0_voidSetCallBack>:

/**************************************************************************/
/**************************************************************************/
void EXTI0_voidSetCallBack(void (*copy_PFunc)(void)){
     72c:	df 93       	push	r29
     72e:	cf 93       	push	r28
     730:	00 d0       	rcall	.+0      	; 0x732 <EXTI0_voidSetCallBack+0x6>
     732:	cd b7       	in	r28, 0x3d	; 61
     734:	de b7       	in	r29, 0x3e	; 62
     736:	9a 83       	std	Y+2, r25	; 0x02
     738:	89 83       	std	Y+1, r24	; 0x01

	INT0_PFun = copy_PFunc;
     73a:	89 81       	ldd	r24, Y+1	; 0x01
     73c:	9a 81       	ldd	r25, Y+2	; 0x02
     73e:	90 93 34 01 	sts	0x0134, r25
     742:	80 93 33 01 	sts	0x0133, r24

}
     746:	0f 90       	pop	r0
     748:	0f 90       	pop	r0
     74a:	cf 91       	pop	r28
     74c:	df 91       	pop	r29
     74e:	08 95       	ret

00000750 <EXTI1_voidSetCallBack>:
/**************************************************************************/
void EXTI1_voidSetCallBack(void (*copy_PFunc)(void)){
     750:	df 93       	push	r29
     752:	cf 93       	push	r28
     754:	00 d0       	rcall	.+0      	; 0x756 <EXTI1_voidSetCallBack+0x6>
     756:	cd b7       	in	r28, 0x3d	; 61
     758:	de b7       	in	r29, 0x3e	; 62
     75a:	9a 83       	std	Y+2, r25	; 0x02
     75c:	89 83       	std	Y+1, r24	; 0x01

	INT1_PFun = copy_PFunc;
     75e:	89 81       	ldd	r24, Y+1	; 0x01
     760:	9a 81       	ldd	r25, Y+2	; 0x02
     762:	90 93 38 01 	sts	0x0138, r25
     766:	80 93 37 01 	sts	0x0137, r24

}
     76a:	0f 90       	pop	r0
     76c:	0f 90       	pop	r0
     76e:	cf 91       	pop	r28
     770:	df 91       	pop	r29
     772:	08 95       	ret

00000774 <EXTI2_voidSetCallBack>:
/**************************************************************************/
void EXTI2_voidSetCallBack(void (*copy_PFunc)(void)){
     774:	df 93       	push	r29
     776:	cf 93       	push	r28
     778:	00 d0       	rcall	.+0      	; 0x77a <EXTI2_voidSetCallBack+0x6>
     77a:	cd b7       	in	r28, 0x3d	; 61
     77c:	de b7       	in	r29, 0x3e	; 62
     77e:	9a 83       	std	Y+2, r25	; 0x02
     780:	89 83       	std	Y+1, r24	; 0x01

	INT2_PFun = copy_PFunc;
     782:	89 81       	ldd	r24, Y+1	; 0x01
     784:	9a 81       	ldd	r25, Y+2	; 0x02
     786:	90 93 36 01 	sts	0x0136, r25
     78a:	80 93 35 01 	sts	0x0135, r24

}
     78e:	0f 90       	pop	r0
     790:	0f 90       	pop	r0
     792:	cf 91       	pop	r28
     794:	df 91       	pop	r29
     796:	08 95       	ret

00000798 <__vector_1>:


/**************************************************************************/
/**************************************************************************/
//if condition not NULL
void __vector_1(void){
     798:	1f 92       	push	r1
     79a:	0f 92       	push	r0
     79c:	0f b6       	in	r0, 0x3f	; 63
     79e:	0f 92       	push	r0
     7a0:	11 24       	eor	r1, r1
     7a2:	2f 93       	push	r18
     7a4:	3f 93       	push	r19
     7a6:	4f 93       	push	r20
     7a8:	5f 93       	push	r21
     7aa:	6f 93       	push	r22
     7ac:	7f 93       	push	r23
     7ae:	8f 93       	push	r24
     7b0:	9f 93       	push	r25
     7b2:	af 93       	push	r26
     7b4:	bf 93       	push	r27
     7b6:	ef 93       	push	r30
     7b8:	ff 93       	push	r31
     7ba:	df 93       	push	r29
     7bc:	cf 93       	push	r28
     7be:	cd b7       	in	r28, 0x3d	; 61
     7c0:	de b7       	in	r29, 0x3e	; 62

	INT0_PFun();
     7c2:	e0 91 33 01 	lds	r30, 0x0133
     7c6:	f0 91 34 01 	lds	r31, 0x0134
     7ca:	09 95       	icall
}
     7cc:	cf 91       	pop	r28
     7ce:	df 91       	pop	r29
     7d0:	ff 91       	pop	r31
     7d2:	ef 91       	pop	r30
     7d4:	bf 91       	pop	r27
     7d6:	af 91       	pop	r26
     7d8:	9f 91       	pop	r25
     7da:	8f 91       	pop	r24
     7dc:	7f 91       	pop	r23
     7de:	6f 91       	pop	r22
     7e0:	5f 91       	pop	r21
     7e2:	4f 91       	pop	r20
     7e4:	3f 91       	pop	r19
     7e6:	2f 91       	pop	r18
     7e8:	0f 90       	pop	r0
     7ea:	0f be       	out	0x3f, r0	; 63
     7ec:	0f 90       	pop	r0
     7ee:	1f 90       	pop	r1
     7f0:	18 95       	reti

000007f2 <__vector_2>:
/**************************************************************************/
void __vector_2(void){
     7f2:	1f 92       	push	r1
     7f4:	0f 92       	push	r0
     7f6:	0f b6       	in	r0, 0x3f	; 63
     7f8:	0f 92       	push	r0
     7fa:	11 24       	eor	r1, r1
     7fc:	2f 93       	push	r18
     7fe:	3f 93       	push	r19
     800:	4f 93       	push	r20
     802:	5f 93       	push	r21
     804:	6f 93       	push	r22
     806:	7f 93       	push	r23
     808:	8f 93       	push	r24
     80a:	9f 93       	push	r25
     80c:	af 93       	push	r26
     80e:	bf 93       	push	r27
     810:	ef 93       	push	r30
     812:	ff 93       	push	r31
     814:	df 93       	push	r29
     816:	cf 93       	push	r28
     818:	cd b7       	in	r28, 0x3d	; 61
     81a:	de b7       	in	r29, 0x3e	; 62

	INT1_PFun();
     81c:	e0 91 37 01 	lds	r30, 0x0137
     820:	f0 91 38 01 	lds	r31, 0x0138
     824:	09 95       	icall
}
     826:	cf 91       	pop	r28
     828:	df 91       	pop	r29
     82a:	ff 91       	pop	r31
     82c:	ef 91       	pop	r30
     82e:	bf 91       	pop	r27
     830:	af 91       	pop	r26
     832:	9f 91       	pop	r25
     834:	8f 91       	pop	r24
     836:	7f 91       	pop	r23
     838:	6f 91       	pop	r22
     83a:	5f 91       	pop	r21
     83c:	4f 91       	pop	r20
     83e:	3f 91       	pop	r19
     840:	2f 91       	pop	r18
     842:	0f 90       	pop	r0
     844:	0f be       	out	0x3f, r0	; 63
     846:	0f 90       	pop	r0
     848:	1f 90       	pop	r1
     84a:	18 95       	reti

0000084c <__vector_3>:
/**************************************************************************/
void __vector_3(void){
     84c:	1f 92       	push	r1
     84e:	0f 92       	push	r0
     850:	0f b6       	in	r0, 0x3f	; 63
     852:	0f 92       	push	r0
     854:	11 24       	eor	r1, r1
     856:	2f 93       	push	r18
     858:	3f 93       	push	r19
     85a:	4f 93       	push	r20
     85c:	5f 93       	push	r21
     85e:	6f 93       	push	r22
     860:	7f 93       	push	r23
     862:	8f 93       	push	r24
     864:	9f 93       	push	r25
     866:	af 93       	push	r26
     868:	bf 93       	push	r27
     86a:	ef 93       	push	r30
     86c:	ff 93       	push	r31
     86e:	df 93       	push	r29
     870:	cf 93       	push	r28
     872:	cd b7       	in	r28, 0x3d	; 61
     874:	de b7       	in	r29, 0x3e	; 62

	INT2_PFun();
     876:	e0 91 35 01 	lds	r30, 0x0135
     87a:	f0 91 36 01 	lds	r31, 0x0136
     87e:	09 95       	icall
}
     880:	cf 91       	pop	r28
     882:	df 91       	pop	r29
     884:	ff 91       	pop	r31
     886:	ef 91       	pop	r30
     888:	bf 91       	pop	r27
     88a:	af 91       	pop	r26
     88c:	9f 91       	pop	r25
     88e:	8f 91       	pop	r24
     890:	7f 91       	pop	r23
     892:	6f 91       	pop	r22
     894:	5f 91       	pop	r21
     896:	4f 91       	pop	r20
     898:	3f 91       	pop	r19
     89a:	2f 91       	pop	r18
     89c:	0f 90       	pop	r0
     89e:	0f be       	out	0x3f, r0	; 63
     8a0:	0f 90       	pop	r0
     8a2:	1f 90       	pop	r1
     8a4:	18 95       	reti

000008a6 <DIO_U8SetPinDirection>:

#include "DIO_int.h"
#include "DIO_reg.h"

/*Function for the pin direction*/
uint8_t DIO_U8SetPinDirection(uint8_t Copy_U8Port , uint8_t Copy_U8Pin, uint8_t Copy_U8Direction ){
     8a6:	df 93       	push	r29
     8a8:	cf 93       	push	r28
     8aa:	cd b7       	in	r28, 0x3d	; 61
     8ac:	de b7       	in	r29, 0x3e	; 62
     8ae:	2a 97       	sbiw	r28, 0x0a	; 10
     8b0:	0f b6       	in	r0, 0x3f	; 63
     8b2:	f8 94       	cli
     8b4:	de bf       	out	0x3e, r29	; 62
     8b6:	0f be       	out	0x3f, r0	; 63
     8b8:	cd bf       	out	0x3d, r28	; 61
     8ba:	8a 83       	std	Y+2, r24	; 0x02
     8bc:	6b 83       	std	Y+3, r22	; 0x03
     8be:	4c 83       	std	Y+4, r20	; 0x04
	uint8_t err_status = E_OK;
     8c0:	19 82       	std	Y+1, r1	; 0x01

	switch (Copy_U8Direction)
     8c2:	8c 81       	ldd	r24, Y+4	; 0x04
     8c4:	28 2f       	mov	r18, r24
     8c6:	30 e0       	ldi	r19, 0x00	; 0
     8c8:	3a 87       	std	Y+10, r19	; 0x0a
     8ca:	29 87       	std	Y+9, r18	; 0x09
     8cc:	89 85       	ldd	r24, Y+9	; 0x09
     8ce:	9a 85       	ldd	r25, Y+10	; 0x0a
     8d0:	00 97       	sbiw	r24, 0x00	; 0
     8d2:	39 f0       	breq	.+14     	; 0x8e2 <DIO_U8SetPinDirection+0x3c>
     8d4:	29 85       	ldd	r18, Y+9	; 0x09
     8d6:	3a 85       	ldd	r19, Y+10	; 0x0a
     8d8:	21 30       	cpi	r18, 0x01	; 1
     8da:	31 05       	cpc	r19, r1
     8dc:	09 f4       	brne	.+2      	; 0x8e0 <DIO_U8SetPinDirection+0x3a>
     8de:	78 c0       	rjmp	.+240    	; 0x9d0 <DIO_U8SetPinDirection+0x12a>
     8e0:	e9 c0       	rjmp	.+466    	; 0xab4 <DIO_U8SetPinDirection+0x20e>
	{
		case DIO_INPUT:

			switch (Copy_U8Port)
     8e2:	8a 81       	ldd	r24, Y+2	; 0x02
     8e4:	28 2f       	mov	r18, r24
     8e6:	30 e0       	ldi	r19, 0x00	; 0
     8e8:	38 87       	std	Y+8, r19	; 0x08
     8ea:	2f 83       	std	Y+7, r18	; 0x07
     8ec:	8f 81       	ldd	r24, Y+7	; 0x07
     8ee:	98 85       	ldd	r25, Y+8	; 0x08
     8f0:	81 30       	cpi	r24, 0x01	; 1
     8f2:	91 05       	cpc	r25, r1
     8f4:	59 f1       	breq	.+86     	; 0x94c <DIO_U8SetPinDirection+0xa6>
     8f6:	2f 81       	ldd	r18, Y+7	; 0x07
     8f8:	38 85       	ldd	r19, Y+8	; 0x08
     8fa:	22 30       	cpi	r18, 0x02	; 2
     8fc:	31 05       	cpc	r19, r1
     8fe:	2c f4       	brge	.+10     	; 0x90a <DIO_U8SetPinDirection+0x64>
     900:	8f 81       	ldd	r24, Y+7	; 0x07
     902:	98 85       	ldd	r25, Y+8	; 0x08
     904:	00 97       	sbiw	r24, 0x00	; 0
     906:	69 f0       	breq	.+26     	; 0x922 <DIO_U8SetPinDirection+0x7c>
     908:	60 c0       	rjmp	.+192    	; 0x9ca <DIO_U8SetPinDirection+0x124>
     90a:	2f 81       	ldd	r18, Y+7	; 0x07
     90c:	38 85       	ldd	r19, Y+8	; 0x08
     90e:	22 30       	cpi	r18, 0x02	; 2
     910:	31 05       	cpc	r19, r1
     912:	89 f1       	breq	.+98     	; 0x976 <DIO_U8SetPinDirection+0xd0>
     914:	8f 81       	ldd	r24, Y+7	; 0x07
     916:	98 85       	ldd	r25, Y+8	; 0x08
     918:	83 30       	cpi	r24, 0x03	; 3
     91a:	91 05       	cpc	r25, r1
     91c:	09 f4       	brne	.+2      	; 0x920 <DIO_U8SetPinDirection+0x7a>
     91e:	40 c0       	rjmp	.+128    	; 0x9a0 <DIO_U8SetPinDirection+0xfa>
     920:	54 c0       	rjmp	.+168    	; 0x9ca <DIO_U8SetPinDirection+0x124>
			{
				case DIO_PORTA:
					CLR_BIT (DDRA, Copy_U8Pin);
     922:	aa e3       	ldi	r26, 0x3A	; 58
     924:	b0 e0       	ldi	r27, 0x00	; 0
     926:	ea e3       	ldi	r30, 0x3A	; 58
     928:	f0 e0       	ldi	r31, 0x00	; 0
     92a:	80 81       	ld	r24, Z
     92c:	48 2f       	mov	r20, r24
     92e:	8b 81       	ldd	r24, Y+3	; 0x03
     930:	28 2f       	mov	r18, r24
     932:	30 e0       	ldi	r19, 0x00	; 0
     934:	81 e0       	ldi	r24, 0x01	; 1
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	02 2e       	mov	r0, r18
     93a:	02 c0       	rjmp	.+4      	; 0x940 <DIO_U8SetPinDirection+0x9a>
     93c:	88 0f       	add	r24, r24
     93e:	99 1f       	adc	r25, r25
     940:	0a 94       	dec	r0
     942:	e2 f7       	brpl	.-8      	; 0x93c <DIO_U8SetPinDirection+0x96>
     944:	80 95       	com	r24
     946:	84 23       	and	r24, r20
     948:	8c 93       	st	X, r24
     94a:	b6 c0       	rjmp	.+364    	; 0xab8 <DIO_U8SetPinDirection+0x212>
					break;
				case DIO_PORTB:
					CLR_BIT (DDRB, Copy_U8Pin);
     94c:	a7 e3       	ldi	r26, 0x37	; 55
     94e:	b0 e0       	ldi	r27, 0x00	; 0
     950:	e7 e3       	ldi	r30, 0x37	; 55
     952:	f0 e0       	ldi	r31, 0x00	; 0
     954:	80 81       	ld	r24, Z
     956:	48 2f       	mov	r20, r24
     958:	8b 81       	ldd	r24, Y+3	; 0x03
     95a:	28 2f       	mov	r18, r24
     95c:	30 e0       	ldi	r19, 0x00	; 0
     95e:	81 e0       	ldi	r24, 0x01	; 1
     960:	90 e0       	ldi	r25, 0x00	; 0
     962:	02 2e       	mov	r0, r18
     964:	02 c0       	rjmp	.+4      	; 0x96a <DIO_U8SetPinDirection+0xc4>
     966:	88 0f       	add	r24, r24
     968:	99 1f       	adc	r25, r25
     96a:	0a 94       	dec	r0
     96c:	e2 f7       	brpl	.-8      	; 0x966 <DIO_U8SetPinDirection+0xc0>
     96e:	80 95       	com	r24
     970:	84 23       	and	r24, r20
     972:	8c 93       	st	X, r24
     974:	a1 c0       	rjmp	.+322    	; 0xab8 <DIO_U8SetPinDirection+0x212>
					break;
				case DIO_PORTC:
					CLR_BIT (DDRC, Copy_U8Pin);
     976:	a4 e3       	ldi	r26, 0x34	; 52
     978:	b0 e0       	ldi	r27, 0x00	; 0
     97a:	e4 e3       	ldi	r30, 0x34	; 52
     97c:	f0 e0       	ldi	r31, 0x00	; 0
     97e:	80 81       	ld	r24, Z
     980:	48 2f       	mov	r20, r24
     982:	8b 81       	ldd	r24, Y+3	; 0x03
     984:	28 2f       	mov	r18, r24
     986:	30 e0       	ldi	r19, 0x00	; 0
     988:	81 e0       	ldi	r24, 0x01	; 1
     98a:	90 e0       	ldi	r25, 0x00	; 0
     98c:	02 2e       	mov	r0, r18
     98e:	02 c0       	rjmp	.+4      	; 0x994 <DIO_U8SetPinDirection+0xee>
     990:	88 0f       	add	r24, r24
     992:	99 1f       	adc	r25, r25
     994:	0a 94       	dec	r0
     996:	e2 f7       	brpl	.-8      	; 0x990 <DIO_U8SetPinDirection+0xea>
     998:	80 95       	com	r24
     99a:	84 23       	and	r24, r20
     99c:	8c 93       	st	X, r24
     99e:	8c c0       	rjmp	.+280    	; 0xab8 <DIO_U8SetPinDirection+0x212>
					break;
				case DIO_PORTD:
					CLR_BIT (DDRD, Copy_U8Pin);
     9a0:	a1 e3       	ldi	r26, 0x31	; 49
     9a2:	b0 e0       	ldi	r27, 0x00	; 0
     9a4:	e1 e3       	ldi	r30, 0x31	; 49
     9a6:	f0 e0       	ldi	r31, 0x00	; 0
     9a8:	80 81       	ld	r24, Z
     9aa:	48 2f       	mov	r20, r24
     9ac:	8b 81       	ldd	r24, Y+3	; 0x03
     9ae:	28 2f       	mov	r18, r24
     9b0:	30 e0       	ldi	r19, 0x00	; 0
     9b2:	81 e0       	ldi	r24, 0x01	; 1
     9b4:	90 e0       	ldi	r25, 0x00	; 0
     9b6:	02 2e       	mov	r0, r18
     9b8:	02 c0       	rjmp	.+4      	; 0x9be <DIO_U8SetPinDirection+0x118>
     9ba:	88 0f       	add	r24, r24
     9bc:	99 1f       	adc	r25, r25
     9be:	0a 94       	dec	r0
     9c0:	e2 f7       	brpl	.-8      	; 0x9ba <DIO_U8SetPinDirection+0x114>
     9c2:	80 95       	com	r24
     9c4:	84 23       	and	r24, r20
     9c6:	8c 93       	st	X, r24
     9c8:	77 c0       	rjmp	.+238    	; 0xab8 <DIO_U8SetPinDirection+0x212>
					break;
				default : err_status = E_NOK;
     9ca:	81 e0       	ldi	r24, 0x01	; 1
     9cc:	89 83       	std	Y+1, r24	; 0x01
     9ce:	74 c0       	rjmp	.+232    	; 0xab8 <DIO_U8SetPinDirection+0x212>
			}
			break;

		case DIO_OUTPUT:
			switch (Copy_U8Port)
     9d0:	8a 81       	ldd	r24, Y+2	; 0x02
     9d2:	28 2f       	mov	r18, r24
     9d4:	30 e0       	ldi	r19, 0x00	; 0
     9d6:	3e 83       	std	Y+6, r19	; 0x06
     9d8:	2d 83       	std	Y+5, r18	; 0x05
     9da:	8d 81       	ldd	r24, Y+5	; 0x05
     9dc:	9e 81       	ldd	r25, Y+6	; 0x06
     9de:	81 30       	cpi	r24, 0x01	; 1
     9e0:	91 05       	cpc	r25, r1
     9e2:	49 f1       	breq	.+82     	; 0xa36 <DIO_U8SetPinDirection+0x190>
     9e4:	2d 81       	ldd	r18, Y+5	; 0x05
     9e6:	3e 81       	ldd	r19, Y+6	; 0x06
     9e8:	22 30       	cpi	r18, 0x02	; 2
     9ea:	31 05       	cpc	r19, r1
     9ec:	2c f4       	brge	.+10     	; 0x9f8 <DIO_U8SetPinDirection+0x152>
     9ee:	8d 81       	ldd	r24, Y+5	; 0x05
     9f0:	9e 81       	ldd	r25, Y+6	; 0x06
     9f2:	00 97       	sbiw	r24, 0x00	; 0
     9f4:	61 f0       	breq	.+24     	; 0xa0e <DIO_U8SetPinDirection+0x168>
     9f6:	5b c0       	rjmp	.+182    	; 0xaae <DIO_U8SetPinDirection+0x208>
     9f8:	2d 81       	ldd	r18, Y+5	; 0x05
     9fa:	3e 81       	ldd	r19, Y+6	; 0x06
     9fc:	22 30       	cpi	r18, 0x02	; 2
     9fe:	31 05       	cpc	r19, r1
     a00:	71 f1       	breq	.+92     	; 0xa5e <DIO_U8SetPinDirection+0x1b8>
     a02:	8d 81       	ldd	r24, Y+5	; 0x05
     a04:	9e 81       	ldd	r25, Y+6	; 0x06
     a06:	83 30       	cpi	r24, 0x03	; 3
     a08:	91 05       	cpc	r25, r1
     a0a:	e9 f1       	breq	.+122    	; 0xa86 <DIO_U8SetPinDirection+0x1e0>
     a0c:	50 c0       	rjmp	.+160    	; 0xaae <DIO_U8SetPinDirection+0x208>
			{
					case DIO_PORTA:
						SET_BIT (DDRA, Copy_U8Pin);
     a0e:	aa e3       	ldi	r26, 0x3A	; 58
     a10:	b0 e0       	ldi	r27, 0x00	; 0
     a12:	ea e3       	ldi	r30, 0x3A	; 58
     a14:	f0 e0       	ldi	r31, 0x00	; 0
     a16:	80 81       	ld	r24, Z
     a18:	48 2f       	mov	r20, r24
     a1a:	8b 81       	ldd	r24, Y+3	; 0x03
     a1c:	28 2f       	mov	r18, r24
     a1e:	30 e0       	ldi	r19, 0x00	; 0
     a20:	81 e0       	ldi	r24, 0x01	; 1
     a22:	90 e0       	ldi	r25, 0x00	; 0
     a24:	02 2e       	mov	r0, r18
     a26:	02 c0       	rjmp	.+4      	; 0xa2c <DIO_U8SetPinDirection+0x186>
     a28:	88 0f       	add	r24, r24
     a2a:	99 1f       	adc	r25, r25
     a2c:	0a 94       	dec	r0
     a2e:	e2 f7       	brpl	.-8      	; 0xa28 <DIO_U8SetPinDirection+0x182>
     a30:	84 2b       	or	r24, r20
     a32:	8c 93       	st	X, r24
     a34:	41 c0       	rjmp	.+130    	; 0xab8 <DIO_U8SetPinDirection+0x212>
						break;
					case DIO_PORTB:
						SET_BIT (DDRB, Copy_U8Pin);
     a36:	a7 e3       	ldi	r26, 0x37	; 55
     a38:	b0 e0       	ldi	r27, 0x00	; 0
     a3a:	e7 e3       	ldi	r30, 0x37	; 55
     a3c:	f0 e0       	ldi	r31, 0x00	; 0
     a3e:	80 81       	ld	r24, Z
     a40:	48 2f       	mov	r20, r24
     a42:	8b 81       	ldd	r24, Y+3	; 0x03
     a44:	28 2f       	mov	r18, r24
     a46:	30 e0       	ldi	r19, 0x00	; 0
     a48:	81 e0       	ldi	r24, 0x01	; 1
     a4a:	90 e0       	ldi	r25, 0x00	; 0
     a4c:	02 2e       	mov	r0, r18
     a4e:	02 c0       	rjmp	.+4      	; 0xa54 <DIO_U8SetPinDirection+0x1ae>
     a50:	88 0f       	add	r24, r24
     a52:	99 1f       	adc	r25, r25
     a54:	0a 94       	dec	r0
     a56:	e2 f7       	brpl	.-8      	; 0xa50 <DIO_U8SetPinDirection+0x1aa>
     a58:	84 2b       	or	r24, r20
     a5a:	8c 93       	st	X, r24
     a5c:	2d c0       	rjmp	.+90     	; 0xab8 <DIO_U8SetPinDirection+0x212>
						break;
					case DIO_PORTC:
						SET_BIT (DDRC, Copy_U8Pin);
     a5e:	a4 e3       	ldi	r26, 0x34	; 52
     a60:	b0 e0       	ldi	r27, 0x00	; 0
     a62:	e4 e3       	ldi	r30, 0x34	; 52
     a64:	f0 e0       	ldi	r31, 0x00	; 0
     a66:	80 81       	ld	r24, Z
     a68:	48 2f       	mov	r20, r24
     a6a:	8b 81       	ldd	r24, Y+3	; 0x03
     a6c:	28 2f       	mov	r18, r24
     a6e:	30 e0       	ldi	r19, 0x00	; 0
     a70:	81 e0       	ldi	r24, 0x01	; 1
     a72:	90 e0       	ldi	r25, 0x00	; 0
     a74:	02 2e       	mov	r0, r18
     a76:	02 c0       	rjmp	.+4      	; 0xa7c <DIO_U8SetPinDirection+0x1d6>
     a78:	88 0f       	add	r24, r24
     a7a:	99 1f       	adc	r25, r25
     a7c:	0a 94       	dec	r0
     a7e:	e2 f7       	brpl	.-8      	; 0xa78 <DIO_U8SetPinDirection+0x1d2>
     a80:	84 2b       	or	r24, r20
     a82:	8c 93       	st	X, r24
     a84:	19 c0       	rjmp	.+50     	; 0xab8 <DIO_U8SetPinDirection+0x212>
						break;
					case DIO_PORTD:
						SET_BIT (DDRD, Copy_U8Pin);
     a86:	a1 e3       	ldi	r26, 0x31	; 49
     a88:	b0 e0       	ldi	r27, 0x00	; 0
     a8a:	e1 e3       	ldi	r30, 0x31	; 49
     a8c:	f0 e0       	ldi	r31, 0x00	; 0
     a8e:	80 81       	ld	r24, Z
     a90:	48 2f       	mov	r20, r24
     a92:	8b 81       	ldd	r24, Y+3	; 0x03
     a94:	28 2f       	mov	r18, r24
     a96:	30 e0       	ldi	r19, 0x00	; 0
     a98:	81 e0       	ldi	r24, 0x01	; 1
     a9a:	90 e0       	ldi	r25, 0x00	; 0
     a9c:	02 2e       	mov	r0, r18
     a9e:	02 c0       	rjmp	.+4      	; 0xaa4 <DIO_U8SetPinDirection+0x1fe>
     aa0:	88 0f       	add	r24, r24
     aa2:	99 1f       	adc	r25, r25
     aa4:	0a 94       	dec	r0
     aa6:	e2 f7       	brpl	.-8      	; 0xaa0 <DIO_U8SetPinDirection+0x1fa>
     aa8:	84 2b       	or	r24, r20
     aaa:	8c 93       	st	X, r24
     aac:	05 c0       	rjmp	.+10     	; 0xab8 <DIO_U8SetPinDirection+0x212>
						break;
					default : err_status = E_NOK;
     aae:	81 e0       	ldi	r24, 0x01	; 1
     ab0:	89 83       	std	Y+1, r24	; 0x01
     ab2:	02 c0       	rjmp	.+4      	; 0xab8 <DIO_U8SetPinDirection+0x212>
			}
			break;
		default : err_status = E_NOK;
     ab4:	81 e0       	ldi	r24, 0x01	; 1
     ab6:	89 83       	std	Y+1, r24	; 0x01
	}
	return err_status;
     ab8:	89 81       	ldd	r24, Y+1	; 0x01
}
     aba:	2a 96       	adiw	r28, 0x0a	; 10
     abc:	0f b6       	in	r0, 0x3f	; 63
     abe:	f8 94       	cli
     ac0:	de bf       	out	0x3e, r29	; 62
     ac2:	0f be       	out	0x3f, r0	; 63
     ac4:	cd bf       	out	0x3d, r28	; 61
     ac6:	cf 91       	pop	r28
     ac8:	df 91       	pop	r29
     aca:	08 95       	ret

00000acc <DIO_U8SetPinValue>:

/*Function for value*/
uint8_t DIO_U8SetPinValue(uint8_t Copy_U8Port , uint8_t Copy_U8Pin, uint8_t Copy_U8Value ){
     acc:	df 93       	push	r29
     ace:	cf 93       	push	r28
     ad0:	cd b7       	in	r28, 0x3d	; 61
     ad2:	de b7       	in	r29, 0x3e	; 62
     ad4:	2a 97       	sbiw	r28, 0x0a	; 10
     ad6:	0f b6       	in	r0, 0x3f	; 63
     ad8:	f8 94       	cli
     ada:	de bf       	out	0x3e, r29	; 62
     adc:	0f be       	out	0x3f, r0	; 63
     ade:	cd bf       	out	0x3d, r28	; 61
     ae0:	8a 83       	std	Y+2, r24	; 0x02
     ae2:	6b 83       	std	Y+3, r22	; 0x03
     ae4:	4c 83       	std	Y+4, r20	; 0x04
	uint8_t err_status = E_OK;
     ae6:	19 82       	std	Y+1, r1	; 0x01
	switch (Copy_U8Value)
     ae8:	8c 81       	ldd	r24, Y+4	; 0x04
     aea:	28 2f       	mov	r18, r24
     aec:	30 e0       	ldi	r19, 0x00	; 0
     aee:	3a 87       	std	Y+10, r19	; 0x0a
     af0:	29 87       	std	Y+9, r18	; 0x09
     af2:	89 85       	ldd	r24, Y+9	; 0x09
     af4:	9a 85       	ldd	r25, Y+10	; 0x0a
     af6:	00 97       	sbiw	r24, 0x00	; 0
     af8:	39 f0       	breq	.+14     	; 0xb08 <DIO_U8SetPinValue+0x3c>
     afa:	29 85       	ldd	r18, Y+9	; 0x09
     afc:	3a 85       	ldd	r19, Y+10	; 0x0a
     afe:	21 30       	cpi	r18, 0x01	; 1
     b00:	31 05       	cpc	r19, r1
     b02:	09 f4       	brne	.+2      	; 0xb06 <DIO_U8SetPinValue+0x3a>
     b04:	78 c0       	rjmp	.+240    	; 0xbf6 <DIO_U8SetPinValue+0x12a>
     b06:	e9 c0       	rjmp	.+466    	; 0xcda <DIO_U8SetPinValue+0x20e>
		{
			case DIO_LOW:

				switch (Copy_U8Port)
     b08:	8a 81       	ldd	r24, Y+2	; 0x02
     b0a:	28 2f       	mov	r18, r24
     b0c:	30 e0       	ldi	r19, 0x00	; 0
     b0e:	38 87       	std	Y+8, r19	; 0x08
     b10:	2f 83       	std	Y+7, r18	; 0x07
     b12:	8f 81       	ldd	r24, Y+7	; 0x07
     b14:	98 85       	ldd	r25, Y+8	; 0x08
     b16:	81 30       	cpi	r24, 0x01	; 1
     b18:	91 05       	cpc	r25, r1
     b1a:	59 f1       	breq	.+86     	; 0xb72 <DIO_U8SetPinValue+0xa6>
     b1c:	2f 81       	ldd	r18, Y+7	; 0x07
     b1e:	38 85       	ldd	r19, Y+8	; 0x08
     b20:	22 30       	cpi	r18, 0x02	; 2
     b22:	31 05       	cpc	r19, r1
     b24:	2c f4       	brge	.+10     	; 0xb30 <DIO_U8SetPinValue+0x64>
     b26:	8f 81       	ldd	r24, Y+7	; 0x07
     b28:	98 85       	ldd	r25, Y+8	; 0x08
     b2a:	00 97       	sbiw	r24, 0x00	; 0
     b2c:	69 f0       	breq	.+26     	; 0xb48 <DIO_U8SetPinValue+0x7c>
     b2e:	60 c0       	rjmp	.+192    	; 0xbf0 <DIO_U8SetPinValue+0x124>
     b30:	2f 81       	ldd	r18, Y+7	; 0x07
     b32:	38 85       	ldd	r19, Y+8	; 0x08
     b34:	22 30       	cpi	r18, 0x02	; 2
     b36:	31 05       	cpc	r19, r1
     b38:	89 f1       	breq	.+98     	; 0xb9c <DIO_U8SetPinValue+0xd0>
     b3a:	8f 81       	ldd	r24, Y+7	; 0x07
     b3c:	98 85       	ldd	r25, Y+8	; 0x08
     b3e:	83 30       	cpi	r24, 0x03	; 3
     b40:	91 05       	cpc	r25, r1
     b42:	09 f4       	brne	.+2      	; 0xb46 <DIO_U8SetPinValue+0x7a>
     b44:	40 c0       	rjmp	.+128    	; 0xbc6 <DIO_U8SetPinValue+0xfa>
     b46:	54 c0       	rjmp	.+168    	; 0xbf0 <DIO_U8SetPinValue+0x124>
				{
					case DIO_PORTA:
						CLR_BIT (PORTA, Copy_U8Pin);
     b48:	ab e3       	ldi	r26, 0x3B	; 59
     b4a:	b0 e0       	ldi	r27, 0x00	; 0
     b4c:	eb e3       	ldi	r30, 0x3B	; 59
     b4e:	f0 e0       	ldi	r31, 0x00	; 0
     b50:	80 81       	ld	r24, Z
     b52:	48 2f       	mov	r20, r24
     b54:	8b 81       	ldd	r24, Y+3	; 0x03
     b56:	28 2f       	mov	r18, r24
     b58:	30 e0       	ldi	r19, 0x00	; 0
     b5a:	81 e0       	ldi	r24, 0x01	; 1
     b5c:	90 e0       	ldi	r25, 0x00	; 0
     b5e:	02 2e       	mov	r0, r18
     b60:	02 c0       	rjmp	.+4      	; 0xb66 <DIO_U8SetPinValue+0x9a>
     b62:	88 0f       	add	r24, r24
     b64:	99 1f       	adc	r25, r25
     b66:	0a 94       	dec	r0
     b68:	e2 f7       	brpl	.-8      	; 0xb62 <DIO_U8SetPinValue+0x96>
     b6a:	80 95       	com	r24
     b6c:	84 23       	and	r24, r20
     b6e:	8c 93       	st	X, r24
     b70:	b6 c0       	rjmp	.+364    	; 0xcde <DIO_U8SetPinValue+0x212>
						break;
					case DIO_PORTB:
						CLR_BIT (PORTB, Copy_U8Pin);
     b72:	a8 e3       	ldi	r26, 0x38	; 56
     b74:	b0 e0       	ldi	r27, 0x00	; 0
     b76:	e8 e3       	ldi	r30, 0x38	; 56
     b78:	f0 e0       	ldi	r31, 0x00	; 0
     b7a:	80 81       	ld	r24, Z
     b7c:	48 2f       	mov	r20, r24
     b7e:	8b 81       	ldd	r24, Y+3	; 0x03
     b80:	28 2f       	mov	r18, r24
     b82:	30 e0       	ldi	r19, 0x00	; 0
     b84:	81 e0       	ldi	r24, 0x01	; 1
     b86:	90 e0       	ldi	r25, 0x00	; 0
     b88:	02 2e       	mov	r0, r18
     b8a:	02 c0       	rjmp	.+4      	; 0xb90 <DIO_U8SetPinValue+0xc4>
     b8c:	88 0f       	add	r24, r24
     b8e:	99 1f       	adc	r25, r25
     b90:	0a 94       	dec	r0
     b92:	e2 f7       	brpl	.-8      	; 0xb8c <DIO_U8SetPinValue+0xc0>
     b94:	80 95       	com	r24
     b96:	84 23       	and	r24, r20
     b98:	8c 93       	st	X, r24
     b9a:	a1 c0       	rjmp	.+322    	; 0xcde <DIO_U8SetPinValue+0x212>
						break;
					case DIO_PORTC:
						CLR_BIT (PORTC, Copy_U8Pin);
     b9c:	a5 e3       	ldi	r26, 0x35	; 53
     b9e:	b0 e0       	ldi	r27, 0x00	; 0
     ba0:	e5 e3       	ldi	r30, 0x35	; 53
     ba2:	f0 e0       	ldi	r31, 0x00	; 0
     ba4:	80 81       	ld	r24, Z
     ba6:	48 2f       	mov	r20, r24
     ba8:	8b 81       	ldd	r24, Y+3	; 0x03
     baa:	28 2f       	mov	r18, r24
     bac:	30 e0       	ldi	r19, 0x00	; 0
     bae:	81 e0       	ldi	r24, 0x01	; 1
     bb0:	90 e0       	ldi	r25, 0x00	; 0
     bb2:	02 2e       	mov	r0, r18
     bb4:	02 c0       	rjmp	.+4      	; 0xbba <DIO_U8SetPinValue+0xee>
     bb6:	88 0f       	add	r24, r24
     bb8:	99 1f       	adc	r25, r25
     bba:	0a 94       	dec	r0
     bbc:	e2 f7       	brpl	.-8      	; 0xbb6 <DIO_U8SetPinValue+0xea>
     bbe:	80 95       	com	r24
     bc0:	84 23       	and	r24, r20
     bc2:	8c 93       	st	X, r24
     bc4:	8c c0       	rjmp	.+280    	; 0xcde <DIO_U8SetPinValue+0x212>
						break;
					case DIO_PORTD:
						CLR_BIT (PORTD, Copy_U8Pin);
     bc6:	a2 e3       	ldi	r26, 0x32	; 50
     bc8:	b0 e0       	ldi	r27, 0x00	; 0
     bca:	e2 e3       	ldi	r30, 0x32	; 50
     bcc:	f0 e0       	ldi	r31, 0x00	; 0
     bce:	80 81       	ld	r24, Z
     bd0:	48 2f       	mov	r20, r24
     bd2:	8b 81       	ldd	r24, Y+3	; 0x03
     bd4:	28 2f       	mov	r18, r24
     bd6:	30 e0       	ldi	r19, 0x00	; 0
     bd8:	81 e0       	ldi	r24, 0x01	; 1
     bda:	90 e0       	ldi	r25, 0x00	; 0
     bdc:	02 2e       	mov	r0, r18
     bde:	02 c0       	rjmp	.+4      	; 0xbe4 <DIO_U8SetPinValue+0x118>
     be0:	88 0f       	add	r24, r24
     be2:	99 1f       	adc	r25, r25
     be4:	0a 94       	dec	r0
     be6:	e2 f7       	brpl	.-8      	; 0xbe0 <DIO_U8SetPinValue+0x114>
     be8:	80 95       	com	r24
     bea:	84 23       	and	r24, r20
     bec:	8c 93       	st	X, r24
     bee:	77 c0       	rjmp	.+238    	; 0xcde <DIO_U8SetPinValue+0x212>
						break;
					default : err_status = E_NOK;
     bf0:	81 e0       	ldi	r24, 0x01	; 1
     bf2:	89 83       	std	Y+1, r24	; 0x01
     bf4:	74 c0       	rjmp	.+232    	; 0xcde <DIO_U8SetPinValue+0x212>
				}
				break;

			case DIO_HIGH:
				switch (Copy_U8Port)
     bf6:	8a 81       	ldd	r24, Y+2	; 0x02
     bf8:	28 2f       	mov	r18, r24
     bfa:	30 e0       	ldi	r19, 0x00	; 0
     bfc:	3e 83       	std	Y+6, r19	; 0x06
     bfe:	2d 83       	std	Y+5, r18	; 0x05
     c00:	8d 81       	ldd	r24, Y+5	; 0x05
     c02:	9e 81       	ldd	r25, Y+6	; 0x06
     c04:	81 30       	cpi	r24, 0x01	; 1
     c06:	91 05       	cpc	r25, r1
     c08:	49 f1       	breq	.+82     	; 0xc5c <DIO_U8SetPinValue+0x190>
     c0a:	2d 81       	ldd	r18, Y+5	; 0x05
     c0c:	3e 81       	ldd	r19, Y+6	; 0x06
     c0e:	22 30       	cpi	r18, 0x02	; 2
     c10:	31 05       	cpc	r19, r1
     c12:	2c f4       	brge	.+10     	; 0xc1e <DIO_U8SetPinValue+0x152>
     c14:	8d 81       	ldd	r24, Y+5	; 0x05
     c16:	9e 81       	ldd	r25, Y+6	; 0x06
     c18:	00 97       	sbiw	r24, 0x00	; 0
     c1a:	61 f0       	breq	.+24     	; 0xc34 <DIO_U8SetPinValue+0x168>
     c1c:	5b c0       	rjmp	.+182    	; 0xcd4 <DIO_U8SetPinValue+0x208>
     c1e:	2d 81       	ldd	r18, Y+5	; 0x05
     c20:	3e 81       	ldd	r19, Y+6	; 0x06
     c22:	22 30       	cpi	r18, 0x02	; 2
     c24:	31 05       	cpc	r19, r1
     c26:	71 f1       	breq	.+92     	; 0xc84 <DIO_U8SetPinValue+0x1b8>
     c28:	8d 81       	ldd	r24, Y+5	; 0x05
     c2a:	9e 81       	ldd	r25, Y+6	; 0x06
     c2c:	83 30       	cpi	r24, 0x03	; 3
     c2e:	91 05       	cpc	r25, r1
     c30:	e9 f1       	breq	.+122    	; 0xcac <DIO_U8SetPinValue+0x1e0>
     c32:	50 c0       	rjmp	.+160    	; 0xcd4 <DIO_U8SetPinValue+0x208>
				{
						case DIO_PORTA:
							SET_BIT (PORTA, Copy_U8Pin);
     c34:	ab e3       	ldi	r26, 0x3B	; 59
     c36:	b0 e0       	ldi	r27, 0x00	; 0
     c38:	eb e3       	ldi	r30, 0x3B	; 59
     c3a:	f0 e0       	ldi	r31, 0x00	; 0
     c3c:	80 81       	ld	r24, Z
     c3e:	48 2f       	mov	r20, r24
     c40:	8b 81       	ldd	r24, Y+3	; 0x03
     c42:	28 2f       	mov	r18, r24
     c44:	30 e0       	ldi	r19, 0x00	; 0
     c46:	81 e0       	ldi	r24, 0x01	; 1
     c48:	90 e0       	ldi	r25, 0x00	; 0
     c4a:	02 2e       	mov	r0, r18
     c4c:	02 c0       	rjmp	.+4      	; 0xc52 <DIO_U8SetPinValue+0x186>
     c4e:	88 0f       	add	r24, r24
     c50:	99 1f       	adc	r25, r25
     c52:	0a 94       	dec	r0
     c54:	e2 f7       	brpl	.-8      	; 0xc4e <DIO_U8SetPinValue+0x182>
     c56:	84 2b       	or	r24, r20
     c58:	8c 93       	st	X, r24
     c5a:	41 c0       	rjmp	.+130    	; 0xcde <DIO_U8SetPinValue+0x212>
							break;
						case DIO_PORTB:
							SET_BIT (PORTB, Copy_U8Pin);
     c5c:	a8 e3       	ldi	r26, 0x38	; 56
     c5e:	b0 e0       	ldi	r27, 0x00	; 0
     c60:	e8 e3       	ldi	r30, 0x38	; 56
     c62:	f0 e0       	ldi	r31, 0x00	; 0
     c64:	80 81       	ld	r24, Z
     c66:	48 2f       	mov	r20, r24
     c68:	8b 81       	ldd	r24, Y+3	; 0x03
     c6a:	28 2f       	mov	r18, r24
     c6c:	30 e0       	ldi	r19, 0x00	; 0
     c6e:	81 e0       	ldi	r24, 0x01	; 1
     c70:	90 e0       	ldi	r25, 0x00	; 0
     c72:	02 2e       	mov	r0, r18
     c74:	02 c0       	rjmp	.+4      	; 0xc7a <DIO_U8SetPinValue+0x1ae>
     c76:	88 0f       	add	r24, r24
     c78:	99 1f       	adc	r25, r25
     c7a:	0a 94       	dec	r0
     c7c:	e2 f7       	brpl	.-8      	; 0xc76 <DIO_U8SetPinValue+0x1aa>
     c7e:	84 2b       	or	r24, r20
     c80:	8c 93       	st	X, r24
     c82:	2d c0       	rjmp	.+90     	; 0xcde <DIO_U8SetPinValue+0x212>
							break;
						case DIO_PORTC:
							SET_BIT (PORTC, Copy_U8Pin);
     c84:	a5 e3       	ldi	r26, 0x35	; 53
     c86:	b0 e0       	ldi	r27, 0x00	; 0
     c88:	e5 e3       	ldi	r30, 0x35	; 53
     c8a:	f0 e0       	ldi	r31, 0x00	; 0
     c8c:	80 81       	ld	r24, Z
     c8e:	48 2f       	mov	r20, r24
     c90:	8b 81       	ldd	r24, Y+3	; 0x03
     c92:	28 2f       	mov	r18, r24
     c94:	30 e0       	ldi	r19, 0x00	; 0
     c96:	81 e0       	ldi	r24, 0x01	; 1
     c98:	90 e0       	ldi	r25, 0x00	; 0
     c9a:	02 2e       	mov	r0, r18
     c9c:	02 c0       	rjmp	.+4      	; 0xca2 <DIO_U8SetPinValue+0x1d6>
     c9e:	88 0f       	add	r24, r24
     ca0:	99 1f       	adc	r25, r25
     ca2:	0a 94       	dec	r0
     ca4:	e2 f7       	brpl	.-8      	; 0xc9e <DIO_U8SetPinValue+0x1d2>
     ca6:	84 2b       	or	r24, r20
     ca8:	8c 93       	st	X, r24
     caa:	19 c0       	rjmp	.+50     	; 0xcde <DIO_U8SetPinValue+0x212>
							break;
						case DIO_PORTD:
							SET_BIT (PORTD, Copy_U8Pin);
     cac:	a2 e3       	ldi	r26, 0x32	; 50
     cae:	b0 e0       	ldi	r27, 0x00	; 0
     cb0:	e2 e3       	ldi	r30, 0x32	; 50
     cb2:	f0 e0       	ldi	r31, 0x00	; 0
     cb4:	80 81       	ld	r24, Z
     cb6:	48 2f       	mov	r20, r24
     cb8:	8b 81       	ldd	r24, Y+3	; 0x03
     cba:	28 2f       	mov	r18, r24
     cbc:	30 e0       	ldi	r19, 0x00	; 0
     cbe:	81 e0       	ldi	r24, 0x01	; 1
     cc0:	90 e0       	ldi	r25, 0x00	; 0
     cc2:	02 2e       	mov	r0, r18
     cc4:	02 c0       	rjmp	.+4      	; 0xcca <DIO_U8SetPinValue+0x1fe>
     cc6:	88 0f       	add	r24, r24
     cc8:	99 1f       	adc	r25, r25
     cca:	0a 94       	dec	r0
     ccc:	e2 f7       	brpl	.-8      	; 0xcc6 <DIO_U8SetPinValue+0x1fa>
     cce:	84 2b       	or	r24, r20
     cd0:	8c 93       	st	X, r24
     cd2:	05 c0       	rjmp	.+10     	; 0xcde <DIO_U8SetPinValue+0x212>
							break;
						default :err_status = E_NOK;
     cd4:	81 e0       	ldi	r24, 0x01	; 1
     cd6:	89 83       	std	Y+1, r24	; 0x01
     cd8:	02 c0       	rjmp	.+4      	; 0xcde <DIO_U8SetPinValue+0x212>
				}
				break;
			default : err_status = E_NOK;
     cda:	81 e0       	ldi	r24, 0x01	; 1
     cdc:	89 83       	std	Y+1, r24	; 0x01

		}
	return err_status;
     cde:	89 81       	ldd	r24, Y+1	; 0x01

}
     ce0:	2a 96       	adiw	r28, 0x0a	; 10
     ce2:	0f b6       	in	r0, 0x3f	; 63
     ce4:	f8 94       	cli
     ce6:	de bf       	out	0x3e, r29	; 62
     ce8:	0f be       	out	0x3f, r0	; 63
     cea:	cd bf       	out	0x3d, r28	; 61
     cec:	cf 91       	pop	r28
     cee:	df 91       	pop	r29
     cf0:	08 95       	ret

00000cf2 <DIO_U8SetPortDirection>:


/*Function to set port direction*/
uint8_t DIO_U8SetPortDirection(uint8_t Copy_U8Port, uint8_t Copy_U8Direction)
{
     cf2:	df 93       	push	r29
     cf4:	cf 93       	push	r28
     cf6:	00 d0       	rcall	.+0      	; 0xcf8 <DIO_U8SetPortDirection+0x6>
     cf8:	00 d0       	rcall	.+0      	; 0xcfa <DIO_U8SetPortDirection+0x8>
     cfa:	0f 92       	push	r0
     cfc:	cd b7       	in	r28, 0x3d	; 61
     cfe:	de b7       	in	r29, 0x3e	; 62
     d00:	8a 83       	std	Y+2, r24	; 0x02
     d02:	6b 83       	std	Y+3, r22	; 0x03
	uint8_t err_status = E_OK;
     d04:	19 82       	std	Y+1, r1	; 0x01
	switch(Copy_U8Port)
     d06:	8a 81       	ldd	r24, Y+2	; 0x02
     d08:	28 2f       	mov	r18, r24
     d0a:	30 e0       	ldi	r19, 0x00	; 0
     d0c:	3d 83       	std	Y+5, r19	; 0x05
     d0e:	2c 83       	std	Y+4, r18	; 0x04
     d10:	8c 81       	ldd	r24, Y+4	; 0x04
     d12:	9d 81       	ldd	r25, Y+5	; 0x05
     d14:	81 30       	cpi	r24, 0x01	; 1
     d16:	91 05       	cpc	r25, r1
     d18:	d1 f0       	breq	.+52     	; 0xd4e <DIO_U8SetPortDirection+0x5c>
     d1a:	2c 81       	ldd	r18, Y+4	; 0x04
     d1c:	3d 81       	ldd	r19, Y+5	; 0x05
     d1e:	22 30       	cpi	r18, 0x02	; 2
     d20:	31 05       	cpc	r19, r1
     d22:	2c f4       	brge	.+10     	; 0xd2e <DIO_U8SetPortDirection+0x3c>
     d24:	8c 81       	ldd	r24, Y+4	; 0x04
     d26:	9d 81       	ldd	r25, Y+5	; 0x05
     d28:	00 97       	sbiw	r24, 0x00	; 0
     d2a:	61 f0       	breq	.+24     	; 0xd44 <DIO_U8SetPortDirection+0x52>
     d2c:	1f c0       	rjmp	.+62     	; 0xd6c <DIO_U8SetPortDirection+0x7a>
     d2e:	2c 81       	ldd	r18, Y+4	; 0x04
     d30:	3d 81       	ldd	r19, Y+5	; 0x05
     d32:	22 30       	cpi	r18, 0x02	; 2
     d34:	31 05       	cpc	r19, r1
     d36:	81 f0       	breq	.+32     	; 0xd58 <DIO_U8SetPortDirection+0x66>
     d38:	8c 81       	ldd	r24, Y+4	; 0x04
     d3a:	9d 81       	ldd	r25, Y+5	; 0x05
     d3c:	83 30       	cpi	r24, 0x03	; 3
     d3e:	91 05       	cpc	r25, r1
     d40:	81 f0       	breq	.+32     	; 0xd62 <DIO_U8SetPortDirection+0x70>
     d42:	14 c0       	rjmp	.+40     	; 0xd6c <DIO_U8SetPortDirection+0x7a>
	{
		case DIO_PORTA :
			DDRA = Copy_U8Direction ;
     d44:	ea e3       	ldi	r30, 0x3A	; 58
     d46:	f0 e0       	ldi	r31, 0x00	; 0
     d48:	8b 81       	ldd	r24, Y+3	; 0x03
     d4a:	80 83       	st	Z, r24
     d4c:	11 c0       	rjmp	.+34     	; 0xd70 <DIO_U8SetPortDirection+0x7e>
			break;

		case DIO_PORTB :
			DDRB = Copy_U8Direction ;
     d4e:	e7 e3       	ldi	r30, 0x37	; 55
     d50:	f0 e0       	ldi	r31, 0x00	; 0
     d52:	8b 81       	ldd	r24, Y+3	; 0x03
     d54:	80 83       	st	Z, r24
     d56:	0c c0       	rjmp	.+24     	; 0xd70 <DIO_U8SetPortDirection+0x7e>
			break;

		case DIO_PORTC :
			DDRC = Copy_U8Direction ;
     d58:	e4 e3       	ldi	r30, 0x34	; 52
     d5a:	f0 e0       	ldi	r31, 0x00	; 0
     d5c:	8b 81       	ldd	r24, Y+3	; 0x03
     d5e:	80 83       	st	Z, r24
     d60:	07 c0       	rjmp	.+14     	; 0xd70 <DIO_U8SetPortDirection+0x7e>
			break;

		case DIO_PORTD :
			DDRD = Copy_U8Direction ;
     d62:	e1 e3       	ldi	r30, 0x31	; 49
     d64:	f0 e0       	ldi	r31, 0x00	; 0
     d66:	8b 81       	ldd	r24, Y+3	; 0x03
     d68:	80 83       	st	Z, r24
     d6a:	02 c0       	rjmp	.+4      	; 0xd70 <DIO_U8SetPortDirection+0x7e>
			break;
		default : err_status = E_NOK;
     d6c:	81 e0       	ldi	r24, 0x01	; 1
     d6e:	89 83       	std	Y+1, r24	; 0x01
	}
	return err_status;
     d70:	89 81       	ldd	r24, Y+1	; 0x01
}
     d72:	0f 90       	pop	r0
     d74:	0f 90       	pop	r0
     d76:	0f 90       	pop	r0
     d78:	0f 90       	pop	r0
     d7a:	0f 90       	pop	r0
     d7c:	cf 91       	pop	r28
     d7e:	df 91       	pop	r29
     d80:	08 95       	ret

00000d82 <DIO_U8SetPortValue>:

/*Function to set port value*/
uint8_t DIO_U8SetPortValue(uint8_t Copy_U8Port, uint8_t Copy_U8Value)
{
     d82:	df 93       	push	r29
     d84:	cf 93       	push	r28
     d86:	00 d0       	rcall	.+0      	; 0xd88 <DIO_U8SetPortValue+0x6>
     d88:	00 d0       	rcall	.+0      	; 0xd8a <DIO_U8SetPortValue+0x8>
     d8a:	0f 92       	push	r0
     d8c:	cd b7       	in	r28, 0x3d	; 61
     d8e:	de b7       	in	r29, 0x3e	; 62
     d90:	8a 83       	std	Y+2, r24	; 0x02
     d92:	6b 83       	std	Y+3, r22	; 0x03
	uint8_t err_status = E_OK;
     d94:	19 82       	std	Y+1, r1	; 0x01
	switch(Copy_U8Port)
     d96:	8a 81       	ldd	r24, Y+2	; 0x02
     d98:	28 2f       	mov	r18, r24
     d9a:	30 e0       	ldi	r19, 0x00	; 0
     d9c:	3d 83       	std	Y+5, r19	; 0x05
     d9e:	2c 83       	std	Y+4, r18	; 0x04
     da0:	8c 81       	ldd	r24, Y+4	; 0x04
     da2:	9d 81       	ldd	r25, Y+5	; 0x05
     da4:	81 30       	cpi	r24, 0x01	; 1
     da6:	91 05       	cpc	r25, r1
     da8:	d1 f0       	breq	.+52     	; 0xdde <DIO_U8SetPortValue+0x5c>
     daa:	2c 81       	ldd	r18, Y+4	; 0x04
     dac:	3d 81       	ldd	r19, Y+5	; 0x05
     dae:	22 30       	cpi	r18, 0x02	; 2
     db0:	31 05       	cpc	r19, r1
     db2:	2c f4       	brge	.+10     	; 0xdbe <DIO_U8SetPortValue+0x3c>
     db4:	8c 81       	ldd	r24, Y+4	; 0x04
     db6:	9d 81       	ldd	r25, Y+5	; 0x05
     db8:	00 97       	sbiw	r24, 0x00	; 0
     dba:	61 f0       	breq	.+24     	; 0xdd4 <DIO_U8SetPortValue+0x52>
     dbc:	1f c0       	rjmp	.+62     	; 0xdfc <DIO_U8SetPortValue+0x7a>
     dbe:	2c 81       	ldd	r18, Y+4	; 0x04
     dc0:	3d 81       	ldd	r19, Y+5	; 0x05
     dc2:	22 30       	cpi	r18, 0x02	; 2
     dc4:	31 05       	cpc	r19, r1
     dc6:	81 f0       	breq	.+32     	; 0xde8 <DIO_U8SetPortValue+0x66>
     dc8:	8c 81       	ldd	r24, Y+4	; 0x04
     dca:	9d 81       	ldd	r25, Y+5	; 0x05
     dcc:	83 30       	cpi	r24, 0x03	; 3
     dce:	91 05       	cpc	r25, r1
     dd0:	81 f0       	breq	.+32     	; 0xdf2 <DIO_U8SetPortValue+0x70>
     dd2:	14 c0       	rjmp	.+40     	; 0xdfc <DIO_U8SetPortValue+0x7a>
	{
		case DIO_PORTA :
			PORTA = Copy_U8Value ;
     dd4:	eb e3       	ldi	r30, 0x3B	; 59
     dd6:	f0 e0       	ldi	r31, 0x00	; 0
     dd8:	8b 81       	ldd	r24, Y+3	; 0x03
     dda:	80 83       	st	Z, r24
     ddc:	11 c0       	rjmp	.+34     	; 0xe00 <DIO_U8SetPortValue+0x7e>
			break;

		case DIO_PORTB :
			PORTB = Copy_U8Value ;
     dde:	e8 e3       	ldi	r30, 0x38	; 56
     de0:	f0 e0       	ldi	r31, 0x00	; 0
     de2:	8b 81       	ldd	r24, Y+3	; 0x03
     de4:	80 83       	st	Z, r24
     de6:	0c c0       	rjmp	.+24     	; 0xe00 <DIO_U8SetPortValue+0x7e>
			break;

		case DIO_PORTC :
			PORTC = Copy_U8Value ;
     de8:	e5 e3       	ldi	r30, 0x35	; 53
     dea:	f0 e0       	ldi	r31, 0x00	; 0
     dec:	8b 81       	ldd	r24, Y+3	; 0x03
     dee:	80 83       	st	Z, r24
     df0:	07 c0       	rjmp	.+14     	; 0xe00 <DIO_U8SetPortValue+0x7e>
			break;

		case DIO_PORTD :
			PORTD = Copy_U8Value ;
     df2:	e2 e3       	ldi	r30, 0x32	; 50
     df4:	f0 e0       	ldi	r31, 0x00	; 0
     df6:	8b 81       	ldd	r24, Y+3	; 0x03
     df8:	80 83       	st	Z, r24
     dfa:	02 c0       	rjmp	.+4      	; 0xe00 <DIO_U8SetPortValue+0x7e>
			break;
		default : err_status = E_NOK;
     dfc:	81 e0       	ldi	r24, 0x01	; 1
     dfe:	89 83       	std	Y+1, r24	; 0x01
	}
	return err_status;
     e00:	89 81       	ldd	r24, Y+1	; 0x01
}
     e02:	0f 90       	pop	r0
     e04:	0f 90       	pop	r0
     e06:	0f 90       	pop	r0
     e08:	0f 90       	pop	r0
     e0a:	0f 90       	pop	r0
     e0c:	cf 91       	pop	r28
     e0e:	df 91       	pop	r29
     e10:	08 95       	ret

00000e12 <DIO_U8TogglePinValue>:
//Function to toggle the bin
uint8_t DIO_U8TogglePinValue(uint8_t Copy_U8Port, uint8_t Copy_U8Pin)
{
     e12:	df 93       	push	r29
     e14:	cf 93       	push	r28
     e16:	00 d0       	rcall	.+0      	; 0xe18 <DIO_U8TogglePinValue+0x6>
     e18:	00 d0       	rcall	.+0      	; 0xe1a <DIO_U8TogglePinValue+0x8>
     e1a:	0f 92       	push	r0
     e1c:	cd b7       	in	r28, 0x3d	; 61
     e1e:	de b7       	in	r29, 0x3e	; 62
     e20:	8a 83       	std	Y+2, r24	; 0x02
     e22:	6b 83       	std	Y+3, r22	; 0x03
	uint8_t err_status = E_OK;
     e24:	19 82       	std	Y+1, r1	; 0x01
	switch(Copy_U8Port)
     e26:	8a 81       	ldd	r24, Y+2	; 0x02
     e28:	28 2f       	mov	r18, r24
     e2a:	30 e0       	ldi	r19, 0x00	; 0
     e2c:	3d 83       	std	Y+5, r19	; 0x05
     e2e:	2c 83       	std	Y+4, r18	; 0x04
     e30:	8c 81       	ldd	r24, Y+4	; 0x04
     e32:	9d 81       	ldd	r25, Y+5	; 0x05
     e34:	81 30       	cpi	r24, 0x01	; 1
     e36:	91 05       	cpc	r25, r1
     e38:	49 f1       	breq	.+82     	; 0xe8c <DIO_U8TogglePinValue+0x7a>
     e3a:	2c 81       	ldd	r18, Y+4	; 0x04
     e3c:	3d 81       	ldd	r19, Y+5	; 0x05
     e3e:	22 30       	cpi	r18, 0x02	; 2
     e40:	31 05       	cpc	r19, r1
     e42:	2c f4       	brge	.+10     	; 0xe4e <DIO_U8TogglePinValue+0x3c>
     e44:	8c 81       	ldd	r24, Y+4	; 0x04
     e46:	9d 81       	ldd	r25, Y+5	; 0x05
     e48:	00 97       	sbiw	r24, 0x00	; 0
     e4a:	61 f0       	breq	.+24     	; 0xe64 <DIO_U8TogglePinValue+0x52>
     e4c:	5b c0       	rjmp	.+182    	; 0xf04 <DIO_U8TogglePinValue+0xf2>
     e4e:	2c 81       	ldd	r18, Y+4	; 0x04
     e50:	3d 81       	ldd	r19, Y+5	; 0x05
     e52:	22 30       	cpi	r18, 0x02	; 2
     e54:	31 05       	cpc	r19, r1
     e56:	71 f1       	breq	.+92     	; 0xeb4 <DIO_U8TogglePinValue+0xa2>
     e58:	8c 81       	ldd	r24, Y+4	; 0x04
     e5a:	9d 81       	ldd	r25, Y+5	; 0x05
     e5c:	83 30       	cpi	r24, 0x03	; 3
     e5e:	91 05       	cpc	r25, r1
     e60:	e9 f1       	breq	.+122    	; 0xedc <DIO_U8TogglePinValue+0xca>
     e62:	50 c0       	rjmp	.+160    	; 0xf04 <DIO_U8TogglePinValue+0xf2>
		{
			case DIO_PORTA :
				TOGGLE_BIT(PORTA,Copy_U8Pin);
     e64:	ab e3       	ldi	r26, 0x3B	; 59
     e66:	b0 e0       	ldi	r27, 0x00	; 0
     e68:	eb e3       	ldi	r30, 0x3B	; 59
     e6a:	f0 e0       	ldi	r31, 0x00	; 0
     e6c:	80 81       	ld	r24, Z
     e6e:	48 2f       	mov	r20, r24
     e70:	8b 81       	ldd	r24, Y+3	; 0x03
     e72:	28 2f       	mov	r18, r24
     e74:	30 e0       	ldi	r19, 0x00	; 0
     e76:	81 e0       	ldi	r24, 0x01	; 1
     e78:	90 e0       	ldi	r25, 0x00	; 0
     e7a:	02 2e       	mov	r0, r18
     e7c:	02 c0       	rjmp	.+4      	; 0xe82 <DIO_U8TogglePinValue+0x70>
     e7e:	88 0f       	add	r24, r24
     e80:	99 1f       	adc	r25, r25
     e82:	0a 94       	dec	r0
     e84:	e2 f7       	brpl	.-8      	; 0xe7e <DIO_U8TogglePinValue+0x6c>
     e86:	84 27       	eor	r24, r20
     e88:	8c 93       	st	X, r24
     e8a:	3e c0       	rjmp	.+124    	; 0xf08 <DIO_U8TogglePinValue+0xf6>
				break;

			case DIO_PORTB :
				TOGGLE_BIT(PORTB,Copy_U8Pin);
     e8c:	a8 e3       	ldi	r26, 0x38	; 56
     e8e:	b0 e0       	ldi	r27, 0x00	; 0
     e90:	e8 e3       	ldi	r30, 0x38	; 56
     e92:	f0 e0       	ldi	r31, 0x00	; 0
     e94:	80 81       	ld	r24, Z
     e96:	48 2f       	mov	r20, r24
     e98:	8b 81       	ldd	r24, Y+3	; 0x03
     e9a:	28 2f       	mov	r18, r24
     e9c:	30 e0       	ldi	r19, 0x00	; 0
     e9e:	81 e0       	ldi	r24, 0x01	; 1
     ea0:	90 e0       	ldi	r25, 0x00	; 0
     ea2:	02 2e       	mov	r0, r18
     ea4:	02 c0       	rjmp	.+4      	; 0xeaa <DIO_U8TogglePinValue+0x98>
     ea6:	88 0f       	add	r24, r24
     ea8:	99 1f       	adc	r25, r25
     eaa:	0a 94       	dec	r0
     eac:	e2 f7       	brpl	.-8      	; 0xea6 <DIO_U8TogglePinValue+0x94>
     eae:	84 27       	eor	r24, r20
     eb0:	8c 93       	st	X, r24
     eb2:	2a c0       	rjmp	.+84     	; 0xf08 <DIO_U8TogglePinValue+0xf6>
				break;

			case DIO_PORTC :
				TOGGLE_BIT(PORTC,Copy_U8Pin);
     eb4:	a5 e3       	ldi	r26, 0x35	; 53
     eb6:	b0 e0       	ldi	r27, 0x00	; 0
     eb8:	e5 e3       	ldi	r30, 0x35	; 53
     eba:	f0 e0       	ldi	r31, 0x00	; 0
     ebc:	80 81       	ld	r24, Z
     ebe:	48 2f       	mov	r20, r24
     ec0:	8b 81       	ldd	r24, Y+3	; 0x03
     ec2:	28 2f       	mov	r18, r24
     ec4:	30 e0       	ldi	r19, 0x00	; 0
     ec6:	81 e0       	ldi	r24, 0x01	; 1
     ec8:	90 e0       	ldi	r25, 0x00	; 0
     eca:	02 2e       	mov	r0, r18
     ecc:	02 c0       	rjmp	.+4      	; 0xed2 <DIO_U8TogglePinValue+0xc0>
     ece:	88 0f       	add	r24, r24
     ed0:	99 1f       	adc	r25, r25
     ed2:	0a 94       	dec	r0
     ed4:	e2 f7       	brpl	.-8      	; 0xece <DIO_U8TogglePinValue+0xbc>
     ed6:	84 27       	eor	r24, r20
     ed8:	8c 93       	st	X, r24
     eda:	16 c0       	rjmp	.+44     	; 0xf08 <DIO_U8TogglePinValue+0xf6>
				break;

			case DIO_PORTD :
				TOGGLE_BIT(PORTD,Copy_U8Pin);
     edc:	a2 e3       	ldi	r26, 0x32	; 50
     ede:	b0 e0       	ldi	r27, 0x00	; 0
     ee0:	e2 e3       	ldi	r30, 0x32	; 50
     ee2:	f0 e0       	ldi	r31, 0x00	; 0
     ee4:	80 81       	ld	r24, Z
     ee6:	48 2f       	mov	r20, r24
     ee8:	8b 81       	ldd	r24, Y+3	; 0x03
     eea:	28 2f       	mov	r18, r24
     eec:	30 e0       	ldi	r19, 0x00	; 0
     eee:	81 e0       	ldi	r24, 0x01	; 1
     ef0:	90 e0       	ldi	r25, 0x00	; 0
     ef2:	02 2e       	mov	r0, r18
     ef4:	02 c0       	rjmp	.+4      	; 0xefa <DIO_U8TogglePinValue+0xe8>
     ef6:	88 0f       	add	r24, r24
     ef8:	99 1f       	adc	r25, r25
     efa:	0a 94       	dec	r0
     efc:	e2 f7       	brpl	.-8      	; 0xef6 <DIO_U8TogglePinValue+0xe4>
     efe:	84 27       	eor	r24, r20
     f00:	8c 93       	st	X, r24
     f02:	02 c0       	rjmp	.+4      	; 0xf08 <DIO_U8TogglePinValue+0xf6>
				break;
			default : err_status = E_NOK;
     f04:	81 e0       	ldi	r24, 0x01	; 1
     f06:	89 83       	std	Y+1, r24	; 0x01
		}
	return err_status;
     f08:	89 81       	ldd	r24, Y+1	; 0x01
}
     f0a:	0f 90       	pop	r0
     f0c:	0f 90       	pop	r0
     f0e:	0f 90       	pop	r0
     f10:	0f 90       	pop	r0
     f12:	0f 90       	pop	r0
     f14:	cf 91       	pop	r28
     f16:	df 91       	pop	r29
     f18:	08 95       	ret

00000f1a <DIO_U8GetPinValue>:

uint8_t DIO_U8GetPinValue( uint8_t Copy_U8Port , uint8_t Copy_U8Pin, uint8_t *Copy_U8Value)
{
     f1a:	df 93       	push	r29
     f1c:	cf 93       	push	r28
     f1e:	cd b7       	in	r28, 0x3d	; 61
     f20:	de b7       	in	r29, 0x3e	; 62
     f22:	27 97       	sbiw	r28, 0x07	; 7
     f24:	0f b6       	in	r0, 0x3f	; 63
     f26:	f8 94       	cli
     f28:	de bf       	out	0x3e, r29	; 62
     f2a:	0f be       	out	0x3f, r0	; 63
     f2c:	cd bf       	out	0x3d, r28	; 61
     f2e:	8a 83       	std	Y+2, r24	; 0x02
     f30:	6b 83       	std	Y+3, r22	; 0x03
     f32:	5d 83       	std	Y+5, r21	; 0x05
     f34:	4c 83       	std	Y+4, r20	; 0x04
	uint8_t err_status = E_OK;
     f36:	19 82       	std	Y+1, r1	; 0x01

	switch(Copy_U8Port)
     f38:	8a 81       	ldd	r24, Y+2	; 0x02
     f3a:	28 2f       	mov	r18, r24
     f3c:	30 e0       	ldi	r19, 0x00	; 0
     f3e:	3f 83       	std	Y+7, r19	; 0x07
     f40:	2e 83       	std	Y+6, r18	; 0x06
     f42:	4e 81       	ldd	r20, Y+6	; 0x06
     f44:	5f 81       	ldd	r21, Y+7	; 0x07
     f46:	41 30       	cpi	r20, 0x01	; 1
     f48:	51 05       	cpc	r21, r1
     f4a:	59 f1       	breq	.+86     	; 0xfa2 <DIO_U8GetPinValue+0x88>
     f4c:	8e 81       	ldd	r24, Y+6	; 0x06
     f4e:	9f 81       	ldd	r25, Y+7	; 0x07
     f50:	82 30       	cpi	r24, 0x02	; 2
     f52:	91 05       	cpc	r25, r1
     f54:	34 f4       	brge	.+12     	; 0xf62 <DIO_U8GetPinValue+0x48>
     f56:	2e 81       	ldd	r18, Y+6	; 0x06
     f58:	3f 81       	ldd	r19, Y+7	; 0x07
     f5a:	21 15       	cp	r18, r1
     f5c:	31 05       	cpc	r19, r1
     f5e:	69 f0       	breq	.+26     	; 0xf7a <DIO_U8GetPinValue+0x60>
     f60:	5c c0       	rjmp	.+184    	; 0x101a <DIO_U8GetPinValue+0x100>
     f62:	4e 81       	ldd	r20, Y+6	; 0x06
     f64:	5f 81       	ldd	r21, Y+7	; 0x07
     f66:	42 30       	cpi	r20, 0x02	; 2
     f68:	51 05       	cpc	r21, r1
     f6a:	79 f1       	breq	.+94     	; 0xfca <DIO_U8GetPinValue+0xb0>
     f6c:	8e 81       	ldd	r24, Y+6	; 0x06
     f6e:	9f 81       	ldd	r25, Y+7	; 0x07
     f70:	83 30       	cpi	r24, 0x03	; 3
     f72:	91 05       	cpc	r25, r1
     f74:	09 f4       	brne	.+2      	; 0xf78 <DIO_U8GetPinValue+0x5e>
     f76:	3d c0       	rjmp	.+122    	; 0xff2 <DIO_U8GetPinValue+0xd8>
     f78:	50 c0       	rjmp	.+160    	; 0x101a <DIO_U8GetPinValue+0x100>
	{
		case DIO_PORTA :
			*Copy_U8Value =  GET_BIT( PINA , Copy_U8Pin );
     f7a:	e9 e3       	ldi	r30, 0x39	; 57
     f7c:	f0 e0       	ldi	r31, 0x00	; 0
     f7e:	80 81       	ld	r24, Z
     f80:	28 2f       	mov	r18, r24
     f82:	30 e0       	ldi	r19, 0x00	; 0
     f84:	8b 81       	ldd	r24, Y+3	; 0x03
     f86:	88 2f       	mov	r24, r24
     f88:	90 e0       	ldi	r25, 0x00	; 0
     f8a:	a9 01       	movw	r20, r18
     f8c:	02 c0       	rjmp	.+4      	; 0xf92 <DIO_U8GetPinValue+0x78>
     f8e:	55 95       	asr	r21
     f90:	47 95       	ror	r20
     f92:	8a 95       	dec	r24
     f94:	e2 f7       	brpl	.-8      	; 0xf8e <DIO_U8GetPinValue+0x74>
     f96:	ca 01       	movw	r24, r20
     f98:	81 70       	andi	r24, 0x01	; 1
     f9a:	ec 81       	ldd	r30, Y+4	; 0x04
     f9c:	fd 81       	ldd	r31, Y+5	; 0x05
     f9e:	80 83       	st	Z, r24
     fa0:	3e c0       	rjmp	.+124    	; 0x101e <DIO_U8GetPinValue+0x104>
			break;
		case DIO_PORTB :
			*Copy_U8Value = GET_BIT( PINB , Copy_U8Pin );
     fa2:	e6 e3       	ldi	r30, 0x36	; 54
     fa4:	f0 e0       	ldi	r31, 0x00	; 0
     fa6:	80 81       	ld	r24, Z
     fa8:	28 2f       	mov	r18, r24
     faa:	30 e0       	ldi	r19, 0x00	; 0
     fac:	8b 81       	ldd	r24, Y+3	; 0x03
     fae:	88 2f       	mov	r24, r24
     fb0:	90 e0       	ldi	r25, 0x00	; 0
     fb2:	a9 01       	movw	r20, r18
     fb4:	02 c0       	rjmp	.+4      	; 0xfba <DIO_U8GetPinValue+0xa0>
     fb6:	55 95       	asr	r21
     fb8:	47 95       	ror	r20
     fba:	8a 95       	dec	r24
     fbc:	e2 f7       	brpl	.-8      	; 0xfb6 <DIO_U8GetPinValue+0x9c>
     fbe:	ca 01       	movw	r24, r20
     fc0:	81 70       	andi	r24, 0x01	; 1
     fc2:	ec 81       	ldd	r30, Y+4	; 0x04
     fc4:	fd 81       	ldd	r31, Y+5	; 0x05
     fc6:	80 83       	st	Z, r24
     fc8:	2a c0       	rjmp	.+84     	; 0x101e <DIO_U8GetPinValue+0x104>
			break;
		case DIO_PORTC :
			*Copy_U8Value = GET_BIT( PINC , Copy_U8Pin );
     fca:	e3 e3       	ldi	r30, 0x33	; 51
     fcc:	f0 e0       	ldi	r31, 0x00	; 0
     fce:	80 81       	ld	r24, Z
     fd0:	28 2f       	mov	r18, r24
     fd2:	30 e0       	ldi	r19, 0x00	; 0
     fd4:	8b 81       	ldd	r24, Y+3	; 0x03
     fd6:	88 2f       	mov	r24, r24
     fd8:	90 e0       	ldi	r25, 0x00	; 0
     fda:	a9 01       	movw	r20, r18
     fdc:	02 c0       	rjmp	.+4      	; 0xfe2 <DIO_U8GetPinValue+0xc8>
     fde:	55 95       	asr	r21
     fe0:	47 95       	ror	r20
     fe2:	8a 95       	dec	r24
     fe4:	e2 f7       	brpl	.-8      	; 0xfde <DIO_U8GetPinValue+0xc4>
     fe6:	ca 01       	movw	r24, r20
     fe8:	81 70       	andi	r24, 0x01	; 1
     fea:	ec 81       	ldd	r30, Y+4	; 0x04
     fec:	fd 81       	ldd	r31, Y+5	; 0x05
     fee:	80 83       	st	Z, r24
     ff0:	16 c0       	rjmp	.+44     	; 0x101e <DIO_U8GetPinValue+0x104>
			break;
		case DIO_PORTD :
			*Copy_U8Value = GET_BIT( PIND , Copy_U8Pin );
     ff2:	e0 e3       	ldi	r30, 0x30	; 48
     ff4:	f0 e0       	ldi	r31, 0x00	; 0
     ff6:	80 81       	ld	r24, Z
     ff8:	28 2f       	mov	r18, r24
     ffa:	30 e0       	ldi	r19, 0x00	; 0
     ffc:	8b 81       	ldd	r24, Y+3	; 0x03
     ffe:	88 2f       	mov	r24, r24
    1000:	90 e0       	ldi	r25, 0x00	; 0
    1002:	a9 01       	movw	r20, r18
    1004:	02 c0       	rjmp	.+4      	; 0x100a <DIO_U8GetPinValue+0xf0>
    1006:	55 95       	asr	r21
    1008:	47 95       	ror	r20
    100a:	8a 95       	dec	r24
    100c:	e2 f7       	brpl	.-8      	; 0x1006 <DIO_U8GetPinValue+0xec>
    100e:	ca 01       	movw	r24, r20
    1010:	81 70       	andi	r24, 0x01	; 1
    1012:	ec 81       	ldd	r30, Y+4	; 0x04
    1014:	fd 81       	ldd	r31, Y+5	; 0x05
    1016:	80 83       	st	Z, r24
    1018:	02 c0       	rjmp	.+4      	; 0x101e <DIO_U8GetPinValue+0x104>
			break;
		default : err_status = E_NOK;
    101a:	81 e0       	ldi	r24, 0x01	; 1
    101c:	89 83       	std	Y+1, r24	; 0x01

	}
	return err_status;
    101e:	89 81       	ldd	r24, Y+1	; 0x01
}
    1020:	27 96       	adiw	r28, 0x07	; 7
    1022:	0f b6       	in	r0, 0x3f	; 63
    1024:	f8 94       	cli
    1026:	de bf       	out	0x3e, r29	; 62
    1028:	0f be       	out	0x3f, r0	; 63
    102a:	cd bf       	out	0x3d, r28	; 61
    102c:	cf 91       	pop	r28
    102e:	df 91       	pop	r29
    1030:	08 95       	ret

00001032 <delay_milliseconds>:
 * Description: Function to make delay in millisecond using NOP assembly instruction
 * Inputs: the required delay in millisecond
 * Output: void
 */
void delay_milliseconds (uint32_t Copy_U32OuterLoopIterations)
{
    1032:	df 93       	push	r29
    1034:	cf 93       	push	r28
    1036:	cd b7       	in	r28, 0x3d	; 61
    1038:	de b7       	in	r29, 0x3e	; 62
    103a:	2c 97       	sbiw	r28, 0x0c	; 12
    103c:	0f b6       	in	r0, 0x3f	; 63
    103e:	f8 94       	cli
    1040:	de bf       	out	0x3e, r29	; 62
    1042:	0f be       	out	0x3f, r0	; 63
    1044:	cd bf       	out	0x3d, r28	; 61
    1046:	69 87       	std	Y+9, r22	; 0x09
    1048:	7a 87       	std	Y+10, r23	; 0x0a
    104a:	8b 87       	std	Y+11, r24	; 0x0b
    104c:	9c 87       	std	Y+12, r25	; 0x0c

	uint32_t U32OuterLoopIndex = 0, U32InnerLoopIndex = 0;
    104e:	1d 82       	std	Y+5, r1	; 0x05
    1050:	1e 82       	std	Y+6, r1	; 0x06
    1052:	1f 82       	std	Y+7, r1	; 0x07
    1054:	18 86       	std	Y+8, r1	; 0x08
    1056:	19 82       	std	Y+1, r1	; 0x01
    1058:	1a 82       	std	Y+2, r1	; 0x02
    105a:	1b 82       	std	Y+3, r1	; 0x03
    105c:	1c 82       	std	Y+4, r1	; 0x04

	for(U32OuterLoopIndex = 0; U32OuterLoopIndex < Copy_U32OuterLoopIterations; U32OuterLoopIndex++)
    105e:	1d 82       	std	Y+5, r1	; 0x05
    1060:	1e 82       	std	Y+6, r1	; 0x06
    1062:	1f 82       	std	Y+7, r1	; 0x07
    1064:	18 86       	std	Y+8, r1	; 0x08
    1066:	28 c0       	rjmp	.+80     	; 0x10b8 <delay_milliseconds+0x86>
	{

		// This loop yields 1 millisecond

		for (U32InnerLoopIndex = 0; U32InnerLoopIndex < INNER_LOOP_ITERATIONS; U32InnerLoopIndex++)
    1068:	19 82       	std	Y+1, r1	; 0x01
    106a:	1a 82       	std	Y+2, r1	; 0x02
    106c:	1b 82       	std	Y+3, r1	; 0x03
    106e:	1c 82       	std	Y+4, r1	; 0x04
    1070:	0f c0       	rjmp	.+30     	; 0x1090 <delay_milliseconds+0x5e>
	...
    107a:	89 81       	ldd	r24, Y+1	; 0x01
    107c:	9a 81       	ldd	r25, Y+2	; 0x02
    107e:	ab 81       	ldd	r26, Y+3	; 0x03
    1080:	bc 81       	ldd	r27, Y+4	; 0x04
    1082:	01 96       	adiw	r24, 0x01	; 1
    1084:	a1 1d       	adc	r26, r1
    1086:	b1 1d       	adc	r27, r1
    1088:	89 83       	std	Y+1, r24	; 0x01
    108a:	9a 83       	std	Y+2, r25	; 0x02
    108c:	ab 83       	std	Y+3, r26	; 0x03
    108e:	bc 83       	std	Y+4, r27	; 0x04
    1090:	89 81       	ldd	r24, Y+1	; 0x01
    1092:	9a 81       	ldd	r25, Y+2	; 0x02
    1094:	ab 81       	ldd	r26, Y+3	; 0x03
    1096:	bc 81       	ldd	r27, Y+4	; 0x04
    1098:	80 3d       	cpi	r24, 0xD0	; 208
    109a:	91 05       	cpc	r25, r1
    109c:	a1 05       	cpc	r26, r1
    109e:	b1 05       	cpc	r27, r1
    10a0:	40 f3       	brcs	.-48     	; 0x1072 <delay_milliseconds+0x40>
void delay_milliseconds (uint32_t Copy_U32OuterLoopIterations)
{

	uint32_t U32OuterLoopIndex = 0, U32InnerLoopIndex = 0;

	for(U32OuterLoopIndex = 0; U32OuterLoopIndex < Copy_U32OuterLoopIterations; U32OuterLoopIndex++)
    10a2:	8d 81       	ldd	r24, Y+5	; 0x05
    10a4:	9e 81       	ldd	r25, Y+6	; 0x06
    10a6:	af 81       	ldd	r26, Y+7	; 0x07
    10a8:	b8 85       	ldd	r27, Y+8	; 0x08
    10aa:	01 96       	adiw	r24, 0x01	; 1
    10ac:	a1 1d       	adc	r26, r1
    10ae:	b1 1d       	adc	r27, r1
    10b0:	8d 83       	std	Y+5, r24	; 0x05
    10b2:	9e 83       	std	Y+6, r25	; 0x06
    10b4:	af 83       	std	Y+7, r26	; 0x07
    10b6:	b8 87       	std	Y+8, r27	; 0x08
    10b8:	2d 81       	ldd	r18, Y+5	; 0x05
    10ba:	3e 81       	ldd	r19, Y+6	; 0x06
    10bc:	4f 81       	ldd	r20, Y+7	; 0x07
    10be:	58 85       	ldd	r21, Y+8	; 0x08
    10c0:	89 85       	ldd	r24, Y+9	; 0x09
    10c2:	9a 85       	ldd	r25, Y+10	; 0x0a
    10c4:	ab 85       	ldd	r26, Y+11	; 0x0b
    10c6:	bc 85       	ldd	r27, Y+12	; 0x0c
    10c8:	28 17       	cp	r18, r24
    10ca:	39 07       	cpc	r19, r25
    10cc:	4a 07       	cpc	r20, r26
    10ce:	5b 07       	cpc	r21, r27
    10d0:	58 f2       	brcs	.-106    	; 0x1068 <delay_milliseconds+0x36>
			asm("NOP");
			asm("NOP");
		}
	}

}
    10d2:	2c 96       	adiw	r28, 0x0c	; 12
    10d4:	0f b6       	in	r0, 0x3f	; 63
    10d6:	f8 94       	cli
    10d8:	de bf       	out	0x3e, r29	; 62
    10da:	0f be       	out	0x3f, r0	; 63
    10dc:	cd bf       	out	0x3d, r28	; 61
    10de:	cf 91       	pop	r28
    10e0:	df 91       	pop	r29
    10e2:	08 95       	ret

000010e4 <keyPad_init>:
    { 4	, 5,  6	,},
    { 7	, 8,  9	,},
    {'*', 0, '#',}
};

void keyPad_init() {
    10e4:	df 93       	push	r29
    10e6:	cf 93       	push	r28
    10e8:	cd b7       	in	r28, 0x3d	; 61
    10ea:	de b7       	in	r29, 0x3e	; 62
	 // Set PC3, PC2, PC1, PC0 (rows) as outputs and PC6, PC5, PC4 (columns) as inputs
	    DIO_U8SetPinDirection(KEYPAD_GROUP, 0, DIO_OUTPUT);
    10ec:	82 e0       	ldi	r24, 0x02	; 2
    10ee:	60 e0       	ldi	r22, 0x00	; 0
    10f0:	41 e0       	ldi	r20, 0x01	; 1
    10f2:	0e 94 53 04 	call	0x8a6	; 0x8a6 <DIO_U8SetPinDirection>
	    DIO_U8SetPinDirection(KEYPAD_GROUP, 1, DIO_OUTPUT);
    10f6:	82 e0       	ldi	r24, 0x02	; 2
    10f8:	61 e0       	ldi	r22, 0x01	; 1
    10fa:	41 e0       	ldi	r20, 0x01	; 1
    10fc:	0e 94 53 04 	call	0x8a6	; 0x8a6 <DIO_U8SetPinDirection>
	    DIO_U8SetPinDirection(KEYPAD_GROUP, 2, DIO_OUTPUT);
    1100:	82 e0       	ldi	r24, 0x02	; 2
    1102:	62 e0       	ldi	r22, 0x02	; 2
    1104:	41 e0       	ldi	r20, 0x01	; 1
    1106:	0e 94 53 04 	call	0x8a6	; 0x8a6 <DIO_U8SetPinDirection>
	    DIO_U8SetPinDirection(KEYPAD_GROUP, 3, DIO_OUTPUT);
    110a:	82 e0       	ldi	r24, 0x02	; 2
    110c:	63 e0       	ldi	r22, 0x03	; 3
    110e:	41 e0       	ldi	r20, 0x01	; 1
    1110:	0e 94 53 04 	call	0x8a6	; 0x8a6 <DIO_U8SetPinDirection>
	    DIO_U8SetPinDirection(KEYPAD_GROUP, 4, DIO_INPUT);
    1114:	82 e0       	ldi	r24, 0x02	; 2
    1116:	64 e0       	ldi	r22, 0x04	; 4
    1118:	40 e0       	ldi	r20, 0x00	; 0
    111a:	0e 94 53 04 	call	0x8a6	; 0x8a6 <DIO_U8SetPinDirection>
	    DIO_U8SetPinDirection(KEYPAD_GROUP, 5, DIO_INPUT);
    111e:	82 e0       	ldi	r24, 0x02	; 2
    1120:	65 e0       	ldi	r22, 0x05	; 5
    1122:	40 e0       	ldi	r20, 0x00	; 0
    1124:	0e 94 53 04 	call	0x8a6	; 0x8a6 <DIO_U8SetPinDirection>
	    DIO_U8SetPinDirection(KEYPAD_GROUP, 6, DIO_INPUT);
    1128:	82 e0       	ldi	r24, 0x02	; 2
    112a:	66 e0       	ldi	r22, 0x06	; 6
    112c:	40 e0       	ldi	r20, 0x00	; 0
    112e:	0e 94 53 04 	call	0x8a6	; 0x8a6 <DIO_U8SetPinDirection>

	    // Enable pull-up resistors on column pins and set row pins high
	    DIO_U8SetPinValue(KEYPAD_GROUP, 3, DIO_HIGH);
    1132:	82 e0       	ldi	r24, 0x02	; 2
    1134:	63 e0       	ldi	r22, 0x03	; 3
    1136:	41 e0       	ldi	r20, 0x01	; 1
    1138:	0e 94 66 05 	call	0xacc	; 0xacc <DIO_U8SetPinValue>
	    DIO_U8SetPinValue(KEYPAD_GROUP, 2, DIO_HIGH);
    113c:	82 e0       	ldi	r24, 0x02	; 2
    113e:	62 e0       	ldi	r22, 0x02	; 2
    1140:	41 e0       	ldi	r20, 0x01	; 1
    1142:	0e 94 66 05 	call	0xacc	; 0xacc <DIO_U8SetPinValue>
	    DIO_U8SetPinValue(KEYPAD_GROUP, 1, DIO_HIGH);
    1146:	82 e0       	ldi	r24, 0x02	; 2
    1148:	61 e0       	ldi	r22, 0x01	; 1
    114a:	41 e0       	ldi	r20, 0x01	; 1
    114c:	0e 94 66 05 	call	0xacc	; 0xacc <DIO_U8SetPinValue>
	    DIO_U8SetPinValue(KEYPAD_GROUP, 0, DIO_HIGH);
    1150:	82 e0       	ldi	r24, 0x02	; 2
    1152:	60 e0       	ldi	r22, 0x00	; 0
    1154:	41 e0       	ldi	r20, 0x01	; 1
    1156:	0e 94 66 05 	call	0xacc	; 0xacc <DIO_U8SetPinValue>
	    DIO_U8SetPinValue(KEYPAD_GROUP, 6, DIO_HIGH);
    115a:	82 e0       	ldi	r24, 0x02	; 2
    115c:	66 e0       	ldi	r22, 0x06	; 6
    115e:	41 e0       	ldi	r20, 0x01	; 1
    1160:	0e 94 66 05 	call	0xacc	; 0xacc <DIO_U8SetPinValue>
	    DIO_U8SetPinValue(KEYPAD_GROUP, 5, DIO_HIGH);
    1164:	82 e0       	ldi	r24, 0x02	; 2
    1166:	65 e0       	ldi	r22, 0x05	; 5
    1168:	41 e0       	ldi	r20, 0x01	; 1
    116a:	0e 94 66 05 	call	0xacc	; 0xacc <DIO_U8SetPinValue>
	    DIO_U8SetPinValue(KEYPAD_GROUP, 4, DIO_HIGH);
    116e:	82 e0       	ldi	r24, 0x02	; 2
    1170:	64 e0       	ldi	r22, 0x04	; 4
    1172:	41 e0       	ldi	r20, 0x01	; 1
    1174:	0e 94 66 05 	call	0xacc	; 0xacc <DIO_U8SetPinValue>
}
    1178:	cf 91       	pop	r28
    117a:	df 91       	pop	r29
    117c:	08 95       	ret

0000117e <KeyPad_get_pressed_key>:

uint8_t KeyPad_get_pressed_key() {
    117e:	df 93       	push	r29
    1180:	cf 93       	push	r28
    1182:	00 d0       	rcall	.+0      	; 0x1184 <KeyPad_get_pressed_key+0x6>
    1184:	00 d0       	rcall	.+0      	; 0x1186 <KeyPad_get_pressed_key+0x8>
    1186:	0f 92       	push	r0
    1188:	cd b7       	in	r28, 0x3d	; 61
    118a:	de b7       	in	r29, 0x3e	; 62
    uint8_t cols_num = 0;
    118c:	1b 82       	std	Y+3, r1	; 0x03
    uint8_t rows_num = 0;
    118e:	1a 82       	std	Y+2, r1	; 0x02
    uint8_t retNum = 0xFF;
    1190:	8f ef       	ldi	r24, 0xFF	; 255
    1192:	89 83       	std	Y+1, r24	; 0x01

    for (rows_num = 0; rows_num < ROWS; rows_num++) {
    1194:	1a 82       	std	Y+2, r1	; 0x02
    1196:	4c c0       	rjmp	.+152    	; 0x1230 <KeyPad_get_pressed_key+0xb2>
        DIO_U8SetPinValue(KEYPAD_GROUP, rows_num, DIO_LOW);
    1198:	82 e0       	ldi	r24, 0x02	; 2
    119a:	6a 81       	ldd	r22, Y+2	; 0x02
    119c:	40 e0       	ldi	r20, 0x00	; 0
    119e:	0e 94 66 05 	call	0xacc	; 0xacc <DIO_U8SetPinValue>
        for (cols_num = 4; cols_num < 7; cols_num++) {
    11a2:	84 e0       	ldi	r24, 0x04	; 4
    11a4:	8b 83       	std	Y+3, r24	; 0x03
    11a6:	39 c0       	rjmp	.+114    	; 0x121a <KeyPad_get_pressed_key+0x9c>
            uint8_t pin_value;
            if (DIO_U8GetPinValue(KEYPAD_GROUP, cols_num, &pin_value) == E_OK && pin_value == 0) {
    11a8:	9e 01       	movw	r18, r28
    11aa:	2c 5f       	subi	r18, 0xFC	; 252
    11ac:	3f 4f       	sbci	r19, 0xFF	; 255
    11ae:	82 e0       	ldi	r24, 0x02	; 2
    11b0:	6b 81       	ldd	r22, Y+3	; 0x03
    11b2:	a9 01       	movw	r20, r18
    11b4:	0e 94 8d 07 	call	0xf1a	; 0xf1a <DIO_U8GetPinValue>
    11b8:	88 23       	and	r24, r24
    11ba:	31 f5       	brne	.+76     	; 0x1208 <KeyPad_get_pressed_key+0x8a>
    11bc:	8c 81       	ldd	r24, Y+4	; 0x04
    11be:	88 23       	and	r24, r24
    11c0:	19 f5       	brne	.+70     	; 0x1208 <KeyPad_get_pressed_key+0x8a>
                retNum = keypad_arr[rows_num][cols_num - 4];
    11c2:	8a 81       	ldd	r24, Y+2	; 0x02
    11c4:	28 2f       	mov	r18, r24
    11c6:	30 e0       	ldi	r19, 0x00	; 0
    11c8:	8b 81       	ldd	r24, Y+3	; 0x03
    11ca:	88 2f       	mov	r24, r24
    11cc:	90 e0       	ldi	r25, 0x00	; 0
    11ce:	ac 01       	movw	r20, r24
    11d0:	44 50       	subi	r20, 0x04	; 4
    11d2:	50 40       	sbci	r21, 0x00	; 0
    11d4:	c9 01       	movw	r24, r18
    11d6:	88 0f       	add	r24, r24
    11d8:	99 1f       	adc	r25, r25
    11da:	82 0f       	add	r24, r18
    11dc:	93 1f       	adc	r25, r19
    11de:	84 0f       	add	r24, r20
    11e0:	95 1f       	adc	r25, r21
    11e2:	fc 01       	movw	r30, r24
    11e4:	e2 5e       	subi	r30, 0xE2	; 226
    11e6:	fe 4f       	sbci	r31, 0xFE	; 254
    11e8:	80 81       	ld	r24, Z
    11ea:	89 83       	std	Y+1, r24	; 0x01
                delay_milliseconds(10);
    11ec:	6a e0       	ldi	r22, 0x0A	; 10
    11ee:	70 e0       	ldi	r23, 0x00	; 0
    11f0:	80 e0       	ldi	r24, 0x00	; 0
    11f2:	90 e0       	ldi	r25, 0x00	; 0
    11f4:	0e 94 19 08 	call	0x1032	; 0x1032 <delay_milliseconds>
                DIO_U8SetPinValue(KEYPAD_GROUP, rows_num, DIO_HIGH);
    11f8:	82 e0       	ldi	r24, 0x02	; 2
    11fa:	6a 81       	ldd	r22, Y+2	; 0x02
    11fc:	41 e0       	ldi	r20, 0x01	; 1
    11fe:	0e 94 66 05 	call	0xacc	; 0xacc <DIO_U8SetPinValue>
                return retNum;
    1202:	89 81       	ldd	r24, Y+1	; 0x01
    1204:	8d 83       	std	Y+5, r24	; 0x05
    1206:	1a c0       	rjmp	.+52     	; 0x123c <KeyPad_get_pressed_key+0xbe>
            }
            delay_milliseconds(10);
    1208:	6a e0       	ldi	r22, 0x0A	; 10
    120a:	70 e0       	ldi	r23, 0x00	; 0
    120c:	80 e0       	ldi	r24, 0x00	; 0
    120e:	90 e0       	ldi	r25, 0x00	; 0
    1210:	0e 94 19 08 	call	0x1032	; 0x1032 <delay_milliseconds>
    uint8_t rows_num = 0;
    uint8_t retNum = 0xFF;

    for (rows_num = 0; rows_num < ROWS; rows_num++) {
        DIO_U8SetPinValue(KEYPAD_GROUP, rows_num, DIO_LOW);
        for (cols_num = 4; cols_num < 7; cols_num++) {
    1214:	8b 81       	ldd	r24, Y+3	; 0x03
    1216:	8f 5f       	subi	r24, 0xFF	; 255
    1218:	8b 83       	std	Y+3, r24	; 0x03
    121a:	8b 81       	ldd	r24, Y+3	; 0x03
    121c:	87 30       	cpi	r24, 0x07	; 7
    121e:	20 f2       	brcs	.-120    	; 0x11a8 <KeyPad_get_pressed_key+0x2a>
                DIO_U8SetPinValue(KEYPAD_GROUP, rows_num, DIO_HIGH);
                return retNum;
            }
            delay_milliseconds(10);
        }
        DIO_U8SetPinValue(KEYPAD_GROUP, rows_num, DIO_HIGH);
    1220:	82 e0       	ldi	r24, 0x02	; 2
    1222:	6a 81       	ldd	r22, Y+2	; 0x02
    1224:	41 e0       	ldi	r20, 0x01	; 1
    1226:	0e 94 66 05 	call	0xacc	; 0xacc <DIO_U8SetPinValue>
uint8_t KeyPad_get_pressed_key() {
    uint8_t cols_num = 0;
    uint8_t rows_num = 0;
    uint8_t retNum = 0xFF;

    for (rows_num = 0; rows_num < ROWS; rows_num++) {
    122a:	8a 81       	ldd	r24, Y+2	; 0x02
    122c:	8f 5f       	subi	r24, 0xFF	; 255
    122e:	8a 83       	std	Y+2, r24	; 0x02
    1230:	8a 81       	ldd	r24, Y+2	; 0x02
    1232:	84 30       	cpi	r24, 0x04	; 4
    1234:	08 f4       	brcc	.+2      	; 0x1238 <KeyPad_get_pressed_key+0xba>
    1236:	b0 cf       	rjmp	.-160    	; 0x1198 <KeyPad_get_pressed_key+0x1a>
            }
            delay_milliseconds(10);
        }
        DIO_U8SetPinValue(KEYPAD_GROUP, rows_num, DIO_HIGH);
    }
    return retNum;
    1238:	89 81       	ldd	r24, Y+1	; 0x01
    123a:	8d 83       	std	Y+5, r24	; 0x05
    123c:	8d 81       	ldd	r24, Y+5	; 0x05
}
    123e:	0f 90       	pop	r0
    1240:	0f 90       	pop	r0
    1242:	0f 90       	pop	r0
    1244:	0f 90       	pop	r0
    1246:	0f 90       	pop	r0
    1248:	cf 91       	pop	r28
    124a:	df 91       	pop	r29
    124c:	08 95       	ret

0000124e <SERVO_u8Init>:
#include "../../MCAL/Timers/TMR_interface.h"
#include "../../MCAL/DIO/DIO_int.h"

#include "SERVO_interface.h"

void SERVO_u8Init(){
    124e:	df 93       	push	r29
    1250:	cf 93       	push	r28
    1252:	cd b7       	in	r28, 0x3d	; 61
    1254:	de b7       	in	r29, 0x3e	; 62
	TMR_vInit();
    1256:	0e 94 49 00 	call	0x92	; 0x92 <TMR_vInit>

	DIO_U8SetPinDirection(DIO_PORTD,DIO_PIN4,DIO_OUTPUT);
    125a:	83 e0       	ldi	r24, 0x03	; 3
    125c:	64 e0       	ldi	r22, 0x04	; 4
    125e:	41 e0       	ldi	r20, 0x01	; 1
    1260:	0e 94 53 04 	call	0x8a6	; 0x8a6 <DIO_U8SetPinDirection>

}
    1264:	cf 91       	pop	r28
    1266:	df 91       	pop	r29
    1268:	08 95       	ret

0000126a <SERVO_u8SetServoAngle>:
uint8_t SERVO_u8SetServoAngle (uint8_t Copy_U8Angle)
{
    126a:	df 93       	push	r29
    126c:	cf 93       	push	r28
    126e:	00 d0       	rcall	.+0      	; 0x1270 <SERVO_u8SetServoAngle+0x6>
    1270:	00 d0       	rcall	.+0      	; 0x1272 <SERVO_u8SetServoAngle+0x8>
    1272:	cd b7       	in	r28, 0x3d	; 61
    1274:	de b7       	in	r29, 0x3e	; 62
    1276:	8c 83       	std	Y+4, r24	; 0x04
	/*Local Variable holding the error state*/
	uint8_t Local_u8Error = ERROR_OK;
    1278:	1b 82       	std	Y+3, r1	; 0x03
	uint16_t Local_u16RequiredCompareValue;

	if (Copy_U8Angle <= 180)
    127a:	8c 81       	ldd	r24, Y+4	; 0x04
    127c:	85 3b       	cpi	r24, 0xB5	; 181
    127e:	c0 f4       	brcc	.+48     	; 0x12b0 <SERVO_u8SetServoAngle+0x46>
	{
		Local_u16RequiredCompareValue = (490+(11*Copy_U8Angle));
    1280:	8c 81       	ldd	r24, Y+4	; 0x04
    1282:	48 2f       	mov	r20, r24
    1284:	50 e0       	ldi	r21, 0x00	; 0
    1286:	ca 01       	movw	r24, r20
    1288:	88 0f       	add	r24, r24
    128a:	99 1f       	adc	r25, r25
    128c:	9c 01       	movw	r18, r24
    128e:	22 0f       	add	r18, r18
    1290:	33 1f       	adc	r19, r19
    1292:	22 0f       	add	r18, r18
    1294:	33 1f       	adc	r19, r19
    1296:	82 0f       	add	r24, r18
    1298:	93 1f       	adc	r25, r19
    129a:	84 0f       	add	r24, r20
    129c:	95 1f       	adc	r25, r21
    129e:	86 51       	subi	r24, 0x16	; 22
    12a0:	9e 4f       	sbci	r25, 0xFE	; 254
    12a2:	9a 83       	std	Y+2, r25	; 0x02
    12a4:	89 83       	std	Y+1, r24	; 0x01
		//Local_u16RequiredCompareValue =1000 + ((uint32_t)Copy_U8Angle * 1000 / 180);
		TMR_u8SetPWM (Local_u16RequiredCompareValue);
    12a6:	89 81       	ldd	r24, Y+1	; 0x01
    12a8:	9a 81       	ldd	r25, Y+2	; 0x02
    12aa:	0e 94 85 00 	call	0x10a	; 0x10a <TMR_u8SetPWM>
    12ae:	02 c0       	rjmp	.+4      	; 0x12b4 <SERVO_u8SetServoAngle+0x4a>
	}
	else
	{
		Local_u8Error = ERROR_NOK;
    12b0:	81 e0       	ldi	r24, 0x01	; 1
    12b2:	8b 83       	std	Y+3, r24	; 0x03
	}
	/*Function return*/
	return Local_u8Error;
    12b4:	8b 81       	ldd	r24, Y+3	; 0x03
}
    12b6:	0f 90       	pop	r0
    12b8:	0f 90       	pop	r0
    12ba:	0f 90       	pop	r0
    12bc:	0f 90       	pop	r0
    12be:	cf 91       	pop	r28
    12c0:	df 91       	pop	r29
    12c2:	08 95       	ret

000012c4 <LED_Init>:

#include "led.h"

#include "..\..\MCAL\DIO\DIO_int.h"

void LED_Init() {
    12c4:	df 93       	push	r29
    12c6:	cf 93       	push	r28
    12c8:	cd b7       	in	r28, 0x3d	; 61
    12ca:	de b7       	in	r29, 0x3e	; 62
    DIO_U8SetPinDirection(LED_GATE_CLOSED, DIO_OUTPUT);
    12cc:	83 e0       	ldi	r24, 0x03	; 3
    12ce:	61 e0       	ldi	r22, 0x01	; 1
    12d0:	41 e0       	ldi	r20, 0x01	; 1
    12d2:	0e 94 53 04 	call	0x8a6	; 0x8a6 <DIO_U8SetPinDirection>
    DIO_U8SetPinDirection(LED_GATE_OPEN, DIO_OUTPUT);
    12d6:	83 e0       	ldi	r24, 0x03	; 3
    12d8:	60 e0       	ldi	r22, 0x00	; 0
    12da:	41 e0       	ldi	r20, 0x01	; 1
    12dc:	0e 94 53 04 	call	0x8a6	; 0x8a6 <DIO_U8SetPinDirection>

}
    12e0:	cf 91       	pop	r28
    12e2:	df 91       	pop	r29
    12e4:	08 95       	ret

000012e6 <LED_On>:

void LED_On(uint8_t port, uint8_t pin) {
    12e6:	df 93       	push	r29
    12e8:	cf 93       	push	r28
    12ea:	00 d0       	rcall	.+0      	; 0x12ec <LED_On+0x6>
    12ec:	cd b7       	in	r28, 0x3d	; 61
    12ee:	de b7       	in	r29, 0x3e	; 62
    12f0:	89 83       	std	Y+1, r24	; 0x01
    12f2:	6a 83       	std	Y+2, r22	; 0x02
    DIO_U8SetPinValue(port, pin, DIO_HIGH);
    12f4:	89 81       	ldd	r24, Y+1	; 0x01
    12f6:	6a 81       	ldd	r22, Y+2	; 0x02
    12f8:	41 e0       	ldi	r20, 0x01	; 1
    12fa:	0e 94 66 05 	call	0xacc	; 0xacc <DIO_U8SetPinValue>
}
    12fe:	0f 90       	pop	r0
    1300:	0f 90       	pop	r0
    1302:	cf 91       	pop	r28
    1304:	df 91       	pop	r29
    1306:	08 95       	ret

00001308 <LED_Off>:

void LED_Off(uint8_t port, uint8_t pin) {
    1308:	df 93       	push	r29
    130a:	cf 93       	push	r28
    130c:	00 d0       	rcall	.+0      	; 0x130e <LED_Off+0x6>
    130e:	cd b7       	in	r28, 0x3d	; 61
    1310:	de b7       	in	r29, 0x3e	; 62
    1312:	89 83       	std	Y+1, r24	; 0x01
    1314:	6a 83       	std	Y+2, r22	; 0x02
    DIO_U8SetPinValue(port, pin, DIO_LOW);
    1316:	89 81       	ldd	r24, Y+1	; 0x01
    1318:	6a 81       	ldd	r22, Y+2	; 0x02
    131a:	40 e0       	ldi	r20, 0x00	; 0
    131c:	0e 94 66 05 	call	0xacc	; 0xacc <DIO_U8SetPinValue>
}
    1320:	0f 90       	pop	r0
    1322:	0f 90       	pop	r0
    1324:	cf 91       	pop	r28
    1326:	df 91       	pop	r29
    1328:	08 95       	ret

0000132a <LED_Toggle>:

void LED_Toggle(uint8_t port, uint8_t pin) {
    132a:	df 93       	push	r29
    132c:	cf 93       	push	r28
    132e:	00 d0       	rcall	.+0      	; 0x1330 <LED_Toggle+0x6>
    1330:	cd b7       	in	r28, 0x3d	; 61
    1332:	de b7       	in	r29, 0x3e	; 62
    1334:	89 83       	std	Y+1, r24	; 0x01
    1336:	6a 83       	std	Y+2, r22	; 0x02
    DIO_U8TogglePinValue(port, pin);
    1338:	89 81       	ldd	r24, Y+1	; 0x01
    133a:	6a 81       	ldd	r22, Y+2	; 0x02
    133c:	0e 94 09 07 	call	0xe12	; 0xe12 <DIO_U8TogglePinValue>
}
    1340:	0f 90       	pop	r0
    1342:	0f 90       	pop	r0
    1344:	cf 91       	pop	r28
    1346:	df 91       	pop	r29
    1348:	08 95       	ret

0000134a <LCD_VidInit>:
 * Description: Function to run some required commands at first as an initialization
 * Inputs: none
 * Output: void
 */
void LCD_VidInit (void)
{
    134a:	df 93       	push	r29
    134c:	cf 93       	push	r28
    134e:	cd b7       	in	r28, 0x3d	; 61
    1350:	de b7       	in	r29, 0x3e	; 62
	DIO_U8SetPortDirection(LCD_DataPort,DIO_PORT_OUT);
    1352:	80 e0       	ldi	r24, 0x00	; 0
    1354:	6f ef       	ldi	r22, 0xFF	; 255
    1356:	0e 94 79 06 	call	0xcf2	; 0xcf2 <DIO_U8SetPortDirection>
	DIO_U8SetPinDirection(LCD_ControlPort,LCD_U8_RS_PIN,DIO_OUTPUT);
    135a:	81 e0       	ldi	r24, 0x01	; 1
    135c:	60 e0       	ldi	r22, 0x00	; 0
    135e:	41 e0       	ldi	r20, 0x01	; 1
    1360:	0e 94 53 04 	call	0x8a6	; 0x8a6 <DIO_U8SetPinDirection>
	DIO_U8SetPinDirection(LCD_ControlPort,LCD_U8_RW_PIN,DIO_OUTPUT);
    1364:	81 e0       	ldi	r24, 0x01	; 1
    1366:	61 e0       	ldi	r22, 0x01	; 1
    1368:	41 e0       	ldi	r20, 0x01	; 1
    136a:	0e 94 53 04 	call	0x8a6	; 0x8a6 <DIO_U8SetPinDirection>
	DIO_U8SetPinDirection(LCD_ControlPort,LCD_U8_E_PIN,DIO_OUTPUT);
    136e:	81 e0       	ldi	r24, 0x01	; 1
    1370:	62 e0       	ldi	r22, 0x02	; 2
    1372:	41 e0       	ldi	r20, 0x01	; 1
    1374:	0e 94 53 04 	call	0x8a6	; 0x8a6 <DIO_U8SetPinDirection>


	delay_milliseconds (5);
    1378:	65 e0       	ldi	r22, 0x05	; 5
    137a:	70 e0       	ldi	r23, 0x00	; 0
    137c:	80 e0       	ldi	r24, 0x00	; 0
    137e:	90 e0       	ldi	r25, 0x00	; 0
    1380:	0e 94 19 08 	call	0x1032	; 0x1032 <delay_milliseconds>
	if (LCD_U8_MODE == LCD_U8_4BIT_MODE)
	{
		LCD_VidWriteCommand (0x33);
		LCD_VidWriteCommand (0x32);
	}
	LCD_VidWriteCommand (LCD_U8_INIT_FUNCTION_SET);
    1384:	88 e3       	ldi	r24, 0x38	; 56
    1386:	0e 94 e8 0a 	call	0x15d0	; 0x15d0 <LCD_VidWriteCommand>
	delay_milliseconds (2);
    138a:	62 e0       	ldi	r22, 0x02	; 2
    138c:	70 e0       	ldi	r23, 0x00	; 0
    138e:	80 e0       	ldi	r24, 0x00	; 0
    1390:	90 e0       	ldi	r25, 0x00	; 0
    1392:	0e 94 19 08 	call	0x1032	; 0x1032 <delay_milliseconds>
	LCD_VidWriteCommand (LCD_U8_INIT_DISPLAY_CONTROL);
    1396:	8e e0       	ldi	r24, 0x0E	; 14
    1398:	0e 94 e8 0a 	call	0x15d0	; 0x15d0 <LCD_VidWriteCommand>
	delay_milliseconds (2);
    139c:	62 e0       	ldi	r22, 0x02	; 2
    139e:	70 e0       	ldi	r23, 0x00	; 0
    13a0:	80 e0       	ldi	r24, 0x00	; 0
    13a2:	90 e0       	ldi	r25, 0x00	; 0
    13a4:	0e 94 19 08 	call	0x1032	; 0x1032 <delay_milliseconds>
	LCD_VidWriteCommand (LCD_U8_CLEAR);
    13a8:	81 e0       	ldi	r24, 0x01	; 1
    13aa:	0e 94 e8 0a 	call	0x15d0	; 0x15d0 <LCD_VidWriteCommand>
	delay_milliseconds (2);
    13ae:	62 e0       	ldi	r22, 0x02	; 2
    13b0:	70 e0       	ldi	r23, 0x00	; 0
    13b2:	80 e0       	ldi	r24, 0x00	; 0
    13b4:	90 e0       	ldi	r25, 0x00	; 0
    13b6:	0e 94 19 08 	call	0x1032	; 0x1032 <delay_milliseconds>
}
    13ba:	cf 91       	pop	r28
    13bc:	df 91       	pop	r29
    13be:	08 95       	ret

000013c0 <LCD_U8WriteString>:
 * Description: Function needed to send Data to the LCD
 * Inputs: The array of character needed to be displayed and it is required position in x & y axis
 * Output: Error state
 */
uint8_t LCD_U8WriteString (uint8_t *Copy_U8Data,uint8_t Copy_U8XPos,uint8_t Copy_U8YPos)
{
    13c0:	df 93       	push	r29
    13c2:	cf 93       	push	r28
    13c4:	00 d0       	rcall	.+0      	; 0x13c6 <LCD_U8WriteString+0x6>
    13c6:	00 d0       	rcall	.+0      	; 0x13c8 <LCD_U8WriteString+0x8>
    13c8:	00 d0       	rcall	.+0      	; 0x13ca <LCD_U8WriteString+0xa>
    13ca:	cd b7       	in	r28, 0x3d	; 61
    13cc:	de b7       	in	r29, 0x3e	; 62
    13ce:	9c 83       	std	Y+4, r25	; 0x04
    13d0:	8b 83       	std	Y+3, r24	; 0x03
    13d2:	6d 83       	std	Y+5, r22	; 0x05
    13d4:	4e 83       	std	Y+6, r20	; 0x06
	/*Local Variable holding the error state*/
	uint8_t Local_U8Error = ERROR_OK;
    13d6:	1a 82       	std	Y+2, r1	; 0x02
	uint8_t Local_U8Address;
	if ((Copy_U8XPos >= LCD_U8_COLOMN_NO) || (Copy_U8YPos >= LCD_U8_ROW_NO) || (Copy_U8Data == NULL))
    13d8:	8d 81       	ldd	r24, Y+5	; 0x05
    13da:	80 31       	cpi	r24, 0x10	; 16
    13dc:	38 f4       	brcc	.+14     	; 0x13ec <LCD_U8WriteString+0x2c>
    13de:	8e 81       	ldd	r24, Y+6	; 0x06
    13e0:	82 30       	cpi	r24, 0x02	; 2
    13e2:	20 f4       	brcc	.+8      	; 0x13ec <LCD_U8WriteString+0x2c>
    13e4:	8b 81       	ldd	r24, Y+3	; 0x03
    13e6:	9c 81       	ldd	r25, Y+4	; 0x04
    13e8:	00 97       	sbiw	r24, 0x00	; 0
    13ea:	19 f4       	brne	.+6      	; 0x13f2 <LCD_U8WriteString+0x32>
	{
		Local_U8Error = ERROR_NOK;
    13ec:	81 e0       	ldi	r24, 0x01	; 1
    13ee:	8a 83       	std	Y+2, r24	; 0x02
    13f0:	3a c0       	rjmp	.+116    	; 0x1466 <LCD_U8WriteString+0xa6>
	}
	else
	{
		Local_U8Address = Copy_U8XPos+(Copy_U8YPos*LCD_U8_2ND_ROW);
    13f2:	8e 81       	ldd	r24, Y+6	; 0x06
    13f4:	88 2f       	mov	r24, r24
    13f6:	90 e0       	ldi	r25, 0x00	; 0
    13f8:	00 24       	eor	r0, r0
    13fa:	96 95       	lsr	r25
    13fc:	87 95       	ror	r24
    13fe:	07 94       	ror	r0
    1400:	96 95       	lsr	r25
    1402:	87 95       	ror	r24
    1404:	07 94       	ror	r0
    1406:	98 2f       	mov	r25, r24
    1408:	80 2d       	mov	r24, r0
    140a:	98 2f       	mov	r25, r24
    140c:	8d 81       	ldd	r24, Y+5	; 0x05
    140e:	89 0f       	add	r24, r25
    1410:	89 83       	std	Y+1, r24	; 0x01
		Local_U8Address |= LCD_U8_SET_DDRAM_ADDRESS;
    1412:	89 81       	ldd	r24, Y+1	; 0x01
    1414:	80 68       	ori	r24, 0x80	; 128
    1416:	89 83       	std	Y+1, r24	; 0x01
		LCD_VidWriteCommand(Local_U8Address);
    1418:	89 81       	ldd	r24, Y+1	; 0x01
    141a:	0e 94 e8 0a 	call	0x15d0	; 0x15d0 <LCD_VidWriteCommand>
    141e:	1e c0       	rjmp	.+60     	; 0x145c <LCD_U8WriteString+0x9c>

		while (*Copy_U8Data != '\0')
		{
			LCD_VidWriteData(*Copy_U8Data++);
    1420:	eb 81       	ldd	r30, Y+3	; 0x03
    1422:	fc 81       	ldd	r31, Y+4	; 0x04
    1424:	20 81       	ld	r18, Z
    1426:	8b 81       	ldd	r24, Y+3	; 0x03
    1428:	9c 81       	ldd	r25, Y+4	; 0x04
    142a:	01 96       	adiw	r24, 0x01	; 1
    142c:	9c 83       	std	Y+4, r25	; 0x04
    142e:	8b 83       	std	Y+3, r24	; 0x03
    1430:	82 2f       	mov	r24, r18
    1432:	0e 94 d6 0a 	call	0x15ac	; 0x15ac <LCD_VidWriteData>
			Local_U8Address++;
    1436:	89 81       	ldd	r24, Y+1	; 0x01
    1438:	8f 5f       	subi	r24, 0xFF	; 255
    143a:	89 83       	std	Y+1, r24	; 0x01

			/* End of line 1 */
			if (Local_U8Address == LCD_U8_LINE1_END)
    143c:	89 81       	ldd	r24, Y+1	; 0x01
    143e:	80 39       	cpi	r24, 0x90	; 144
    1440:	29 f4       	brne	.+10     	; 0x144c <LCD_U8WriteString+0x8c>
			{
				/* Move the cursor to line 2 */
				Local_U8Address = LCD_U8_LINE2_START;
    1442:	80 ec       	ldi	r24, 0xC0	; 192
    1444:	89 83       	std	Y+1, r24	; 0x01
				LCD_VidWriteCommand(Local_U8Address);
    1446:	89 81       	ldd	r24, Y+1	; 0x01
    1448:	0e 94 e8 0a 	call	0x15d0	; 0x15d0 <LCD_VidWriteCommand>
			}

			/* End of line 2 */
			if (Local_U8Address == LCD_U8_LINE2_END)
    144c:	89 81       	ldd	r24, Y+1	; 0x01
    144e:	80 3d       	cpi	r24, 0xD0	; 208
    1450:	29 f4       	brne	.+10     	; 0x145c <LCD_U8WriteString+0x9c>
			{
				/* Move the cursor to line 1 */
				Local_U8Address = LCD_U8_SET_DDRAM_ADDRESS;
    1452:	80 e8       	ldi	r24, 0x80	; 128
    1454:	89 83       	std	Y+1, r24	; 0x01
				LCD_VidWriteCommand(Local_U8Address);
    1456:	89 81       	ldd	r24, Y+1	; 0x01
    1458:	0e 94 e8 0a 	call	0x15d0	; 0x15d0 <LCD_VidWriteCommand>
	{
		Local_U8Address = Copy_U8XPos+(Copy_U8YPos*LCD_U8_2ND_ROW);
		Local_U8Address |= LCD_U8_SET_DDRAM_ADDRESS;
		LCD_VidWriteCommand(Local_U8Address);

		while (*Copy_U8Data != '\0')
    145c:	eb 81       	ldd	r30, Y+3	; 0x03
    145e:	fc 81       	ldd	r31, Y+4	; 0x04
    1460:	80 81       	ld	r24, Z
    1462:	88 23       	and	r24, r24
    1464:	e9 f6       	brne	.-70     	; 0x1420 <LCD_U8WriteString+0x60>
				LCD_VidWriteCommand(Local_U8Address);
			}
		}
	}
	/*Function return*/
	return Local_U8Error;
    1466:	8a 81       	ldd	r24, Y+2	; 0x02
}
    1468:	26 96       	adiw	r28, 0x06	; 6
    146a:	0f b6       	in	r0, 0x3f	; 63
    146c:	f8 94       	cli
    146e:	de bf       	out	0x3e, r29	; 62
    1470:	0f be       	out	0x3f, r0	; 63
    1472:	cd bf       	out	0x3d, r28	; 61
    1474:	cf 91       	pop	r28
    1476:	df 91       	pop	r29
    1478:	08 95       	ret

0000147a <LCD_U8SaveSpecialWord>:
 * Description: Function save any word of special letters outside the asci scope
 * Inputs: pointer to the array of 8 patterns needed for each letter of this word and the word size
 * Output: Error state
 */
uint8_t LCD_U8SaveSpecialWord (uint8_t AU8_SymbolPattern[][8],uint8_t Copy_U8WordSize)
{
    147a:	df 93       	push	r29
    147c:	cf 93       	push	r28
    147e:	00 d0       	rcall	.+0      	; 0x1480 <LCD_U8SaveSpecialWord+0x6>
    1480:	00 d0       	rcall	.+0      	; 0x1482 <LCD_U8SaveSpecialWord+0x8>
    1482:	00 d0       	rcall	.+0      	; 0x1484 <LCD_U8SaveSpecialWord+0xa>
    1484:	cd b7       	in	r28, 0x3d	; 61
    1486:	de b7       	in	r29, 0x3e	; 62
    1488:	9d 83       	std	Y+5, r25	; 0x05
    148a:	8c 83       	std	Y+4, r24	; 0x04
    148c:	6e 83       	std	Y+6, r22	; 0x06
	/*Local Variable holding the error state*/
	uint8_t Local_U8Error = ERROR_OK;
    148e:	1b 82       	std	Y+3, r1	; 0x03
	uint8_t Local_U8Index1,Local_U8Index2;
	if (Copy_U8WordSize > LCD_U8_MAX_SYMBOL)
    1490:	8e 81       	ldd	r24, Y+6	; 0x06
    1492:	89 30       	cpi	r24, 0x09	; 9
    1494:	10 f0       	brcs	.+4      	; 0x149a <LCD_U8SaveSpecialWord+0x20>
	{
		Local_U8Error = ERROR_NOK;
    1496:	81 e0       	ldi	r24, 0x01	; 1
    1498:	8b 83       	std	Y+3, r24	; 0x03
	}
	LCD_VidWriteCommand(LCD_U8_SET_CGRAM_ADDRESS);
    149a:	80 e4       	ldi	r24, 0x40	; 64
    149c:	0e 94 e8 0a 	call	0x15d0	; 0x15d0 <LCD_VidWriteCommand>

	for (Local_U8Index1 = UNSIGNED_MIN ; Local_U8Index1 < Copy_U8WordSize ; Local_U8Index1++)
    14a0:	1a 82       	std	Y+2, r1	; 0x02
    14a2:	22 c0       	rjmp	.+68     	; 0x14e8 <LCD_U8SaveSpecialWord+0x6e>
	{
		for (Local_U8Index2 = UNSIGNED_MIN ; Local_U8Index2 < LCD_U8_CHARACTER_SIZE ; Local_U8Index2++)
    14a4:	19 82       	std	Y+1, r1	; 0x01
    14a6:	1a c0       	rjmp	.+52     	; 0x14dc <LCD_U8SaveSpecialWord+0x62>
		{
			LCD_VidWriteData(AU8_SymbolPattern[Local_U8Index1][Local_U8Index2]);
    14a8:	8a 81       	ldd	r24, Y+2	; 0x02
    14aa:	88 2f       	mov	r24, r24
    14ac:	90 e0       	ldi	r25, 0x00	; 0
    14ae:	9c 01       	movw	r18, r24
    14b0:	22 0f       	add	r18, r18
    14b2:	33 1f       	adc	r19, r19
    14b4:	22 0f       	add	r18, r18
    14b6:	33 1f       	adc	r19, r19
    14b8:	22 0f       	add	r18, r18
    14ba:	33 1f       	adc	r19, r19
    14bc:	8c 81       	ldd	r24, Y+4	; 0x04
    14be:	9d 81       	ldd	r25, Y+5	; 0x05
    14c0:	28 0f       	add	r18, r24
    14c2:	39 1f       	adc	r19, r25
    14c4:	89 81       	ldd	r24, Y+1	; 0x01
    14c6:	88 2f       	mov	r24, r24
    14c8:	90 e0       	ldi	r25, 0x00	; 0
    14ca:	f9 01       	movw	r30, r18
    14cc:	e8 0f       	add	r30, r24
    14ce:	f9 1f       	adc	r31, r25
    14d0:	80 81       	ld	r24, Z
    14d2:	0e 94 d6 0a 	call	0x15ac	; 0x15ac <LCD_VidWriteData>
	}
	LCD_VidWriteCommand(LCD_U8_SET_CGRAM_ADDRESS);

	for (Local_U8Index1 = UNSIGNED_MIN ; Local_U8Index1 < Copy_U8WordSize ; Local_U8Index1++)
	{
		for (Local_U8Index2 = UNSIGNED_MIN ; Local_U8Index2 < LCD_U8_CHARACTER_SIZE ; Local_U8Index2++)
    14d6:	89 81       	ldd	r24, Y+1	; 0x01
    14d8:	8f 5f       	subi	r24, 0xFF	; 255
    14da:	89 83       	std	Y+1, r24	; 0x01
    14dc:	89 81       	ldd	r24, Y+1	; 0x01
    14de:	88 30       	cpi	r24, 0x08	; 8
    14e0:	18 f3       	brcs	.-58     	; 0x14a8 <LCD_U8SaveSpecialWord+0x2e>
	{
		Local_U8Error = ERROR_NOK;
	}
	LCD_VidWriteCommand(LCD_U8_SET_CGRAM_ADDRESS);

	for (Local_U8Index1 = UNSIGNED_MIN ; Local_U8Index1 < Copy_U8WordSize ; Local_U8Index1++)
    14e2:	8a 81       	ldd	r24, Y+2	; 0x02
    14e4:	8f 5f       	subi	r24, 0xFF	; 255
    14e6:	8a 83       	std	Y+2, r24	; 0x02
    14e8:	9a 81       	ldd	r25, Y+2	; 0x02
    14ea:	8e 81       	ldd	r24, Y+6	; 0x06
    14ec:	98 17       	cp	r25, r24
    14ee:	d0 f2       	brcs	.-76     	; 0x14a4 <LCD_U8SaveSpecialWord+0x2a>
			LCD_VidWriteData(AU8_SymbolPattern[Local_U8Index1][Local_U8Index2]);
		}
	}

	/*Function return*/
	return Local_U8Error;
    14f0:	8b 81       	ldd	r24, Y+3	; 0x03
}
    14f2:	26 96       	adiw	r28, 0x06	; 6
    14f4:	0f b6       	in	r0, 0x3f	; 63
    14f6:	f8 94       	cli
    14f8:	de bf       	out	0x3e, r29	; 62
    14fa:	0f be       	out	0x3f, r0	; 63
    14fc:	cd bf       	out	0x3d, r28	; 61
    14fe:	cf 91       	pop	r28
    1500:	df 91       	pop	r29
    1502:	08 95       	ret

00001504 <LCD_U8SwriteSpecialSymbol>:
 * Description: Function to write a special word on the LCD
 * Inputs: the symbol index in the CGRAM and its required position on the LCD according to x & y axis
 * Output: Error state
 */
uint8_t LCD_U8SwriteSpecialSymbol (uint8_t Copy_U8SymbolIndex,uint8_t Copy_U8XPos,uint8_t Copy_U8YPos)
{
    1504:	df 93       	push	r29
    1506:	cf 93       	push	r28
    1508:	00 d0       	rcall	.+0      	; 0x150a <LCD_U8SwriteSpecialSymbol+0x6>
    150a:	00 d0       	rcall	.+0      	; 0x150c <LCD_U8SwriteSpecialSymbol+0x8>
    150c:	0f 92       	push	r0
    150e:	cd b7       	in	r28, 0x3d	; 61
    1510:	de b7       	in	r29, 0x3e	; 62
    1512:	8b 83       	std	Y+3, r24	; 0x03
    1514:	6c 83       	std	Y+4, r22	; 0x04
    1516:	4d 83       	std	Y+5, r20	; 0x05
	/*Local Variable holding the error state*/
	uint8_t Local_U8Error = ERROR_OK;
    1518:	1a 82       	std	Y+2, r1	; 0x02
	uint8_t Local_U8Address;
	if ((Copy_U8XPos >= LCD_U8_COLOMN_NO) || (Copy_U8YPos >= LCD_U8_ROW_NO))
    151a:	8c 81       	ldd	r24, Y+4	; 0x04
    151c:	80 31       	cpi	r24, 0x10	; 16
    151e:	18 f4       	brcc	.+6      	; 0x1526 <LCD_U8SwriteSpecialSymbol+0x22>
    1520:	8d 81       	ldd	r24, Y+5	; 0x05
    1522:	82 30       	cpi	r24, 0x02	; 2
    1524:	18 f0       	brcs	.+6      	; 0x152c <LCD_U8SwriteSpecialSymbol+0x28>
	{
		Local_U8Error = ERROR_NOK;
    1526:	81 e0       	ldi	r24, 0x01	; 1
    1528:	8a 83       	std	Y+2, r24	; 0x02
    152a:	19 c0       	rjmp	.+50     	; 0x155e <LCD_U8SwriteSpecialSymbol+0x5a>
	}
	else
	{
		Local_U8Address = Copy_U8XPos+(Copy_U8YPos*LCD_U8_2ND_ROW);
    152c:	8d 81       	ldd	r24, Y+5	; 0x05
    152e:	88 2f       	mov	r24, r24
    1530:	90 e0       	ldi	r25, 0x00	; 0
    1532:	00 24       	eor	r0, r0
    1534:	96 95       	lsr	r25
    1536:	87 95       	ror	r24
    1538:	07 94       	ror	r0
    153a:	96 95       	lsr	r25
    153c:	87 95       	ror	r24
    153e:	07 94       	ror	r0
    1540:	98 2f       	mov	r25, r24
    1542:	80 2d       	mov	r24, r0
    1544:	98 2f       	mov	r25, r24
    1546:	8c 81       	ldd	r24, Y+4	; 0x04
    1548:	89 0f       	add	r24, r25
    154a:	89 83       	std	Y+1, r24	; 0x01
		Local_U8Address |= LCD_U8_SET_DDRAM_ADDRESS;
    154c:	89 81       	ldd	r24, Y+1	; 0x01
    154e:	80 68       	ori	r24, 0x80	; 128
    1550:	89 83       	std	Y+1, r24	; 0x01
		LCD_VidWriteCommand(Local_U8Address);
    1552:	89 81       	ldd	r24, Y+1	; 0x01
    1554:	0e 94 e8 0a 	call	0x15d0	; 0x15d0 <LCD_VidWriteCommand>
		LCD_VidWriteData(Copy_U8SymbolIndex);
    1558:	8b 81       	ldd	r24, Y+3	; 0x03
    155a:	0e 94 d6 0a 	call	0x15ac	; 0x15ac <LCD_VidWriteData>
	}
	/*Function return*/
	return Local_U8Error;
    155e:	8a 81       	ldd	r24, Y+2	; 0x02
}
    1560:	0f 90       	pop	r0
    1562:	0f 90       	pop	r0
    1564:	0f 90       	pop	r0
    1566:	0f 90       	pop	r0
    1568:	0f 90       	pop	r0
    156a:	cf 91       	pop	r28
    156c:	df 91       	pop	r29
    156e:	08 95       	ret

00001570 <LCD_VidCLEAR>:
 * Description: Function to clear the LCD from any previous displayed data on it.
 * Inputs: none
 * Output: void
 */
void LCD_VidCLEAR(void)
{
    1570:	df 93       	push	r29
    1572:	cf 93       	push	r28
    1574:	cd b7       	in	r28, 0x3d	; 61
    1576:	de b7       	in	r29, 0x3e	; 62
	LCD_VidWriteCommand (LCD_U8_CLEAR);
    1578:	81 e0       	ldi	r24, 0x01	; 1
    157a:	0e 94 e8 0a 	call	0x15d0	; 0x15d0 <LCD_VidWriteCommand>
}
    157e:	cf 91       	pop	r28
    1580:	df 91       	pop	r29
    1582:	08 95       	ret

00001584 <LCD_VidShiftRight>:
 * Description: Function to shift the display to right
 * Inputs: none
 * Output: void
 */
void LCD_VidShiftRight(void)
{
    1584:	df 93       	push	r29
    1586:	cf 93       	push	r28
    1588:	cd b7       	in	r28, 0x3d	; 61
    158a:	de b7       	in	r29, 0x3e	; 62
	LCD_VidWriteCommand (LCD_U8_SHIFT_RIGHT);
    158c:	8c e1       	ldi	r24, 0x1C	; 28
    158e:	0e 94 e8 0a 	call	0x15d0	; 0x15d0 <LCD_VidWriteCommand>
}
    1592:	cf 91       	pop	r28
    1594:	df 91       	pop	r29
    1596:	08 95       	ret

00001598 <LCD_VidShiftLeft>:
 * Description: Function to shift the display to lift
 * Inputs: none
 * Output: void
 */
void LCD_VidShiftLeft(void)
{
    1598:	df 93       	push	r29
    159a:	cf 93       	push	r28
    159c:	cd b7       	in	r28, 0x3d	; 61
    159e:	de b7       	in	r29, 0x3e	; 62
	LCD_VidWriteCommand (LCD_U8_SHIFT_LEFT);
    15a0:	88 e1       	ldi	r24, 0x18	; 24
    15a2:	0e 94 e8 0a 	call	0x15d0	; 0x15d0 <LCD_VidWriteCommand>
}
    15a6:	cf 91       	pop	r28
    15a8:	df 91       	pop	r29
    15aa:	08 95       	ret

000015ac <LCD_VidWriteData>:
 * Description: Function needed to send Data to the LCD
 * Inputs: The data needed to be sent Data as a string or a single character
 * Output: Error state
 */
static void LCD_VidWriteData (uint8_t Copy_U8Data)
{
    15ac:	df 93       	push	r29
    15ae:	cf 93       	push	r28
    15b0:	0f 92       	push	r0
    15b2:	cd b7       	in	r28, 0x3d	; 61
    15b4:	de b7       	in	r29, 0x3e	; 62
    15b6:	89 83       	std	Y+1, r24	; 0x01
	DIO_U8SetPinValue(DIO_PORTB,LCD_U8_RS_PIN,DIO_HIGH);
    15b8:	81 e0       	ldi	r24, 0x01	; 1
    15ba:	60 e0       	ldi	r22, 0x00	; 0
    15bc:	41 e0       	ldi	r20, 0x01	; 1
    15be:	0e 94 66 05 	call	0xacc	; 0xacc <DIO_U8SetPinValue>
	U8Write(Copy_U8Data);
    15c2:	89 81       	ldd	r24, Y+1	; 0x01
    15c4:	0e 94 fa 0a 	call	0x15f4	; 0x15f4 <U8Write>
	return;
}
    15c8:	0f 90       	pop	r0
    15ca:	cf 91       	pop	r28
    15cc:	df 91       	pop	r29
    15ce:	08 95       	ret

000015d0 <LCD_VidWriteCommand>:
 * Description: Function needed to send Command to the LCD
 * Inputs: The command needed to be sent
 * Output: Error state
 */
static void LCD_VidWriteCommand (uint8_t Copy_U8Command)
{
    15d0:	df 93       	push	r29
    15d2:	cf 93       	push	r28
    15d4:	0f 92       	push	r0
    15d6:	cd b7       	in	r28, 0x3d	; 61
    15d8:	de b7       	in	r29, 0x3e	; 62
    15da:	89 83       	std	Y+1, r24	; 0x01
	DIO_U8SetPinValue (LCD_ControlPort,LCD_U8_RS_PIN,DIO_LOW);
    15dc:	81 e0       	ldi	r24, 0x01	; 1
    15de:	60 e0       	ldi	r22, 0x00	; 0
    15e0:	40 e0       	ldi	r20, 0x00	; 0
    15e2:	0e 94 66 05 	call	0xacc	; 0xacc <DIO_U8SetPinValue>
	U8Write (Copy_U8Command);
    15e6:	89 81       	ldd	r24, Y+1	; 0x01
    15e8:	0e 94 fa 0a 	call	0x15f4	; 0x15f4 <U8Write>
}
    15ec:	0f 90       	pop	r0
    15ee:	cf 91       	pop	r28
    15f0:	df 91       	pop	r29
    15f2:	08 95       	ret

000015f4 <U8Write>:
 * Description: Private function needed to send Data/Command to the LCD
 * Inputs: The data or the command needed to be sent
 * Output: Error state
 */
static uint8_t U8Write (uint8_t Copy_U8Data)
{
    15f4:	df 93       	push	r29
    15f6:	cf 93       	push	r28
    15f8:	00 d0       	rcall	.+0      	; 0x15fa <U8Write+0x6>
    15fa:	cd b7       	in	r28, 0x3d	; 61
    15fc:	de b7       	in	r29, 0x3e	; 62
    15fe:	8a 83       	std	Y+2, r24	; 0x02
	/*Local Variable holding the error state*/
	uint8_t Local_U8Error = ERROR_OK;
    1600:	19 82       	std	Y+1, r1	; 0x01

	Local_U8Error = DIO_U8SetPinValue (LCD_ControlPort,LCD_U8_E_PIN,DIO_LOW);
    1602:	81 e0       	ldi	r24, 0x01	; 1
    1604:	62 e0       	ldi	r22, 0x02	; 2
    1606:	40 e0       	ldi	r20, 0x00	; 0
    1608:	0e 94 66 05 	call	0xacc	; 0xacc <DIO_U8SetPinValue>
    160c:	89 83       	std	Y+1, r24	; 0x01
	Local_U8Error = DIO_U8SetPinValue (LCD_ControlPort,LCD_U8_RW_PIN,DIO_LOW);
    160e:	81 e0       	ldi	r24, 0x01	; 1
    1610:	61 e0       	ldi	r22, 0x01	; 1
    1612:	40 e0       	ldi	r20, 0x00	; 0
    1614:	0e 94 66 05 	call	0xacc	; 0xacc <DIO_U8SetPinValue>
    1618:	89 83       	std	Y+1, r24	; 0x01

	if (LCD_U8_MODE == LCD_U8_8BIT_MODE)
	{
		Local_U8Error = DIO_U8SetPortValue (LCD_DataPort , Copy_U8Data);
    161a:	80 e0       	ldi	r24, 0x00	; 0
    161c:	6a 81       	ldd	r22, Y+2	; 0x02
    161e:	0e 94 c1 06 	call	0xd82	; 0xd82 <DIO_U8SetPortValue>
    1622:	89 83       	std	Y+1, r24	; 0x01

		Local_U8Error = DIO_U8SetPinValue (LCD_ControlPort,LCD_U8_E_PIN,DIO_HIGH);
    1624:	81 e0       	ldi	r24, 0x01	; 1
    1626:	62 e0       	ldi	r22, 0x02	; 2
    1628:	41 e0       	ldi	r20, 0x01	; 1
    162a:	0e 94 66 05 	call	0xacc	; 0xacc <DIO_U8SetPinValue>
    162e:	89 83       	std	Y+1, r24	; 0x01
		delay_milliseconds (1);
    1630:	61 e0       	ldi	r22, 0x01	; 1
    1632:	70 e0       	ldi	r23, 0x00	; 0
    1634:	80 e0       	ldi	r24, 0x00	; 0
    1636:	90 e0       	ldi	r25, 0x00	; 0
    1638:	0e 94 19 08 	call	0x1032	; 0x1032 <delay_milliseconds>
		Local_U8Error = DIO_U8SetPinValue (LCD_ControlPort,LCD_U8_E_PIN,DIO_LOW);
    163c:	81 e0       	ldi	r24, 0x01	; 1
    163e:	62 e0       	ldi	r22, 0x02	; 2
    1640:	40 e0       	ldi	r20, 0x00	; 0
    1642:	0e 94 66 05 	call	0xacc	; 0xacc <DIO_U8SetPinValue>
    1646:	89 83       	std	Y+1, r24	; 0x01
		delay_milliseconds (5);
    1648:	65 e0       	ldi	r22, 0x05	; 5
    164a:	70 e0       	ldi	r23, 0x00	; 0
    164c:	80 e0       	ldi	r24, 0x00	; 0
    164e:	90 e0       	ldi	r25, 0x00	; 0
    1650:	0e 94 19 08 	call	0x1032	; 0x1032 <delay_milliseconds>
		delay_milliseconds (1);
		Local_U8Error = DIO_U8SetPinValue (LCD_ControlPort,LCD_U8_E_PIN,DIO_LOW);
		delay_milliseconds (5);
	}
	/*Function return*/
	return Local_U8Error;
    1654:	89 81       	ldd	r24, Y+1	; 0x01
}
    1656:	0f 90       	pop	r0
    1658:	0f 90       	pop	r0
    165a:	cf 91       	pop	r28
    165c:	df 91       	pop	r29
    165e:	08 95       	ret

00001660 <LCD_vidDisplayINT>:
extern void LCD_vidDisplayINT(uint16_t num)
{
    1660:	ef 92       	push	r14
    1662:	ff 92       	push	r15
    1664:	0f 93       	push	r16
    1666:	1f 93       	push	r17
    1668:	df 93       	push	r29
    166a:	cf 93       	push	r28
    166c:	00 d0       	rcall	.+0      	; 0x166e <LCD_vidDisplayINT+0xe>
    166e:	00 d0       	rcall	.+0      	; 0x1670 <LCD_vidDisplayINT+0x10>
    1670:	00 d0       	rcall	.+0      	; 0x1672 <LCD_vidDisplayINT+0x12>
    1672:	cd b7       	in	r28, 0x3d	; 61
    1674:	de b7       	in	r29, 0x3e	; 62
    1676:	9e 83       	std	Y+6, r25	; 0x06
    1678:	8d 83       	std	Y+5, r24	; 0x05

	uint32_t y=1;
    167a:	81 e0       	ldi	r24, 0x01	; 1
    167c:	90 e0       	ldi	r25, 0x00	; 0
    167e:	a0 e0       	ldi	r26, 0x00	; 0
    1680:	b0 e0       	ldi	r27, 0x00	; 0
    1682:	89 83       	std	Y+1, r24	; 0x01
    1684:	9a 83       	std	Y+2, r25	; 0x02
    1686:	ab 83       	std	Y+3, r26	; 0x03
    1688:	bc 83       	std	Y+4, r27	; 0x04
	if (num==0)
    168a:	8d 81       	ldd	r24, Y+5	; 0x05
    168c:	9e 81       	ldd	r25, Y+6	; 0x06
    168e:	00 97       	sbiw	r24, 0x00	; 0
    1690:	71 f5       	brne	.+92     	; 0x16ee <LCD_vidDisplayINT+0x8e>
		LCD_VidWriteData('0');
    1692:	80 e3       	ldi	r24, 0x30	; 48
    1694:	0e 94 d6 0a 	call	0x15ac	; 0x15ac <LCD_VidWriteData>
    1698:	2a c0       	rjmp	.+84     	; 0x16ee <LCD_vidDisplayINT+0x8e>
	if(num<0){
		LCD_VidWriteData('-');
		num=num*-1;
	}
	while(num !=0){
		y=((y*10)+(num%10));
    169a:	89 81       	ldd	r24, Y+1	; 0x01
    169c:	9a 81       	ldd	r25, Y+2	; 0x02
    169e:	ab 81       	ldd	r26, Y+3	; 0x03
    16a0:	bc 81       	ldd	r27, Y+4	; 0x04
    16a2:	2a e0       	ldi	r18, 0x0A	; 10
    16a4:	30 e0       	ldi	r19, 0x00	; 0
    16a6:	40 e0       	ldi	r20, 0x00	; 0
    16a8:	50 e0       	ldi	r21, 0x00	; 0
    16aa:	bc 01       	movw	r22, r24
    16ac:	cd 01       	movw	r24, r26
    16ae:	0e 94 05 0f 	call	0x1e0a	; 0x1e0a <__mulsi3>
    16b2:	7b 01       	movw	r14, r22
    16b4:	8c 01       	movw	r16, r24
    16b6:	8d 81       	ldd	r24, Y+5	; 0x05
    16b8:	9e 81       	ldd	r25, Y+6	; 0x06
    16ba:	2a e0       	ldi	r18, 0x0A	; 10
    16bc:	30 e0       	ldi	r19, 0x00	; 0
    16be:	b9 01       	movw	r22, r18
    16c0:	0e 94 24 0f 	call	0x1e48	; 0x1e48 <__udivmodhi4>
    16c4:	cc 01       	movw	r24, r24
    16c6:	a0 e0       	ldi	r26, 0x00	; 0
    16c8:	b0 e0       	ldi	r27, 0x00	; 0
    16ca:	8e 0d       	add	r24, r14
    16cc:	9f 1d       	adc	r25, r15
    16ce:	a0 1f       	adc	r26, r16
    16d0:	b1 1f       	adc	r27, r17
    16d2:	89 83       	std	Y+1, r24	; 0x01
    16d4:	9a 83       	std	Y+2, r25	; 0x02
    16d6:	ab 83       	std	Y+3, r26	; 0x03
    16d8:	bc 83       	std	Y+4, r27	; 0x04
		num=num/10;
    16da:	8d 81       	ldd	r24, Y+5	; 0x05
    16dc:	9e 81       	ldd	r25, Y+6	; 0x06
    16de:	2a e0       	ldi	r18, 0x0A	; 10
    16e0:	30 e0       	ldi	r19, 0x00	; 0
    16e2:	b9 01       	movw	r22, r18
    16e4:	0e 94 24 0f 	call	0x1e48	; 0x1e48 <__udivmodhi4>
    16e8:	cb 01       	movw	r24, r22
    16ea:	9e 83       	std	Y+6, r25	; 0x06
    16ec:	8d 83       	std	Y+5, r24	; 0x05
		LCD_VidWriteData('0');
	if(num<0){
		LCD_VidWriteData('-');
		num=num*-1;
	}
	while(num !=0){
    16ee:	8d 81       	ldd	r24, Y+5	; 0x05
    16f0:	9e 81       	ldd	r25, Y+6	; 0x06
    16f2:	00 97       	sbiw	r24, 0x00	; 0
    16f4:	91 f6       	brne	.-92     	; 0x169a <LCD_vidDisplayINT+0x3a>
    16f6:	23 c0       	rjmp	.+70     	; 0x173e <LCD_vidDisplayINT+0xde>
		y=((y*10)+(num%10));
		num=num/10;
	}
    while(y!=1){
    	LCD_VidWriteData((y%10)+'0');
    16f8:	89 81       	ldd	r24, Y+1	; 0x01
    16fa:	9a 81       	ldd	r25, Y+2	; 0x02
    16fc:	ab 81       	ldd	r26, Y+3	; 0x03
    16fe:	bc 81       	ldd	r27, Y+4	; 0x04
    1700:	2a e0       	ldi	r18, 0x0A	; 10
    1702:	30 e0       	ldi	r19, 0x00	; 0
    1704:	40 e0       	ldi	r20, 0x00	; 0
    1706:	50 e0       	ldi	r21, 0x00	; 0
    1708:	bc 01       	movw	r22, r24
    170a:	cd 01       	movw	r24, r26
    170c:	0e 94 38 0f 	call	0x1e70	; 0x1e70 <__udivmodsi4>
    1710:	dc 01       	movw	r26, r24
    1712:	cb 01       	movw	r24, r22
    1714:	80 5d       	subi	r24, 0xD0	; 208
    1716:	0e 94 d6 0a 	call	0x15ac	; 0x15ac <LCD_VidWriteData>
    	y=y/10;
    171a:	89 81       	ldd	r24, Y+1	; 0x01
    171c:	9a 81       	ldd	r25, Y+2	; 0x02
    171e:	ab 81       	ldd	r26, Y+3	; 0x03
    1720:	bc 81       	ldd	r27, Y+4	; 0x04
    1722:	2a e0       	ldi	r18, 0x0A	; 10
    1724:	30 e0       	ldi	r19, 0x00	; 0
    1726:	40 e0       	ldi	r20, 0x00	; 0
    1728:	50 e0       	ldi	r21, 0x00	; 0
    172a:	bc 01       	movw	r22, r24
    172c:	cd 01       	movw	r24, r26
    172e:	0e 94 38 0f 	call	0x1e70	; 0x1e70 <__udivmodsi4>
    1732:	da 01       	movw	r26, r20
    1734:	c9 01       	movw	r24, r18
    1736:	89 83       	std	Y+1, r24	; 0x01
    1738:	9a 83       	std	Y+2, r25	; 0x02
    173a:	ab 83       	std	Y+3, r26	; 0x03
    173c:	bc 83       	std	Y+4, r27	; 0x04
	}
	while(num !=0){
		y=((y*10)+(num%10));
		num=num/10;
	}
    while(y!=1){
    173e:	89 81       	ldd	r24, Y+1	; 0x01
    1740:	9a 81       	ldd	r25, Y+2	; 0x02
    1742:	ab 81       	ldd	r26, Y+3	; 0x03
    1744:	bc 81       	ldd	r27, Y+4	; 0x04
    1746:	81 30       	cpi	r24, 0x01	; 1
    1748:	91 05       	cpc	r25, r1
    174a:	a1 05       	cpc	r26, r1
    174c:	b1 05       	cpc	r27, r1
    174e:	a1 f6       	brne	.-88     	; 0x16f8 <LCD_vidDisplayINT+0x98>
    	LCD_VidWriteData((y%10)+'0');
    	y=y/10;
    }
}
    1750:	26 96       	adiw	r28, 0x06	; 6
    1752:	0f b6       	in	r0, 0x3f	; 63
    1754:	f8 94       	cli
    1756:	de bf       	out	0x3e, r29	; 62
    1758:	0f be       	out	0x3f, r0	; 63
    175a:	cd bf       	out	0x3d, r28	; 61
    175c:	cf 91       	pop	r28
    175e:	df 91       	pop	r29
    1760:	1f 91       	pop	r17
    1762:	0f 91       	pop	r16
    1764:	ff 90       	pop	r15
    1766:	ef 90       	pop	r14
    1768:	08 95       	ret

0000176a <IR_Init>:
#include "IR_interface.h"

/**
 * @brief Initializes the IR sensor module and sets up the external interrupt.
 */
void IR_Init(void) {
    176a:	df 93       	push	r29
    176c:	cf 93       	push	r28
    176e:	cd b7       	in	r28, 0x3d	; 61
    1770:	de b7       	in	r29, 0x3e	; 62
    // Set the IR sensor pin as input
    DIO_U8SetPinDirection(IR_PORT, IR_PIN, DIO_INPUT);
    1772:	83 e0       	ldi	r24, 0x03	; 3
    1774:	62 e0       	ldi	r22, 0x02	; 2
    1776:	40 e0       	ldi	r20, 0x00	; 0
    1778:	0e 94 53 04 	call	0x8a6	; 0x8a6 <DIO_U8SetPinDirection>
    DIO_U8SetPinValue(IR_PORT, IR_PIN, DIO_HIGH);
    177c:	83 e0       	ldi	r24, 0x03	; 3
    177e:	62 e0       	ldi	r22, 0x02	; 2
    1780:	41 e0       	ldi	r20, 0x01	; 1
    1782:	0e 94 66 05 	call	0xacc	; 0xacc <DIO_U8SetPinValue>
    // Initialize the external interrupt
    EXTI0_VoidInit();
    1786:	0e 94 f9 01 	call	0x3f2	; 0x3f2 <EXTI0_VoidInit>
    EXTI0_voidSetSenseControl(FAILING_EDGE);
    178a:	83 e0       	ldi	r24, 0x03	; 3
    178c:	0e 94 46 02 	call	0x48c	; 0x48c <EXTI0_voidSetSenseControl>
    EXTI0_voidEnable();
    1790:	0e 94 42 03 	call	0x684	; 0x684 <EXTI0_voidEnable>

}
    1794:	cf 91       	pop	r28
    1796:	df 91       	pop	r29
    1798:	08 95       	ret

0000179a <IR_SetCallback>:
/**
 * @brief Sets a callback function to be called when the IR sensor detects a car parked correctly.
 *
 * @param callback The callback function to set.
 */
void IR_SetCallback(void (*callback)(void)) {
    179a:	df 93       	push	r29
    179c:	cf 93       	push	r28
    179e:	00 d0       	rcall	.+0      	; 0x17a0 <IR_SetCallback+0x6>
    17a0:	cd b7       	in	r28, 0x3d	; 61
    17a2:	de b7       	in	r29, 0x3e	; 62
    17a4:	9a 83       	std	Y+2, r25	; 0x02
    17a6:	89 83       	std	Y+1, r24	; 0x01
    EXTI0_voidSetCallBack(callback);
    17a8:	89 81       	ldd	r24, Y+1	; 0x01
    17aa:	9a 81       	ldd	r25, Y+2	; 0x02
    17ac:	0e 94 96 03 	call	0x72c	; 0x72c <EXTI0_voidSetCallBack>
}
    17b0:	0f 90       	pop	r0
    17b2:	0f 90       	pop	r0
    17b4:	cf 91       	pop	r28
    17b6:	df 91       	pop	r29
    17b8:	08 95       	ret

000017ba <Button_Init>:
#include "Button_interface.h"

/**
 * @brief Initializes the Button sensor module and sets up the external interrupt.
 */
void Button_Init(void) {
    17ba:	df 93       	push	r29
    17bc:	cf 93       	push	r28
    17be:	cd b7       	in	r28, 0x3d	; 61
    17c0:	de b7       	in	r29, 0x3e	; 62
    // Set the Button sensor pin as input
    DIO_U8SetPinDirection(Button_PORT, Button_PIN, DIO_INPUT);
    17c2:	83 e0       	ldi	r24, 0x03	; 3
    17c4:	63 e0       	ldi	r22, 0x03	; 3
    17c6:	40 e0       	ldi	r20, 0x00	; 0
    17c8:	0e 94 53 04 	call	0x8a6	; 0x8a6 <DIO_U8SetPinDirection>
    // Initialize the external interrupt
    EXTI1_VoidInit();
    17cc:	0e 94 15 02 	call	0x42a	; 0x42a <EXTI1_VoidInit>
    EXTI1_voidSetSenseControl(FAILING_EDGE);
    17d0:	83 e0       	ldi	r24, 0x03	; 3
    17d2:	0e 94 ae 02 	call	0x55c	; 0x55c <EXTI1_voidSetSenseControl>
    EXTI1_voidEnable();
    17d6:	0e 94 5e 03 	call	0x6bc	; 0x6bc <EXTI1_voidEnable>

}
    17da:	cf 91       	pop	r28
    17dc:	df 91       	pop	r29
    17de:	08 95       	ret

000017e0 <Button_SetCallback>:
/**
 * @brief Sets a callback function to be called when the Button sensor detects a car parked correctly.
 *
 * @param callback The callback function to set.
 */
void Button_SetCallback(void (*callback)(void)) {
    17e0:	df 93       	push	r29
    17e2:	cf 93       	push	r28
    17e4:	00 d0       	rcall	.+0      	; 0x17e6 <Button_SetCallback+0x6>
    17e6:	cd b7       	in	r28, 0x3d	; 61
    17e8:	de b7       	in	r29, 0x3e	; 62
    17ea:	9a 83       	std	Y+2, r25	; 0x02
    17ec:	89 83       	std	Y+1, r24	; 0x01
    EXTI1_voidSetCallBack(callback);
    17ee:	89 81       	ldd	r24, Y+1	; 0x01
    17f0:	9a 81       	ldd	r25, Y+2	; 0x02
    17f2:	0e 94 a8 03 	call	0x750	; 0x750 <EXTI1_voidSetCallBack>
}
    17f6:	0f 90       	pop	r0
    17f8:	0f 90       	pop	r0
    17fa:	cf 91       	pop	r28
    17fc:	df 91       	pop	r29
    17fe:	08 95       	ret

00001800 <Slave_Comm_Init>:
#include "../../MCAL/DIO/DIO_int.h"


uint8_t response[SPI_BUFFER_SIZE];

void Slave_Comm_Init(void) {
    1800:	df 93       	push	r29
    1802:	cf 93       	push	r28
    1804:	cd b7       	in	r28, 0x3d	; 61
    1806:	de b7       	in	r29, 0x3e	; 62
    DIO_U8SetPinDirection(DIO_PORTB, DIO_PIN4, DIO_INPUT);
    1808:	81 e0       	ldi	r24, 0x01	; 1
    180a:	64 e0       	ldi	r22, 0x04	; 4
    180c:	40 e0       	ldi	r20, 0x00	; 0
    180e:	0e 94 53 04 	call	0x8a6	; 0x8a6 <DIO_U8SetPinDirection>
    DIO_U8SetPinDirection(DIO_PORTB, DIO_PIN5, DIO_INPUT);
    1812:	81 e0       	ldi	r24, 0x01	; 1
    1814:	65 e0       	ldi	r22, 0x05	; 5
    1816:	40 e0       	ldi	r20, 0x00	; 0
    1818:	0e 94 53 04 	call	0x8a6	; 0x8a6 <DIO_U8SetPinDirection>
    DIO_U8SetPinDirection(DIO_PORTB, DIO_PIN6, DIO_OUTPUT);
    181c:	81 e0       	ldi	r24, 0x01	; 1
    181e:	66 e0       	ldi	r22, 0x06	; 6
    1820:	41 e0       	ldi	r20, 0x01	; 1
    1822:	0e 94 53 04 	call	0x8a6	; 0x8a6 <DIO_U8SetPinDirection>
    DIO_U8SetPinDirection(DIO_PORTB, DIO_PIN7, DIO_INPUT);
    1826:	81 e0       	ldi	r24, 0x01	; 1
    1828:	67 e0       	ldi	r22, 0x07	; 7
    182a:	40 e0       	ldi	r20, 0x00	; 0
    182c:	0e 94 53 04 	call	0x8a6	; 0x8a6 <DIO_U8SetPinDirection>
    SPI_vInit(); // Initialize the SPI as a slave
    1830:	0e 94 9d 00 	call	0x13a	; 0x13a <SPI_vInit>

    DIO_U8SetPinDirection(REQUEST_SIGNAL_PORT, REQUEST_SIGNAL_PIN, DIO_OUTPUT); // Set the request signal pin as output
    1834:	81 e0       	ldi	r24, 0x01	; 1
    1836:	63 e0       	ldi	r22, 0x03	; 3
    1838:	41 e0       	ldi	r20, 0x01	; 1
    183a:	0e 94 53 04 	call	0x8a6	; 0x8a6 <DIO_U8SetPinDirection>


}
    183e:	cf 91       	pop	r28
    1840:	df 91       	pop	r29
    1842:	08 95       	ret

00001844 <Slave_ReceiveByte>:

void Slave_ReceiveByte(uint8_t*receivedByte ) {
    1844:	df 93       	push	r29
    1846:	cf 93       	push	r28
    1848:	00 d0       	rcall	.+0      	; 0x184a <Slave_ReceiveByte+0x6>
    184a:	cd b7       	in	r28, 0x3d	; 61
    184c:	de b7       	in	r29, 0x3e	; 62
    184e:	9a 83       	std	Y+2, r25	; 0x02
    1850:	89 83       	std	Y+1, r24	; 0x01

    SPI_u8ReceiveByte_Synch(receivedByte);
    1852:	89 81       	ldd	r24, Y+1	; 0x01
    1854:	9a 81       	ldd	r25, Y+2	; 0x02
    1856:	0e 94 b2 00 	call	0x164	; 0x164 <SPI_u8ReceiveByte_Synch>

}
    185a:	0f 90       	pop	r0
    185c:	0f 90       	pop	r0
    185e:	cf 91       	pop	r28
    1860:	df 91       	pop	r29
    1862:	08 95       	ret

00001864 <Slave_SendByte>:
void Slave_SendByte(uint8_t sent ) {
    1864:	df 93       	push	r29
    1866:	cf 93       	push	r28
    1868:	0f 92       	push	r0
    186a:	cd b7       	in	r28, 0x3d	; 61
    186c:	de b7       	in	r29, 0x3e	; 62
    186e:	89 83       	std	Y+1, r24	; 0x01

    SPI_u8SendByte_Synch(sent);
    1870:	89 81       	ldd	r24, Y+1	; 0x01
    1872:	0e 94 f0 00 	call	0x1e0	; 0x1e0 <SPI_u8SendByte_Synch>

}
    1876:	0f 90       	pop	r0
    1878:	cf 91       	pop	r28
    187a:	df 91       	pop	r29
    187c:	08 95       	ret

0000187e <Slave_Send_Request>:
void Slave_Send_Request(uint8_t* data) {//Park or retrive car
    187e:	df 93       	push	r29
    1880:	cf 93       	push	r28
    1882:	00 d0       	rcall	.+0      	; 0x1884 <Slave_Send_Request+0x6>
    1884:	cd b7       	in	r28, 0x3d	; 61
    1886:	de b7       	in	r29, 0x3e	; 62
    1888:	9a 83       	std	Y+2, r25	; 0x02
    188a:	89 83       	std	Y+1, r24	; 0x01

    DIO_U8SetPinValue(REQUEST_SIGNAL_PORT, REQUEST_SIGNAL_PIN, DIO_HIGH); // Signal the master
    188c:	81 e0       	ldi	r24, 0x01	; 1
    188e:	63 e0       	ldi	r22, 0x03	; 3
    1890:	41 e0       	ldi	r20, 0x01	; 1
    1892:	0e 94 66 05 	call	0xacc	; 0xacc <DIO_U8SetPinValue>
    Slave_Send_Data(data);
    1896:	89 81       	ldd	r24, Y+1	; 0x01
    1898:	9a 81       	ldd	r25, Y+2	; 0x02
    189a:	0e 94 59 0c 	call	0x18b2	; 0x18b2 <Slave_Send_Data>
    DIO_U8SetPinValue(REQUEST_SIGNAL_PORT, REQUEST_SIGNAL_PIN, DIO_LOW); // unSignal the master
    189e:	81 e0       	ldi	r24, 0x01	; 1
    18a0:	63 e0       	ldi	r22, 0x03	; 3
    18a2:	40 e0       	ldi	r20, 0x00	; 0
    18a4:	0e 94 66 05 	call	0xacc	; 0xacc <DIO_U8SetPinValue>
}
    18a8:	0f 90       	pop	r0
    18aa:	0f 90       	pop	r0
    18ac:	cf 91       	pop	r28
    18ae:	df 91       	pop	r29
    18b0:	08 95       	ret

000018b2 <Slave_Send_Data>:

void Slave_Send_Data(uint8_t* data) {
    18b2:	df 93       	push	r29
    18b4:	cf 93       	push	r28
    18b6:	00 d0       	rcall	.+0      	; 0x18b8 <Slave_Send_Data+0x6>
    18b8:	0f 92       	push	r0
    18ba:	cd b7       	in	r28, 0x3d	; 61
    18bc:	de b7       	in	r29, 0x3e	; 62
    18be:	9b 83       	std	Y+3, r25	; 0x03
    18c0:	8a 83       	std	Y+2, r24	; 0x02

    // Send data to the slave
    for (uint8_t i = 0; i < SPI_BUFFER_SIZE; i++) {
    18c2:	19 82       	std	Y+1, r1	; 0x01
    18c4:	0e c0       	rjmp	.+28     	; 0x18e2 <Slave_Send_Data+0x30>
        SPI_u8SendByte_Synch(data[i]);
    18c6:	89 81       	ldd	r24, Y+1	; 0x01
    18c8:	28 2f       	mov	r18, r24
    18ca:	30 e0       	ldi	r19, 0x00	; 0
    18cc:	8a 81       	ldd	r24, Y+2	; 0x02
    18ce:	9b 81       	ldd	r25, Y+3	; 0x03
    18d0:	fc 01       	movw	r30, r24
    18d2:	e2 0f       	add	r30, r18
    18d4:	f3 1f       	adc	r31, r19
    18d6:	80 81       	ld	r24, Z
    18d8:	0e 94 f0 00 	call	0x1e0	; 0x1e0 <SPI_u8SendByte_Synch>
}

void Slave_Send_Data(uint8_t* data) {

    // Send data to the slave
    for (uint8_t i = 0; i < SPI_BUFFER_SIZE; i++) {
    18dc:	89 81       	ldd	r24, Y+1	; 0x01
    18de:	8f 5f       	subi	r24, 0xFF	; 255
    18e0:	89 83       	std	Y+1, r24	; 0x01
    18e2:	89 81       	ldd	r24, Y+1	; 0x01
    18e4:	82 30       	cpi	r24, 0x02	; 2
    18e6:	78 f3       	brcs	.-34     	; 0x18c6 <Slave_Send_Data+0x14>
        SPI_u8SendByte_Synch(data[i]);
    }

}
    18e8:	0f 90       	pop	r0
    18ea:	0f 90       	pop	r0
    18ec:	0f 90       	pop	r0
    18ee:	cf 91       	pop	r28
    18f0:	df 91       	pop	r29
    18f2:	08 95       	ret

000018f4 <Slave_Receive_Data>:

void Slave_Receive_Data(uint8_t* buffer) {
    18f4:	df 93       	push	r29
    18f6:	cf 93       	push	r28
    18f8:	00 d0       	rcall	.+0      	; 0x18fa <Slave_Receive_Data+0x6>
    18fa:	0f 92       	push	r0
    18fc:	cd b7       	in	r28, 0x3d	; 61
    18fe:	de b7       	in	r29, 0x3e	; 62
    1900:	9b 83       	std	Y+3, r25	; 0x03
    1902:	8a 83       	std	Y+2, r24	; 0x02
    // Receive data from the slave
    for (uint8_t i = 0; i < SPI_BUFFER_SIZE; i++) {
    1904:	19 82       	std	Y+1, r1	; 0x01
    1906:	0c c0       	rjmp	.+24     	; 0x1920 <Slave_Receive_Data+0x2c>
        SPI_u8ReceiveByte_Synch(&buffer[i]); // Send dummy byte to receive data
    1908:	89 81       	ldd	r24, Y+1	; 0x01
    190a:	28 2f       	mov	r18, r24
    190c:	30 e0       	ldi	r19, 0x00	; 0
    190e:	8a 81       	ldd	r24, Y+2	; 0x02
    1910:	9b 81       	ldd	r25, Y+3	; 0x03
    1912:	82 0f       	add	r24, r18
    1914:	93 1f       	adc	r25, r19
    1916:	0e 94 b2 00 	call	0x164	; 0x164 <SPI_u8ReceiveByte_Synch>

}

void Slave_Receive_Data(uint8_t* buffer) {
    // Receive data from the slave
    for (uint8_t i = 0; i < SPI_BUFFER_SIZE; i++) {
    191a:	89 81       	ldd	r24, Y+1	; 0x01
    191c:	8f 5f       	subi	r24, 0xFF	; 255
    191e:	89 83       	std	Y+1, r24	; 0x01
    1920:	89 81       	ldd	r24, Y+1	; 0x01
    1922:	82 30       	cpi	r24, 0x02	; 2
    1924:	88 f3       	brcs	.-30     	; 0x1908 <Slave_Receive_Data+0x14>
        SPI_u8ReceiveByte_Synch(&buffer[i]); // Send dummy byte to receive data
    }

}
    1926:	0f 90       	pop	r0
    1928:	0f 90       	pop	r0
    192a:	0f 90       	pop	r0
    192c:	cf 91       	pop	r28
    192e:	df 91       	pop	r29
    1930:	08 95       	ret

00001932 <main>:
void handleCarDetection(void);
void handleButtonPress(void);
void processReceivedData(void);
void systemInit(void);

void main(void) {
    1932:	df 93       	push	r29
    1934:	cf 93       	push	r28
    1936:	00 d0       	rcall	.+0      	; 0x1938 <main+0x6>
    1938:	cd b7       	in	r28, 0x3d	; 61
    193a:	de b7       	in	r29, 0x3e	; 62
    uint16_t time_out = 0;
    193c:	1a 82       	std	Y+2, r1	; 0x02
    193e:	19 82       	std	Y+1, r1	; 0x01
    systemInit();
    1940:	0e 94 d9 0c 	call	0x19b2	; 0x19b2 <systemInit>

    while (1) {

        Slave_ReceiveByte(&ACK);
    1944:	81 e4       	ldi	r24, 0x41	; 65
    1946:	91 e0       	ldi	r25, 0x01	; 1
    1948:	0e 94 22 0c 	call	0x1844	; 0x1844 <Slave_ReceiveByte>
        if (ACK == 0x20){
    194c:	80 91 41 01 	lds	r24, 0x0141
    1950:	80 32       	cpi	r24, 0x20	; 32
    1952:	61 f4       	brne	.+24     	; 0x196c <main+0x3a>
            Slave_Receive_Data(RX_Data);
    1954:	8e e3       	ldi	r24, 0x3E	; 62
    1956:	91 e0       	ldi	r25, 0x01	; 1
    1958:	0e 94 7a 0c 	call	0x18f4	; 0x18f4 <Slave_Receive_Data>
			if (RX_Data[0] != 0xff)
    195c:	80 91 3e 01 	lds	r24, 0x013E
    1960:	8f 3f       	cpi	r24, 0xFF	; 255
    1962:	11 f0       	breq	.+4      	; 0x1968 <main+0x36>
			{
			processReceivedData();
    1964:	0e 94 02 0d 	call	0x1a04	; 0x1a04 <processReceivedData>
			}
			ACK=0;
    1968:	10 92 41 01 	sts	0x0141, r1
        }

        if (carDetectedFlag || buttonPressedFlag) {
    196c:	80 91 40 01 	lds	r24, 0x0140
    1970:	88 23       	and	r24, r24
    1972:	21 f4       	brne	.+8      	; 0x197c <main+0x4a>
    1974:	80 91 3d 01 	lds	r24, 0x013D
    1978:	88 23       	and	r24, r24
    197a:	69 f0       	breq	.+26     	; 0x1996 <main+0x64>
        	if (carDetectedFlag){
    197c:	80 91 40 01 	lds	r24, 0x0140
    1980:	88 23       	and	r24, r24
    1982:	29 f0       	breq	.+10     	; 0x198e <main+0x5c>
                carDetectedFlag = 0;
    1984:	10 92 40 01 	sts	0x0140, r1
                handleCarDetection();
    1988:	0e 94 0c 0e 	call	0x1c18	; 0x1c18 <handleCarDetection>
    198c:	04 c0       	rjmp	.+8      	; 0x1996 <main+0x64>
        	}
        	else{
                buttonPressedFlag = 0;
    198e:	10 92 3d 01 	sts	0x013D, r1
                handleButtonPress();
    1992:	0e 94 2a 0e 	call	0x1c54	; 0x1c54 <handleButtonPress>
        	}

        }
        if (time_out == 20000)
    1996:	89 81       	ldd	r24, Y+1	; 0x01
    1998:	9a 81       	ldd	r25, Y+2	; 0x02
    199a:	2e e4       	ldi	r18, 0x4E	; 78
    199c:	80 32       	cpi	r24, 0x20	; 32
    199e:	92 07       	cpc	r25, r18
    19a0:	11 f4       	brne	.+4      	; 0x19a6 <main+0x74>
            GIE_voidEnable();
    19a2:	0e 94 dd 01 	call	0x3ba	; 0x3ba <GIE_voidEnable>

        time_out++;
    19a6:	89 81       	ldd	r24, Y+1	; 0x01
    19a8:	9a 81       	ldd	r25, Y+2	; 0x02
    19aa:	01 96       	adiw	r24, 0x01	; 1
    19ac:	9a 83       	std	Y+2, r25	; 0x02
    19ae:	89 83       	std	Y+1, r24	; 0x01
    19b0:	c9 cf       	rjmp	.-110    	; 0x1944 <main+0x12>

000019b2 <systemInit>:
    }
}

void systemInit(void) {
    19b2:	df 93       	push	r29
    19b4:	cf 93       	push	r28
    19b6:	cd b7       	in	r28, 0x3d	; 61
    19b8:	de b7       	in	r29, 0x3e	; 62
	/*
	 * Makes absolutely no sense but some how the compiler wouldn't work fine without it
	 */


    Slave_Comm_Init();
    19ba:	0e 94 00 0c 	call	0x1800	; 0x1800 <Slave_Comm_Init>
    LCD_VidInit();
    19be:	0e 94 a5 09 	call	0x134a	; 0x134a <LCD_VidInit>
    LED_Init();
    19c2:	0e 94 62 09 	call	0x12c4	; 0x12c4 <LED_Init>
    keyPad_init();
    19c6:	0e 94 72 08 	call	0x10e4	; 0x10e4 <keyPad_init>
    IR_Init();
    19ca:	0e 94 b5 0b 	call	0x176a	; 0x176a <IR_Init>
    Button_Init();
    19ce:	0e 94 dd 0b 	call	0x17ba	; 0x17ba <Button_Init>
    SERVO_u8Init();
    19d2:	0e 94 27 09 	call	0x124e	; 0x124e <SERVO_u8Init>

    LED_On(LED_GATE_CLOSED);
    19d6:	83 e0       	ldi	r24, 0x03	; 3
    19d8:	61 e0       	ldi	r22, 0x01	; 1
    19da:	0e 94 73 09 	call	0x12e6	; 0x12e6 <LED_On>
    SERVO_u8SetServoAngle(0);
    19de:	80 e0       	ldi	r24, 0x00	; 0
    19e0:	0e 94 35 09 	call	0x126a	; 0x126a <SERVO_u8SetServoAngle>

    IR_SetCallback(carDetectedISR);
    19e4:	81 ef       	ldi	r24, 0xF1	; 241
    19e6:	9e e0       	ldi	r25, 0x0E	; 14
    19e8:	0e 94 cd 0b 	call	0x179a	; 0x179a <IR_SetCallback>
    Button_SetCallback(buttonPressedISR);
    19ec:	8b ef       	ldi	r24, 0xFB	; 251
    19ee:	9e e0       	ldi	r25, 0x0E	; 14
    19f0:	0e 94 f0 0b 	call	0x17e0	; 0x17e0 <Button_SetCallback>
    RX_Data[0] = 0xff;
    19f4:	8f ef       	ldi	r24, 0xFF	; 255
    19f6:	80 93 3e 01 	sts	0x013E, r24
    GIE_voidEnable();
    19fa:	0e 94 dd 01 	call	0x3ba	; 0x3ba <GIE_voidEnable>

}
    19fe:	cf 91       	pop	r28
    1a00:	df 91       	pop	r29
    1a02:	08 95       	ret

00001a04 <processReceivedData>:

void processReceivedData(void) {
    1a04:	df 93       	push	r29
    1a06:	cf 93       	push	r28
    1a08:	00 d0       	rcall	.+0      	; 0x1a0a <processReceivedData+0x6>
    1a0a:	cd b7       	in	r28, 0x3d	; 61
    1a0c:	de b7       	in	r29, 0x3e	; 62
        switch (RX_Data[0]) {
    1a0e:	80 91 3e 01 	lds	r24, 0x013E
    1a12:	28 2f       	mov	r18, r24
    1a14:	30 e0       	ldi	r19, 0x00	; 0
    1a16:	3a 83       	std	Y+2, r19	; 0x02
    1a18:	29 83       	std	Y+1, r18	; 0x01
    1a1a:	89 81       	ldd	r24, Y+1	; 0x01
    1a1c:	9a 81       	ldd	r25, Y+2	; 0x02
    1a1e:	8b 30       	cpi	r24, 0x0B	; 11
    1a20:	91 05       	cpc	r25, r1
    1a22:	09 f4       	brne	.+2      	; 0x1a26 <processReceivedData+0x22>
    1a24:	7a c0       	rjmp	.+244    	; 0x1b1a <processReceivedData+0x116>
    1a26:	29 81       	ldd	r18, Y+1	; 0x01
    1a28:	3a 81       	ldd	r19, Y+2	; 0x02
    1a2a:	2c 30       	cpi	r18, 0x0C	; 12
    1a2c:	31 05       	cpc	r19, r1
    1a2e:	8c f4       	brge	.+34     	; 0x1a52 <processReceivedData+0x4e>
    1a30:	89 81       	ldd	r24, Y+1	; 0x01
    1a32:	9a 81       	ldd	r25, Y+2	; 0x02
    1a34:	89 30       	cpi	r24, 0x09	; 9
    1a36:	91 05       	cpc	r25, r1
    1a38:	09 f4       	brne	.+2      	; 0x1a3c <processReceivedData+0x38>
    1a3a:	9e c0       	rjmp	.+316    	; 0x1b78 <processReceivedData+0x174>
    1a3c:	29 81       	ldd	r18, Y+1	; 0x01
    1a3e:	3a 81       	ldd	r19, Y+2	; 0x02
    1a40:	2a 30       	cpi	r18, 0x0A	; 10
    1a42:	31 05       	cpc	r19, r1
    1a44:	74 f5       	brge	.+92     	; 0x1aa2 <processReceivedData+0x9e>
    1a46:	89 81       	ldd	r24, Y+1	; 0x01
    1a48:	9a 81       	ldd	r25, Y+2	; 0x02
    1a4a:	88 30       	cpi	r24, 0x08	; 8
    1a4c:	91 05       	cpc	r25, r1
    1a4e:	a1 f0       	breq	.+40     	; 0x1a78 <processReceivedData+0x74>
    1a50:	d6 c0       	rjmp	.+428    	; 0x1bfe <processReceivedData+0x1fa>
    1a52:	29 81       	ldd	r18, Y+1	; 0x01
    1a54:	3a 81       	ldd	r19, Y+2	; 0x02
    1a56:	2d 30       	cpi	r18, 0x0D	; 13
    1a58:	31 05       	cpc	r19, r1
    1a5a:	09 f4       	brne	.+2      	; 0x1a5e <processReceivedData+0x5a>
    1a5c:	48 c0       	rjmp	.+144    	; 0x1aee <processReceivedData+0xea>
    1a5e:	89 81       	ldd	r24, Y+1	; 0x01
    1a60:	9a 81       	ldd	r25, Y+2	; 0x02
    1a62:	8d 30       	cpi	r24, 0x0D	; 13
    1a64:	91 05       	cpc	r25, r1
    1a66:	0c f4       	brge	.+2      	; 0x1a6a <processReceivedData+0x66>
    1a68:	98 c0       	rjmp	.+304    	; 0x1b9a <processReceivedData+0x196>
    1a6a:	29 81       	ldd	r18, Y+1	; 0x01
    1a6c:	3a 81       	ldd	r19, Y+2	; 0x02
    1a6e:	2e 30       	cpi	r18, 0x0E	; 14
    1a70:	31 05       	cpc	r19, r1
    1a72:	09 f4       	brne	.+2      	; 0x1a76 <processReceivedData+0x72>
    1a74:	ab c0       	rjmp	.+342    	; 0x1bcc <processReceivedData+0x1c8>
    1a76:	c3 c0       	rjmp	.+390    	; 0x1bfe <processReceivedData+0x1fa>
            case EMPTY_SLOT_FOUND:
                LCD_VidCLEAR();
    1a78:	0e 94 b8 0a 	call	0x1570	; 0x1570 <LCD_VidCLEAR>
                LCD_U8WriteString((uint8_t*)"Empty Slot ID: ", 0, 0);
    1a7c:	80 e6       	ldi	r24, 0x60	; 96
    1a7e:	90 e0       	ldi	r25, 0x00	; 0
    1a80:	60 e0       	ldi	r22, 0x00	; 0
    1a82:	40 e0       	ldi	r20, 0x00	; 0
    1a84:	0e 94 e0 09 	call	0x13c0	; 0x13c0 <LCD_U8WriteString>
                LCD_vidDisplayINT(RX_Data[1]);
    1a88:	80 91 3f 01 	lds	r24, 0x013F
    1a8c:	88 2f       	mov	r24, r24
    1a8e:	90 e0       	ldi	r25, 0x00	; 0
    1a90:	0e 94 30 0b 	call	0x1660	; 0x1660 <LCD_vidDisplayINT>
                ACK = 0xfc;
    1a94:	8c ef       	ldi	r24, 0xFC	; 252
    1a96:	80 93 41 01 	sts	0x0141, r24
                RX_Data[0] = 0xff;
    1a9a:	8f ef       	ldi	r24, 0xFF	; 255
    1a9c:	80 93 3e 01 	sts	0x013E, r24
    1aa0:	b6 c0       	rjmp	.+364    	; 0x1c0e <processReceivedData+0x20a>
                break;

            case REQUESTED_EMPTY_SLOT_READY:
                LCD_VidCLEAR();
    1aa2:	0e 94 b8 0a 	call	0x1570	; 0x1570 <LCD_VidCLEAR>
                SERVO_u8SetServoAngle(90);
    1aa6:	8a e5       	ldi	r24, 0x5A	; 90
    1aa8:	0e 94 35 09 	call	0x126a	; 0x126a <SERVO_u8SetServoAngle>
                LED_On(LED_GATE_OPEN);
    1aac:	83 e0       	ldi	r24, 0x03	; 3
    1aae:	60 e0       	ldi	r22, 0x00	; 0
    1ab0:	0e 94 73 09 	call	0x12e6	; 0x12e6 <LED_On>
                LED_Off(LED_GATE_CLOSED);
    1ab4:	83 e0       	ldi	r24, 0x03	; 3
    1ab6:	61 e0       	ldi	r22, 0x01	; 1
    1ab8:	0e 94 84 09 	call	0x1308	; 0x1308 <LED_Off>
                LCD_U8WriteString((uint8_t*)"Slot Ready!", 0, 0);
    1abc:	80 e7       	ldi	r24, 0x70	; 112
    1abe:	90 e0       	ldi	r25, 0x00	; 0
    1ac0:	60 e0       	ldi	r22, 0x00	; 0
    1ac2:	40 e0       	ldi	r20, 0x00	; 0
    1ac4:	0e 94 e0 09 	call	0x13c0	; 0x13c0 <LCD_U8WriteString>
                LCD_U8WriteString((uint8_t*)"ID: ", 0, 1);
    1ac8:	8c e7       	ldi	r24, 0x7C	; 124
    1aca:	90 e0       	ldi	r25, 0x00	; 0
    1acc:	60 e0       	ldi	r22, 0x00	; 0
    1ace:	41 e0       	ldi	r20, 0x01	; 1
    1ad0:	0e 94 e0 09 	call	0x13c0	; 0x13c0 <LCD_U8WriteString>
                LCD_vidDisplayINT(RX_Data[1]);
    1ad4:	80 91 3f 01 	lds	r24, 0x013F
    1ad8:	88 2f       	mov	r24, r24
    1ada:	90 e0       	ldi	r25, 0x00	; 0
    1adc:	0e 94 30 0b 	call	0x1660	; 0x1660 <LCD_vidDisplayINT>
                RX_Data[0] = 0xff;
    1ae0:	8f ef       	ldi	r24, 0xFF	; 255
    1ae2:	80 93 3e 01 	sts	0x013E, r24
                ACK = 0xfc;
    1ae6:	8c ef       	ldi	r24, 0xFC	; 252
    1ae8:	80 93 41 01 	sts	0x0141, r24
    1aec:	90 c0       	rjmp	.+288    	; 0x1c0e <processReceivedData+0x20a>

                break;

            case CLOSE_GATE:
                SERVO_u8SetServoAngle(0);
    1aee:	80 e0       	ldi	r24, 0x00	; 0
    1af0:	0e 94 35 09 	call	0x126a	; 0x126a <SERVO_u8SetServoAngle>
                LED_Off(LED_GATE_OPEN);
    1af4:	83 e0       	ldi	r24, 0x03	; 3
    1af6:	60 e0       	ldi	r22, 0x00	; 0
    1af8:	0e 94 84 09 	call	0x1308	; 0x1308 <LED_Off>
                LED_On(LED_GATE_CLOSED);
    1afc:	83 e0       	ldi	r24, 0x03	; 3
    1afe:	61 e0       	ldi	r22, 0x01	; 1
    1b00:	0e 94 73 09 	call	0x12e6	; 0x12e6 <LED_On>
                LCD_VidCLEAR();
    1b04:	0e 94 b8 0a 	call	0x1570	; 0x1570 <LCD_VidCLEAR>
                RX_Data[0] = 0xff;
    1b08:	8f ef       	ldi	r24, 0xFF	; 255
    1b0a:	80 93 3e 01 	sts	0x013E, r24
                ACK = 0xfc;
    1b0e:	8c ef       	ldi	r24, 0xFC	; 252
    1b10:	80 93 41 01 	sts	0x0141, r24
                GIE_voidEnable();
    1b14:	0e 94 dd 01 	call	0x3ba	; 0x3ba <GIE_voidEnable>
    1b18:	7a c0       	rjmp	.+244    	; 0x1c0e <processReceivedData+0x20a>
                break;

            case REQUESTED_CAR_READY:
                LCD_VidCLEAR();
    1b1a:	0e 94 b8 0a 	call	0x1570	; 0x1570 <LCD_VidCLEAR>
                LCD_U8WriteString((uint8_t*)"Car is Ready", 0, 0);
    1b1e:	81 e8       	ldi	r24, 0x81	; 129
    1b20:	90 e0       	ldi	r25, 0x00	; 0
    1b22:	60 e0       	ldi	r22, 0x00	; 0
    1b24:	40 e0       	ldi	r20, 0x00	; 0
    1b26:	0e 94 e0 09 	call	0x13c0	; 0x13c0 <LCD_U8WriteString>
                SERVO_u8SetServoAngle(90);
    1b2a:	8a e5       	ldi	r24, 0x5A	; 90
    1b2c:	0e 94 35 09 	call	0x126a	; 0x126a <SERVO_u8SetServoAngle>
                LED_On(LED_GATE_OPEN);
    1b30:	83 e0       	ldi	r24, 0x03	; 3
    1b32:	60 e0       	ldi	r22, 0x00	; 0
    1b34:	0e 94 73 09 	call	0x12e6	; 0x12e6 <LED_On>
                LED_Off(LED_GATE_CLOSED);
    1b38:	83 e0       	ldi	r24, 0x03	; 3
    1b3a:	61 e0       	ldi	r22, 0x01	; 1
    1b3c:	0e 94 84 09 	call	0x1308	; 0x1308 <LED_Off>
                delay_milliseconds(3000);
    1b40:	68 eb       	ldi	r22, 0xB8	; 184
    1b42:	7b e0       	ldi	r23, 0x0B	; 11
    1b44:	80 e0       	ldi	r24, 0x00	; 0
    1b46:	90 e0       	ldi	r25, 0x00	; 0
    1b48:	0e 94 19 08 	call	0x1032	; 0x1032 <delay_milliseconds>
                SERVO_u8SetServoAngle(0);
    1b4c:	80 e0       	ldi	r24, 0x00	; 0
    1b4e:	0e 94 35 09 	call	0x126a	; 0x126a <SERVO_u8SetServoAngle>
                LED_Off(LED_GATE_OPEN);
    1b52:	83 e0       	ldi	r24, 0x03	; 3
    1b54:	60 e0       	ldi	r22, 0x00	; 0
    1b56:	0e 94 84 09 	call	0x1308	; 0x1308 <LED_Off>
                LED_On(LED_GATE_CLOSED);
    1b5a:	83 e0       	ldi	r24, 0x03	; 3
    1b5c:	61 e0       	ldi	r22, 0x01	; 1
    1b5e:	0e 94 73 09 	call	0x12e6	; 0x12e6 <LED_On>
                LCD_VidCLEAR();
    1b62:	0e 94 b8 0a 	call	0x1570	; 0x1570 <LCD_VidCLEAR>
                RX_Data[0] = 0xff;
    1b66:	8f ef       	ldi	r24, 0xFF	; 255
    1b68:	80 93 3e 01 	sts	0x013E, r24
                ACK = 0xfc;
    1b6c:	8c ef       	ldi	r24, 0xFC	; 252
    1b6e:	80 93 41 01 	sts	0x0141, r24
                GIE_voidEnable();
    1b72:	0e 94 dd 01 	call	0x3ba	; 0x3ba <GIE_voidEnable>
    1b76:	4b c0       	rjmp	.+150    	; 0x1c0e <processReceivedData+0x20a>
                break;

            case NO_EMPTY_SLOT:
                LCD_VidCLEAR();
    1b78:	0e 94 b8 0a 	call	0x1570	; 0x1570 <LCD_VidCLEAR>
                LCD_U8WriteString((uint8_t*)"No Empty Slot", 0, 0);
    1b7c:	8e e8       	ldi	r24, 0x8E	; 142
    1b7e:	90 e0       	ldi	r25, 0x00	; 0
    1b80:	60 e0       	ldi	r22, 0x00	; 0
    1b82:	40 e0       	ldi	r20, 0x00	; 0
    1b84:	0e 94 e0 09 	call	0x13c0	; 0x13c0 <LCD_U8WriteString>

                RX_Data[0] = 0xff;
    1b88:	8f ef       	ldi	r24, 0xFF	; 255
    1b8a:	80 93 3e 01 	sts	0x013E, r24
                ACK = 0xfc;
    1b8e:	8c ef       	ldi	r24, 0xFC	; 252
    1b90:	80 93 41 01 	sts	0x0141, r24
                GIE_voidEnable();
    1b94:	0e 94 dd 01 	call	0x3ba	; 0x3ba <GIE_voidEnable>
    1b98:	3a c0       	rjmp	.+116    	; 0x1c0e <processReceivedData+0x20a>
                break;

            case WRONG_SLOT_ID:
                LCD_VidCLEAR();
    1b9a:	0e 94 b8 0a 	call	0x1570	; 0x1570 <LCD_VidCLEAR>
                LCD_U8WriteString((uint8_t*)"Wrong Slot ID!", 0, 0);
    1b9e:	8c e9       	ldi	r24, 0x9C	; 156
    1ba0:	90 e0       	ldi	r25, 0x00	; 0
    1ba2:	60 e0       	ldi	r22, 0x00	; 0
    1ba4:	40 e0       	ldi	r20, 0x00	; 0
    1ba6:	0e 94 e0 09 	call	0x13c0	; 0x13c0 <LCD_U8WriteString>
                delay_milliseconds(1000);
    1baa:	68 ee       	ldi	r22, 0xE8	; 232
    1bac:	73 e0       	ldi	r23, 0x03	; 3
    1bae:	80 e0       	ldi	r24, 0x00	; 0
    1bb0:	90 e0       	ldi	r25, 0x00	; 0
    1bb2:	0e 94 19 08 	call	0x1032	; 0x1032 <delay_milliseconds>
                LCD_VidCLEAR();
    1bb6:	0e 94 b8 0a 	call	0x1570	; 0x1570 <LCD_VidCLEAR>

                RX_Data[0] = 0xff;
    1bba:	8f ef       	ldi	r24, 0xFF	; 255
    1bbc:	80 93 3e 01 	sts	0x013E, r24
                ACK = 0xfc;
    1bc0:	8c ef       	ldi	r24, 0xFC	; 252
    1bc2:	80 93 41 01 	sts	0x0141, r24
                GIE_voidEnable();
    1bc6:	0e 94 dd 01 	call	0x3ba	; 0x3ba <GIE_voidEnable>
    1bca:	21 c0       	rjmp	.+66     	; 0x1c0e <processReceivedData+0x20a>
                break;
            case UNKNOWN_REQUEST:
            	LCD_VidCLEAR();
    1bcc:	0e 94 b8 0a 	call	0x1570	; 0x1570 <LCD_VidCLEAR>
            	LCD_U8WriteString((uint8_t*)"UNKNOWN REQUEST", 0, 0);
    1bd0:	8b ea       	ldi	r24, 0xAB	; 171
    1bd2:	90 e0       	ldi	r25, 0x00	; 0
    1bd4:	60 e0       	ldi	r22, 0x00	; 0
    1bd6:	40 e0       	ldi	r20, 0x00	; 0
    1bd8:	0e 94 e0 09 	call	0x13c0	; 0x13c0 <LCD_U8WriteString>
            	delay_milliseconds(1000);
    1bdc:	68 ee       	ldi	r22, 0xE8	; 232
    1bde:	73 e0       	ldi	r23, 0x03	; 3
    1be0:	80 e0       	ldi	r24, 0x00	; 0
    1be2:	90 e0       	ldi	r25, 0x00	; 0
    1be4:	0e 94 19 08 	call	0x1032	; 0x1032 <delay_milliseconds>
				LCD_VidCLEAR();
    1be8:	0e 94 b8 0a 	call	0x1570	; 0x1570 <LCD_VidCLEAR>
				RX_Data[0] = 0xff;
    1bec:	8f ef       	ldi	r24, 0xFF	; 255
    1bee:	80 93 3e 01 	sts	0x013E, r24
				ACK = 0xfc;
    1bf2:	8c ef       	ldi	r24, 0xFC	; 252
    1bf4:	80 93 41 01 	sts	0x0141, r24
				GIE_voidEnable();
    1bf8:	0e 94 dd 01 	call	0x3ba	; 0x3ba <GIE_voidEnable>
    1bfc:	08 c0       	rjmp	.+16     	; 0x1c0e <processReceivedData+0x20a>
            	break;
            default:
                RX_Data[0] = 0xff;
    1bfe:	8f ef       	ldi	r24, 0xFF	; 255
    1c00:	80 93 3e 01 	sts	0x013E, r24
                ACK = 0xfc;
    1c04:	8c ef       	ldi	r24, 0xFC	; 252
    1c06:	80 93 41 01 	sts	0x0141, r24
                GIE_voidEnable();
    1c0a:	0e 94 dd 01 	call	0x3ba	; 0x3ba <GIE_voidEnable>
                break;
        }

}
    1c0e:	0f 90       	pop	r0
    1c10:	0f 90       	pop	r0
    1c12:	cf 91       	pop	r28
    1c14:	df 91       	pop	r29
    1c16:	08 95       	ret

00001c18 <handleCarDetection>:

void handleCarDetection(void) {
    1c18:	df 93       	push	r29
    1c1a:	cf 93       	push	r28
    1c1c:	cd b7       	in	r28, 0x3d	; 61
    1c1e:	de b7       	in	r29, 0x3e	; 62
    GIE_voidDisable();
    1c20:	0e 94 eb 01 	call	0x3d6	; 0x3d6 <GIE_voidDisable>
    LCD_VidCLEAR();
    1c24:	0e 94 b8 0a 	call	0x1570	; 0x1570 <LCD_VidCLEAR>
    LCD_U8WriteString((uint8_t*)"Welcome To Smart Parking system", 0, 0);
    1c28:	8b eb       	ldi	r24, 0xBB	; 187
    1c2a:	90 e0       	ldi	r25, 0x00	; 0
    1c2c:	60 e0       	ldi	r22, 0x00	; 0
    1c2e:	40 e0       	ldi	r20, 0x00	; 0
    1c30:	0e 94 e0 09 	call	0x13c0	; 0x13c0 <LCD_U8WriteString>
    delay_milliseconds(999);
    1c34:	67 ee       	ldi	r22, 0xE7	; 231
    1c36:	73 e0       	ldi	r23, 0x03	; 3
    1c38:	80 e0       	ldi	r24, 0x00	; 0
    1c3a:	90 e0       	ldi	r25, 0x00	; 0
    1c3c:	0e 94 19 08 	call	0x1032	; 0x1032 <delay_milliseconds>
    TX_Data[0] = REQUEST_PARK_CAR;
    1c40:	86 e0       	ldi	r24, 0x06	; 6
    1c42:	80 93 3b 01 	sts	0x013B, r24
    Slave_Send_Request(TX_Data);
    1c46:	8b e3       	ldi	r24, 0x3B	; 59
    1c48:	91 e0       	ldi	r25, 0x01	; 1
    1c4a:	0e 94 3f 0c 	call	0x187e	; 0x187e <Slave_Send_Request>
}
    1c4e:	cf 91       	pop	r28
    1c50:	df 91       	pop	r29
    1c52:	08 95       	ret

00001c54 <handleButtonPress>:

void handleButtonPress(void) {
    1c54:	df 93       	push	r29
    1c56:	cf 93       	push	r28
    1c58:	00 d0       	rcall	.+0      	; 0x1c5a <handleButtonPress+0x6>
    1c5a:	00 d0       	rcall	.+0      	; 0x1c5c <handleButtonPress+0x8>
    1c5c:	0f 92       	push	r0
    1c5e:	cd b7       	in	r28, 0x3d	; 61
    1c60:	de b7       	in	r29, 0x3e	; 62
    GIE_voidDisable();
    1c62:	0e 94 eb 01 	call	0x3d6	; 0x3d6 <GIE_voidDisable>
    uint8_t int_time_out = 0;
    1c66:	1d 82       	std	Y+5, r1	; 0x05
    LCD_VidCLEAR();
    1c68:	0e 94 b8 0a 	call	0x1570	; 0x1570 <LCD_VidCLEAR>
    LCD_U8WriteString((uint8_t*)"Welcome To Smart Parking system", 0, 0);
    1c6c:	8b eb       	ldi	r24, 0xBB	; 187
    1c6e:	90 e0       	ldi	r25, 0x00	; 0
    1c70:	60 e0       	ldi	r22, 0x00	; 0
    1c72:	40 e0       	ldi	r20, 0x00	; 0
    1c74:	0e 94 e0 09 	call	0x13c0	; 0x13c0 <LCD_U8WriteString>
    uint8_t action = 0xFF;
    1c78:	8f ef       	ldi	r24, 0xFF	; 255
    1c7a:	8c 83       	std	Y+4, r24	; 0x04
    uint16_t timeout =30;
    1c7c:	8e e1       	ldi	r24, 0x1E	; 30
    1c7e:	90 e0       	ldi	r25, 0x00	; 0
    1c80:	9b 83       	std	Y+3, r25	; 0x03
    1c82:	8a 83       	std	Y+2, r24	; 0x02
    delay_milliseconds(999);
    1c84:	67 ee       	ldi	r22, 0xE7	; 231
    1c86:	73 e0       	ldi	r23, 0x03	; 3
    1c88:	80 e0       	ldi	r24, 0x00	; 0
    1c8a:	90 e0       	ldi	r25, 0x00	; 0
    1c8c:	0e 94 19 08 	call	0x1032	; 0x1032 <delay_milliseconds>
    1c90:	9c c0       	rjmp	.+312    	; 0x1dca <handleButtonPress+0x176>

    while (int_time_out <= 2) {
        LCD_VidCLEAR();
    1c92:	0e 94 b8 0a 	call	0x1570	; 0x1570 <LCD_VidCLEAR>

        if (int_time_out >= 2) {
    1c96:	8d 81       	ldd	r24, Y+5	; 0x05
    1c98:	82 30       	cpi	r24, 0x02	; 2
    1c9a:	28 f0       	brcs	.+10     	; 0x1ca6 <handleButtonPress+0x52>
            GIE_voidEnable();
    1c9c:	0e 94 dd 01 	call	0x3ba	; 0x3ba <GIE_voidEnable>
            LCD_VidCLEAR();
    1ca0:	0e 94 b8 0a 	call	0x1570	; 0x1570 <LCD_VidCLEAR>
    1ca4:	96 c0       	rjmp	.+300    	; 0x1dd2 <handleButtonPress+0x17e>
            return;
        }
        LCD_U8WriteString((uint8_t*)"1:Park Car", 0, 0);
    1ca6:	8b ed       	ldi	r24, 0xDB	; 219
    1ca8:	90 e0       	ldi	r25, 0x00	; 0
    1caa:	60 e0       	ldi	r22, 0x00	; 0
    1cac:	40 e0       	ldi	r20, 0x00	; 0
    1cae:	0e 94 e0 09 	call	0x13c0	; 0x13c0 <LCD_U8WriteString>
        LCD_U8WriteString((uint8_t*)"2:Retrieve Car", 0, 1);
    1cb2:	86 ee       	ldi	r24, 0xE6	; 230
    1cb4:	90 e0       	ldi	r25, 0x00	; 0
    1cb6:	60 e0       	ldi	r22, 0x00	; 0
    1cb8:	41 e0       	ldi	r20, 0x01	; 1
    1cba:	0e 94 e0 09 	call	0x13c0	; 0x13c0 <LCD_U8WriteString>
        timeout = 30;
    1cbe:	8e e1       	ldi	r24, 0x1E	; 30
    1cc0:	90 e0       	ldi	r25, 0x00	; 0
    1cc2:	9b 83       	std	Y+3, r25	; 0x03
    1cc4:	8a 83       	std	Y+2, r24	; 0x02
    1cc6:	11 c0       	rjmp	.+34     	; 0x1cea <handleButtonPress+0x96>
        while (timeout > 0) {
            action = KeyPad_get_pressed_key();
    1cc8:	0e 94 bf 08 	call	0x117e	; 0x117e <KeyPad_get_pressed_key>
    1ccc:	8c 83       	std	Y+4, r24	; 0x04
            if (action != 0xFF) {
    1cce:	8c 81       	ldd	r24, Y+4	; 0x04
    1cd0:	8f 3f       	cpi	r24, 0xFF	; 255
    1cd2:	79 f4       	brne	.+30     	; 0x1cf2 <handleButtonPress+0x9e>
                break;
            }
            delay_milliseconds(1);
    1cd4:	61 e0       	ldi	r22, 0x01	; 1
    1cd6:	70 e0       	ldi	r23, 0x00	; 0
    1cd8:	80 e0       	ldi	r24, 0x00	; 0
    1cda:	90 e0       	ldi	r25, 0x00	; 0
    1cdc:	0e 94 19 08 	call	0x1032	; 0x1032 <delay_milliseconds>
            timeout--;
    1ce0:	8a 81       	ldd	r24, Y+2	; 0x02
    1ce2:	9b 81       	ldd	r25, Y+3	; 0x03
    1ce4:	01 97       	sbiw	r24, 0x01	; 1
    1ce6:	9b 83       	std	Y+3, r25	; 0x03
    1ce8:	8a 83       	std	Y+2, r24	; 0x02
            return;
        }
        LCD_U8WriteString((uint8_t*)"1:Park Car", 0, 0);
        LCD_U8WriteString((uint8_t*)"2:Retrieve Car", 0, 1);
        timeout = 30;
        while (timeout > 0) {
    1cea:	8a 81       	ldd	r24, Y+2	; 0x02
    1cec:	9b 81       	ldd	r25, Y+3	; 0x03
    1cee:	00 97       	sbiw	r24, 0x00	; 0
    1cf0:	59 f7       	brne	.-42     	; 0x1cc8 <handleButtonPress+0x74>
            }
            delay_milliseconds(1);
            timeout--;
        }

        if (action == 1 || action == 2) {
    1cf2:	8c 81       	ldd	r24, Y+4	; 0x04
    1cf4:	81 30       	cpi	r24, 0x01	; 1
    1cf6:	21 f0       	breq	.+8      	; 0x1d00 <handleButtonPress+0xac>
    1cf8:	8c 81       	ldd	r24, Y+4	; 0x04
    1cfa:	82 30       	cpi	r24, 0x02	; 2
    1cfc:	09 f0       	breq	.+2      	; 0x1d00 <handleButtonPress+0xac>
    1cfe:	54 c0       	rjmp	.+168    	; 0x1da8 <handleButtonPress+0x154>
            if (action == 1) {
    1d00:	8c 81       	ldd	r24, Y+4	; 0x04
    1d02:	81 30       	cpi	r24, 0x01	; 1
    1d04:	81 f4       	brne	.+32     	; 0x1d26 <handleButtonPress+0xd2>
                TX_Data[0] = REQUEST_PARK_CAR;
    1d06:	86 e0       	ldi	r24, 0x06	; 6
    1d08:	80 93 3b 01 	sts	0x013B, r24
                LCD_VidCLEAR();
    1d0c:	0e 94 b8 0a 	call	0x1570	; 0x1570 <LCD_VidCLEAR>
                LCD_U8WriteString((uint8_t*)"Processing", 0, 0);
    1d10:	85 ef       	ldi	r24, 0xF5	; 245
    1d12:	90 e0       	ldi	r25, 0x00	; 0
    1d14:	60 e0       	ldi	r22, 0x00	; 0
    1d16:	40 e0       	ldi	r20, 0x00	; 0
    1d18:	0e 94 e0 09 	call	0x13c0	; 0x13c0 <LCD_U8WriteString>
                Slave_Send_Request(TX_Data);
    1d1c:	8b e3       	ldi	r24, 0x3B	; 59
    1d1e:	91 e0       	ldi	r25, 0x01	; 1
    1d20:	0e 94 3f 0c 	call	0x187e	; 0x187e <Slave_Send_Request>
    1d24:	56 c0       	rjmp	.+172    	; 0x1dd2 <handleButtonPress+0x17e>
                break;
            } else if (action == 2) {
    1d26:	8c 81       	ldd	r24, Y+4	; 0x04
    1d28:	82 30       	cpi	r24, 0x02	; 2
    1d2a:	09 f0       	breq	.+2      	; 0x1d2e <handleButtonPress+0xda>
    1d2c:	4b c0       	rjmp	.+150    	; 0x1dc4 <handleButtonPress+0x170>
            	delay_milliseconds(100);
    1d2e:	64 e6       	ldi	r22, 0x64	; 100
    1d30:	70 e0       	ldi	r23, 0x00	; 0
    1d32:	80 e0       	ldi	r24, 0x00	; 0
    1d34:	90 e0       	ldi	r25, 0x00	; 0
    1d36:	0e 94 19 08 	call	0x1032	; 0x1032 <delay_milliseconds>
                LCD_VidCLEAR();
    1d3a:	0e 94 b8 0a 	call	0x1570	; 0x1570 <LCD_VidCLEAR>
                LCD_U8WriteString((uint8_t*)"Enter Slot ID:", 0, 0);
    1d3e:	80 e0       	ldi	r24, 0x00	; 0
    1d40:	91 e0       	ldi	r25, 0x01	; 1
    1d42:	60 e0       	ldi	r22, 0x00	; 0
    1d44:	40 e0       	ldi	r20, 0x00	; 0
    1d46:	0e 94 e0 09 	call	0x13c0	; 0x13c0 <LCD_U8WriteString>
                TX_Data[0] = REQUEST_RETRIEVE_CAR;
    1d4a:	87 e0       	ldi	r24, 0x07	; 7
    1d4c:	80 93 3b 01 	sts	0x013B, r24
                uint8_t slotIDEntered = 0xff;
    1d50:	8f ef       	ldi	r24, 0xFF	; 255
    1d52:	89 83       	std	Y+1, r24	; 0x01
                timeout = 30;
    1d54:	8e e1       	ldi	r24, 0x1E	; 30
    1d56:	90 e0       	ldi	r25, 0x00	; 0
    1d58:	9b 83       	std	Y+3, r25	; 0x03
    1d5a:	8a 83       	std	Y+2, r24	; 0x02
    1d5c:	11 c0       	rjmp	.+34     	; 0x1d80 <handleButtonPress+0x12c>
                while (timeout > 0) {
                    slotIDEntered = KeyPad_get_pressed_key();
    1d5e:	0e 94 bf 08 	call	0x117e	; 0x117e <KeyPad_get_pressed_key>
    1d62:	89 83       	std	Y+1, r24	; 0x01
                    if (slotIDEntered != 0xFF) {
    1d64:	89 81       	ldd	r24, Y+1	; 0x01
    1d66:	8f 3f       	cpi	r24, 0xFF	; 255
    1d68:	79 f4       	brne	.+30     	; 0x1d88 <handleButtonPress+0x134>
                        break;
                    }
                    delay_milliseconds(1);
    1d6a:	61 e0       	ldi	r22, 0x01	; 1
    1d6c:	70 e0       	ldi	r23, 0x00	; 0
    1d6e:	80 e0       	ldi	r24, 0x00	; 0
    1d70:	90 e0       	ldi	r25, 0x00	; 0
    1d72:	0e 94 19 08 	call	0x1032	; 0x1032 <delay_milliseconds>
                    timeout--;
    1d76:	8a 81       	ldd	r24, Y+2	; 0x02
    1d78:	9b 81       	ldd	r25, Y+3	; 0x03
    1d7a:	01 97       	sbiw	r24, 0x01	; 1
    1d7c:	9b 83       	std	Y+3, r25	; 0x03
    1d7e:	8a 83       	std	Y+2, r24	; 0x02
                LCD_VidCLEAR();
                LCD_U8WriteString((uint8_t*)"Enter Slot ID:", 0, 0);
                TX_Data[0] = REQUEST_RETRIEVE_CAR;
                uint8_t slotIDEntered = 0xff;
                timeout = 30;
                while (timeout > 0) {
    1d80:	8a 81       	ldd	r24, Y+2	; 0x02
    1d82:	9b 81       	ldd	r25, Y+3	; 0x03
    1d84:	00 97       	sbiw	r24, 0x00	; 0
    1d86:	59 f7       	brne	.-42     	; 0x1d5e <handleButtonPress+0x10a>
                        break;
                    }
                    delay_milliseconds(1);
                    timeout--;
                }
                TX_Data[1] = slotIDEntered;
    1d88:	89 81       	ldd	r24, Y+1	; 0x01
    1d8a:	80 93 3c 01 	sts	0x013C, r24
                LCD_VidCLEAR();
    1d8e:	0e 94 b8 0a 	call	0x1570	; 0x1570 <LCD_VidCLEAR>
                LCD_U8WriteString((uint8_t*)"Processing", 0, 0);
    1d92:	85 ef       	ldi	r24, 0xF5	; 245
    1d94:	90 e0       	ldi	r25, 0x00	; 0
    1d96:	60 e0       	ldi	r22, 0x00	; 0
    1d98:	40 e0       	ldi	r20, 0x00	; 0
    1d9a:	0e 94 e0 09 	call	0x13c0	; 0x13c0 <LCD_U8WriteString>
                Slave_Send_Request(TX_Data);
    1d9e:	8b e3       	ldi	r24, 0x3B	; 59
    1da0:	91 e0       	ldi	r25, 0x01	; 1
    1da2:	0e 94 3f 0c 	call	0x187e	; 0x187e <Slave_Send_Request>
    1da6:	15 c0       	rjmp	.+42     	; 0x1dd2 <handleButtonPress+0x17e>
                break;
            }
        } else {
            LCD_VidCLEAR();
    1da8:	0e 94 b8 0a 	call	0x1570	; 0x1570 <LCD_VidCLEAR>
            LCD_U8WriteString((uint8_t*)"Invalid choice", 0, 0);
    1dac:	8f e0       	ldi	r24, 0x0F	; 15
    1dae:	91 e0       	ldi	r25, 0x01	; 1
    1db0:	60 e0       	ldi	r22, 0x00	; 0
    1db2:	40 e0       	ldi	r20, 0x00	; 0
    1db4:	0e 94 e0 09 	call	0x13c0	; 0x13c0 <LCD_U8WriteString>
            delay_milliseconds(800);
    1db8:	60 e2       	ldi	r22, 0x20	; 32
    1dba:	73 e0       	ldi	r23, 0x03	; 3
    1dbc:	80 e0       	ldi	r24, 0x00	; 0
    1dbe:	90 e0       	ldi	r25, 0x00	; 0
    1dc0:	0e 94 19 08 	call	0x1032	; 0x1032 <delay_milliseconds>
        }
        int_time_out++;
    1dc4:	8d 81       	ldd	r24, Y+5	; 0x05
    1dc6:	8f 5f       	subi	r24, 0xFF	; 255
    1dc8:	8d 83       	std	Y+5, r24	; 0x05
    LCD_U8WriteString((uint8_t*)"Welcome To Smart Parking system", 0, 0);
    uint8_t action = 0xFF;
    uint16_t timeout =30;
    delay_milliseconds(999);

    while (int_time_out <= 2) {
    1dca:	8d 81       	ldd	r24, Y+5	; 0x05
    1dcc:	83 30       	cpi	r24, 0x03	; 3
    1dce:	08 f4       	brcc	.+2      	; 0x1dd2 <handleButtonPress+0x17e>
    1dd0:	60 cf       	rjmp	.-320    	; 0x1c92 <handleButtonPress+0x3e>
            LCD_U8WriteString((uint8_t*)"Invalid choice", 0, 0);
            delay_milliseconds(800);
        }
        int_time_out++;
    }
}
    1dd2:	0f 90       	pop	r0
    1dd4:	0f 90       	pop	r0
    1dd6:	0f 90       	pop	r0
    1dd8:	0f 90       	pop	r0
    1dda:	0f 90       	pop	r0
    1ddc:	cf 91       	pop	r28
    1dde:	df 91       	pop	r29
    1de0:	08 95       	ret

00001de2 <carDetectedISR>:

void carDetectedISR(void) {
    1de2:	df 93       	push	r29
    1de4:	cf 93       	push	r28
    1de6:	cd b7       	in	r28, 0x3d	; 61
    1de8:	de b7       	in	r29, 0x3e	; 62
    carDetectedFlag = 1;
    1dea:	81 e0       	ldi	r24, 0x01	; 1
    1dec:	80 93 40 01 	sts	0x0140, r24
}
    1df0:	cf 91       	pop	r28
    1df2:	df 91       	pop	r29
    1df4:	08 95       	ret

00001df6 <buttonPressedISR>:

void buttonPressedISR(void) {
    1df6:	df 93       	push	r29
    1df8:	cf 93       	push	r28
    1dfa:	cd b7       	in	r28, 0x3d	; 61
    1dfc:	de b7       	in	r29, 0x3e	; 62
    buttonPressedFlag = 1;
    1dfe:	81 e0       	ldi	r24, 0x01	; 1
    1e00:	80 93 3d 01 	sts	0x013D, r24
}
    1e04:	cf 91       	pop	r28
    1e06:	df 91       	pop	r29
    1e08:	08 95       	ret

00001e0a <__mulsi3>:
    1e0a:	62 9f       	mul	r22, r18
    1e0c:	d0 01       	movw	r26, r0
    1e0e:	73 9f       	mul	r23, r19
    1e10:	f0 01       	movw	r30, r0
    1e12:	82 9f       	mul	r24, r18
    1e14:	e0 0d       	add	r30, r0
    1e16:	f1 1d       	adc	r31, r1
    1e18:	64 9f       	mul	r22, r20
    1e1a:	e0 0d       	add	r30, r0
    1e1c:	f1 1d       	adc	r31, r1
    1e1e:	92 9f       	mul	r25, r18
    1e20:	f0 0d       	add	r31, r0
    1e22:	83 9f       	mul	r24, r19
    1e24:	f0 0d       	add	r31, r0
    1e26:	74 9f       	mul	r23, r20
    1e28:	f0 0d       	add	r31, r0
    1e2a:	65 9f       	mul	r22, r21
    1e2c:	f0 0d       	add	r31, r0
    1e2e:	99 27       	eor	r25, r25
    1e30:	72 9f       	mul	r23, r18
    1e32:	b0 0d       	add	r27, r0
    1e34:	e1 1d       	adc	r30, r1
    1e36:	f9 1f       	adc	r31, r25
    1e38:	63 9f       	mul	r22, r19
    1e3a:	b0 0d       	add	r27, r0
    1e3c:	e1 1d       	adc	r30, r1
    1e3e:	f9 1f       	adc	r31, r25
    1e40:	bd 01       	movw	r22, r26
    1e42:	cf 01       	movw	r24, r30
    1e44:	11 24       	eor	r1, r1
    1e46:	08 95       	ret

00001e48 <__udivmodhi4>:
    1e48:	aa 1b       	sub	r26, r26
    1e4a:	bb 1b       	sub	r27, r27
    1e4c:	51 e1       	ldi	r21, 0x11	; 17
    1e4e:	07 c0       	rjmp	.+14     	; 0x1e5e <__udivmodhi4_ep>

00001e50 <__udivmodhi4_loop>:
    1e50:	aa 1f       	adc	r26, r26
    1e52:	bb 1f       	adc	r27, r27
    1e54:	a6 17       	cp	r26, r22
    1e56:	b7 07       	cpc	r27, r23
    1e58:	10 f0       	brcs	.+4      	; 0x1e5e <__udivmodhi4_ep>
    1e5a:	a6 1b       	sub	r26, r22
    1e5c:	b7 0b       	sbc	r27, r23

00001e5e <__udivmodhi4_ep>:
    1e5e:	88 1f       	adc	r24, r24
    1e60:	99 1f       	adc	r25, r25
    1e62:	5a 95       	dec	r21
    1e64:	a9 f7       	brne	.-22     	; 0x1e50 <__udivmodhi4_loop>
    1e66:	80 95       	com	r24
    1e68:	90 95       	com	r25
    1e6a:	bc 01       	movw	r22, r24
    1e6c:	cd 01       	movw	r24, r26
    1e6e:	08 95       	ret

00001e70 <__udivmodsi4>:
    1e70:	a1 e2       	ldi	r26, 0x21	; 33
    1e72:	1a 2e       	mov	r1, r26
    1e74:	aa 1b       	sub	r26, r26
    1e76:	bb 1b       	sub	r27, r27
    1e78:	fd 01       	movw	r30, r26
    1e7a:	0d c0       	rjmp	.+26     	; 0x1e96 <__udivmodsi4_ep>

00001e7c <__udivmodsi4_loop>:
    1e7c:	aa 1f       	adc	r26, r26
    1e7e:	bb 1f       	adc	r27, r27
    1e80:	ee 1f       	adc	r30, r30
    1e82:	ff 1f       	adc	r31, r31
    1e84:	a2 17       	cp	r26, r18
    1e86:	b3 07       	cpc	r27, r19
    1e88:	e4 07       	cpc	r30, r20
    1e8a:	f5 07       	cpc	r31, r21
    1e8c:	20 f0       	brcs	.+8      	; 0x1e96 <__udivmodsi4_ep>
    1e8e:	a2 1b       	sub	r26, r18
    1e90:	b3 0b       	sbc	r27, r19
    1e92:	e4 0b       	sbc	r30, r20
    1e94:	f5 0b       	sbc	r31, r21

00001e96 <__udivmodsi4_ep>:
    1e96:	66 1f       	adc	r22, r22
    1e98:	77 1f       	adc	r23, r23
    1e9a:	88 1f       	adc	r24, r24
    1e9c:	99 1f       	adc	r25, r25
    1e9e:	1a 94       	dec	r1
    1ea0:	69 f7       	brne	.-38     	; 0x1e7c <__udivmodsi4_loop>
    1ea2:	60 95       	com	r22
    1ea4:	70 95       	com	r23
    1ea6:	80 95       	com	r24
    1ea8:	90 95       	com	r25
    1eaa:	9b 01       	movw	r18, r22
    1eac:	ac 01       	movw	r20, r24
    1eae:	bd 01       	movw	r22, r26
    1eb0:	cf 01       	movw	r24, r30
    1eb2:	08 95       	ret

00001eb4 <_exit>:
    1eb4:	f8 94       	cli

00001eb6 <__stop_program>:
    1eb6:	ff cf       	rjmp	.-2      	; 0x1eb6 <__stop_program>
